# Generated by Haxe 3.4.4
# coding: utf-8

from datetime import datetime as python_lib_datetime_Datetime
from datetime import timezone as python_lib_datetime_Timezone
import math as python_lib_Math
import math as Math
import functools as python_lib_Functools
import inspect as python_lib_Inspect
import json as python_lib_Json
import random as python_lib_Random
import re as python_lib_Re
import sys as python_lib_Sys
from io import StringIO as python_lib_io_StringIO
from socket import socket as python_lib_net_Socket
import socket as python_lib_net_SocketModule
import urllib.parse as python_lib_urllib_Parse


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:38
        self.tag = tag
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:39
        self.index = index
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:40
        self.params = params

    def __str__(self):
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:45
        if (self.params is None):
            return self.tag
        else:
            # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:48
            _this = self.params
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")



class Date:
    _hx_class_name = "Date"
    __slots__ = ("date",)
    _hx_fields = ["date"]
    _hx_statics = ["EPOCH_UTC", "now", "fromTime", "UTC", "datetimeTimestamp", "fromString"]

    def __init__(self,year,month,day,hour,_hx_min,sec):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:34
        if (year < python_lib_datetime_Datetime.min.year):
            year = python_lib_datetime_Datetime.min.year
        # /usr/local/lib/haxe/std/python/_std/Date.hx:35
        if (day == 0):
            day = 1
        # /usr/local/lib/haxe/std/python/_std/Date.hx:36
        self.date = python_lib_datetime_Datetime(year,(month + 1),day,hour,_hx_min,sec,0)

    @staticmethod
    def now():
        # /usr/local/lib/haxe/std/python/_std/Date.hx:98
        d = Date(1970,0,1,0,0,0)
        # /usr/local/lib/haxe/std/python/_std/Date.hx:99
        d.date = python_lib_datetime_Datetime.now()
        # /usr/local/lib/haxe/std/python/_std/Date.hx:100
        return d

    @staticmethod
    def fromTime(t):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:105
        d = Date(1970,0,1,0,0,0)
        # /usr/local/lib/haxe/std/python/_std/Date.hx:106
        d.date = python_lib_datetime_Datetime.fromtimestamp((t / 1000.0))
        # /usr/local/lib/haxe/std/python/_std/Date.hx:107
        return d

    @staticmethod
    def UTC(year,month,day,hour,_hx_min,sec):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:113
        dt = python_lib_datetime_Datetime(year,(month + 1),day,hour,_hx_min,sec,0,python_lib_datetime_Timezone.utc)
        # /usr/local/lib/haxe/std/python/_std/Date.hx:114
        return Date.datetimeTimestamp(dt,Date.EPOCH_UTC)

    @staticmethod
    def datetimeTimestamp(dt,epoch):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:119
        return ((dt - epoch).total_seconds() * 1000)

    @staticmethod
    def fromString(s):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:124
        _g = len(s)
        _g1 = _g
        # /usr/local/lib/haxe/std/python/_std/Date.hx:126
        if (_g1 == 8):
            # /usr/local/lib/haxe/std/python/_std/Date.hx:127
            k = s.split(":")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:128
            d = Date(0,0,0,Std.parseInt((k[0] if 0 < len(k) else None)),Std.parseInt((k[1] if 1 < len(k) else None)),Std.parseInt((k[2] if 2 < len(k) else None)))
            # /usr/local/lib/haxe/std/python/_std/Date.hx:129
            return d
        elif (_g1 == 10):
            # /usr/local/lib/haxe/std/python/_std/Date.hx:131
            k1 = s.split("-")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:132
            return Date(Std.parseInt((k1[0] if 0 < len(k1) else None)),(Std.parseInt((k1[1] if 1 < len(k1) else None)) - 1),Std.parseInt((k1[2] if 2 < len(k1) else None)),0,0,0)
        elif (_g1 == 19):
            # /usr/local/lib/haxe/std/python/_std/Date.hx:134
            k2 = s.split(" ")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:135
            _this = (k2[0] if 0 < len(k2) else None)
            y = _this.split("-")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:136
            _this1 = (k2[1] if 1 < len(k2) else None)
            t = _this1.split(":")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:137
            return Date(Std.parseInt((y[0] if 0 < len(y) else None)),(Std.parseInt((y[1] if 1 < len(y) else None)) - 1),Std.parseInt((y[2] if 2 < len(y) else None)),Std.parseInt((t[0] if 0 < len(t) else None)),Std.parseInt((t[1] if 1 < len(t) else None)),Std.parseInt((t[2] if 2 < len(t) else None)))
        else:
            raise _HxException(("Invalid date format : " + ("null" if s is None else s)))



class EReg:
    _hx_class_name = "EReg"
    __slots__ = ("pattern", "matchObj", "_hx_global")
    _hx_fields = ["pattern", "matchObj", "global"]

    def __init__(self,r,opt):
        # /usr/local/lib/haxe/std/python/_std/EReg.hx:30
        self.matchObj = None
        # /usr/local/lib/haxe/std/python/_std/EReg.hx:34
        self._hx_global = False
        # /usr/local/lib/haxe/std/python/_std/EReg.hx:35
        options = 0
        # /usr/local/lib/haxe/std/python/_std/EReg.hx:36
        # /usr/local/lib/haxe/std/python/_std/EReg.hx:36
        _g1 = 0
        _g = len(opt)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/python/_std/EReg.hx:37
            c = (-1 if ((i >= len(opt))) else ord(opt[i]))
            # /usr/local/lib/haxe/std/python/_std/EReg.hx:38
            if (c == 109):
                options = (options | python_lib_Re.M)
            # /usr/local/lib/haxe/std/python/_std/EReg.hx:39
            if (c == 105):
                options = (options | python_lib_Re.I)
            # /usr/local/lib/haxe/std/python/_std/EReg.hx:40
            if (c == 115):
                options = (options | python_lib_Re.S)
            # /usr/local/lib/haxe/std/python/_std/EReg.hx:41
            if (c == 117):
                options = (options | python_lib_Re.U)
            # /usr/local/lib/haxe/std/python/_std/EReg.hx:42
            if (c == 103):
                self._hx_global = True
        # /usr/local/lib/haxe/std/python/_std/EReg.hx:44
        self.pattern = python_lib_Re.compile(r,options)



class EnumValue:
    _hx_class_name = "EnumValue"


class Lambda:
    _hx_class_name = "Lambda"
    __slots__ = ()
    _hx_statics = ["exists"]

    @staticmethod
    def exists(it,f):
        # /usr/local/lib/haxe/std/Lambda.hx:142
        # /usr/local/lib/haxe/std/Lambda.hx:142
        x = HxOverrides.iterator(it)
        while x.hasNext():
            x1 = x.next()
            # /usr/local/lib/haxe/std/Lambda.hx:143
            if f(x1):
                return True
        # /usr/local/lib/haxe/std/Lambda.hx:145
        return False


class List:
    _hx_class_name = "List"
    __slots__ = ("h", "length")
    _hx_fields = ["h", "length"]
    _hx_methods = ["iterator"]

    def __init__(self):
        # /usr/local/lib/haxe/std/List.hx:32
        self.h = None
        # /usr/local/lib/haxe/std/List.hx:44
        self.length = 0

    def iterator(self):
        # /usr/local/lib/haxe/std/List.hx:161
        return _List_ListIterator(self.h)



class _List_ListNode:
    _hx_class_name = "_List.ListNode"
    __slots__ = ("item", "next")
    _hx_fields = ["item", "next"]



class _List_ListIterator:
    _hx_class_name = "_List.ListIterator"
    __slots__ = ("head",)
    _hx_fields = ["head"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,head):
        # /usr/local/lib/haxe/std/List.hx:269
        self.head = head

    def hasNext(self):
        # /usr/local/lib/haxe/std/List.hx:273
        return (self.head is not None)

    def next(self):
        # /usr/local/lib/haxe/std/List.hx:277
        val = self.head.item
        # /usr/local/lib/haxe/std/List.hx:278
        self.head = self.head.next
        # /usr/local/lib/haxe/std/List.hx:279
        return val



class Main:
    _hx_class_name = "Main"
    __slots__ = ()
    _hx_methods = ["getUrl", "showImage", "getCurrentDate"]
    _hx_statics = ["main"]

    def __init__(self):
        # src/Main.hx:18
        self.getUrl(("https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY&date=" + HxOverrides.stringOrNull(self.getCurrentDate())),False)

    def getUrl(self,url,isPost = False):
        # src/Main.hx:22
        if (isPost is None):
            isPost = False
        # src/Main.hx:21
        _gthis = self
        # src/Main.hx:23
        req = haxe_Http(url)
        # src/Main.hx:27
        def _hx_local_0(data):
            # src/Main.hx:27
            try:
                # src/Main.hx:28
                json = python_lib_Json.loads(data,**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'object_hook': python_Lib.dictToAnon})))
                # src/Main.hx:29
                _gthis.showImage(json)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                print(str(e))
        # src/Main.hx:25
        req.onData = _hx_local_0
        # src/Main.hx:37
        def _hx_local_1(error):
            # src/Main.hx:37
            print(str(("error: " + ("null" if error is None else error))))
        # src/Main.hx:35
        req.onError = _hx_local_1
        # src/Main.hx:42
        def _hx_local_2(status):
            # src/Main.hx:42
            print(str(("status: " + Std.string(status))))
        # src/Main.hx:40
        req.onStatus = _hx_local_2
        # src/Main.hx:45
        req.request(isPost)

    def showImage(self,data):
        # src/Main.hx:50
        python_Lib.print((((("<img src=\"" + HxOverrides.stringOrNull(data.hdurl)) + "\" alt=\"") + HxOverrides.stringOrNull(data.title)) + "\">"))

    def getCurrentDate(self):
        # src/Main.hx:55
        date = Date.now()
        # src/Main.hx:56
        year = date.date.year
        # src/Main.hx:57
        month = ((date.date.month - 1) + 1)
        # src/Main.hx:58
        day = date.date.day
        # src/Main.hx:59
        return ((((Std.string(year) + "-") + HxOverrides.stringOrNull(StringTools.lpad(Std.string(month),"0",2))) + "-") + HxOverrides.stringOrNull(StringTools.lpad(Std.string(day),"0",2)))

    @staticmethod
    def main():
        # src/Main.hx:64
        main = Main()



class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field"]

    @staticmethod
    def field(o,field):
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:44
        return python_Boot.field(o,field)


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["string", "parseInt", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def string(s):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:134
        return python_Boot.toString1(s,"")

    @staticmethod
    def parseInt(x):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:147
        if (x is None):
            return None
        # /usr/local/lib/haxe/std/python/_std/Std.hx:148
        try:
            return int(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            try:
                # /usr/local/lib/haxe/std/python/_std/Std.hx:152
                prefix = HxString.substr(x,0,2).lower()
                # /usr/local/lib/haxe/std/python/_std/Std.hx:154
                if (prefix == "0x"):
                    return int(x,16)
                # /usr/local/lib/haxe/std/python/_std/Std.hx:157
                raise _HxException("fail")
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e1 = _hx_e1
                # /usr/local/lib/haxe/std/python/_std/Std.hx:160
                x1 = Std.parseFloat(x)
                r = None
                try:
                    r = int(x1)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    r = None
                # /usr/local/lib/haxe/std/python/_std/Std.hx:162
                if (r is None):
                    # /usr/local/lib/haxe/std/python/_std/Std.hx:163
                    r1 = Std.shortenPossibleNumber(x)
                    # /usr/local/lib/haxe/std/python/_std/Std.hx:164
                    if (r1 != x):
                        return Std.parseInt(r1)
                    else:
                        return None
                # /usr/local/lib/haxe/std/python/_std/Std.hx:170
                return r

    @staticmethod
    def shortenPossibleNumber(x):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:177
        r = ""
        # /usr/local/lib/haxe/std/python/_std/Std.hx:178
        # /usr/local/lib/haxe/std/python/_std/Std.hx:178
        _g1 = 0
        _g = len(x)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/python/_std/Std.hx:179
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            # /usr/local/lib/haxe/std/python/_std/Std.hx:180
            # /usr/local/lib/haxe/std/python/_std/Std.hx:180
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            else:
                _g21 = _g2
                # /usr/local/lib/haxe/std/python/_std/Std.hx:191
                if (((((((((((_g21 == 57) or ((_g21 == 56))) or ((_g21 == 55))) or ((_g21 == 54))) or ((_g21 == 53))) or ((_g21 == 52))) or ((_g21 == 51))) or ((_g21 == 50))) or ((_g21 == 49))) or ((_g21 == 48))) or ((_g21 == 46))):
                    r = (("null" if r is None else r) + ("null" if c is None else c))
                else:
                    break
        # /usr/local/lib/haxe/std/python/_std/Std.hx:195
        return r

    @staticmethod
    def parseFloat(x):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:200
        try:
            return float(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            # /usr/local/lib/haxe/std/python/_std/Std.hx:204
            if (x is not None):
                # /usr/local/lib/haxe/std/python/_std/Std.hx:205
                r1 = Std.shortenPossibleNumber(x)
                # /usr/local/lib/haxe/std/python/_std/Std.hx:206
                if (r1 != x):
                    return Std.parseFloat(r1)
            # /usr/local/lib/haxe/std/python/_std/Std.hx:210
            return Math.NaN


class StringTools:
    _hx_class_name = "StringTools"
    __slots__ = ()
    _hx_statics = ["isSpace", "ltrim", "rtrim", "lpad"]

    @staticmethod
    def isSpace(s,pos):
        # /usr/local/lib/haxe/std/StringTools.hx:247
        if (((len(s) == 0) or ((pos < 0))) or ((pos >= len(s)))):
            return False
        # /usr/local/lib/haxe/std/StringTools.hx:249
        c = HxString.charCodeAt(s,pos)
        # /usr/local/lib/haxe/std/StringTools.hx:250
        if (not (((c > 8) and ((c < 14))))):
            return (c == 32)
        else:
            return True

    @staticmethod
    def ltrim(s):
        # /usr/local/lib/haxe/std/StringTools.hx:266
        l = len(s)
        # /usr/local/lib/haxe/std/StringTools.hx:267
        r = 0
        # /usr/local/lib/haxe/std/StringTools.hx:268
        while ((r < l) and StringTools.isSpace(s,r)):
            r = (r + 1)
        # /usr/local/lib/haxe/std/StringTools.hx:271
        if (r > 0):
            return HxString.substr(s,r,(l - r))
        else:
            return s

    @staticmethod
    def rtrim(s):
        # /usr/local/lib/haxe/std/StringTools.hx:291
        l = len(s)
        # /usr/local/lib/haxe/std/StringTools.hx:292
        r = 0
        # /usr/local/lib/haxe/std/StringTools.hx:293
        while ((r < l) and StringTools.isSpace(s,((l - r) - 1))):
            r = (r + 1)
        # /usr/local/lib/haxe/std/StringTools.hx:296
        if (r > 0):
            return HxString.substr(s,0,(l - r))
        else:
            return s

    @staticmethod
    def lpad(s,c,l):
        # /usr/local/lib/haxe/std/StringTools.hx:332
        if (len(c) <= 0):
            return s
        # /usr/local/lib/haxe/std/StringTools.hx:335
        while (len(s) < l):
            s = (("null" if c is None else c) + ("null" if s is None else s))
        # /usr/local/lib/haxe/std/StringTools.hx:338
        return s


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()


class haxe_Http:
    _hx_class_name = "haxe.Http"
    _hx_fields = ["url", "responseData", "noShutdown", "cnxTimeout", "responseHeaders", "chunk_size", "chunk_buf", "file", "postData", "headers", "params"]
    _hx_methods = ["request", "customRequest", "readHttpResponse", "readChunk", "onData", "onError", "onStatus"]
    _hx_statics = ["PROXY"]

    def __init__(self,url):
        # /usr/local/lib/haxe/std/haxe/Http.hx:60
        self.postData = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:55
        self.file = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:54
        self.chunk_buf = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:53
        self.chunk_size = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:52
        self.responseHeaders = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:50
        self.noShutdown = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:48
        self.responseData = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:80
        self.url = url
        # /usr/local/lib/haxe/std/haxe/Http.hx:81
        self.headers = List()
        # /usr/local/lib/haxe/std/haxe/Http.hx:82
        self.params = List()
        # /usr/local/lib/haxe/std/haxe/Http.hx:88
        self.cnxTimeout = 10

    def request(self,post = None):
        # /usr/local/lib/haxe/std/haxe/Http.hx:189
        _gthis = self
        # /usr/local/lib/haxe/std/haxe/Http.hx:190
        me = self
        # /usr/local/lib/haxe/std/haxe/Http.hx:386
        me1 = self
        # /usr/local/lib/haxe/std/haxe/Http.hx:387
        output = haxe_io_BytesOutput()
        # /usr/local/lib/haxe/std/haxe/Http.hx:388
        old = self.onError
        # /usr/local/lib/haxe/std/haxe/Http.hx:389
        err = False
        # /usr/local/lib/haxe/std/haxe/Http.hx:390
        def _hx_local_0(e):
            # /usr/local/lib/haxe/std/haxe/Http.hx:390
            nonlocal err
            # /usr/local/lib/haxe/std/haxe/Http.hx:394
            me1.responseData = output.getBytes().toString()
            # /usr/local/lib/haxe/std/haxe/Http.hx:396
            err = True
            # /usr/local/lib/haxe/std/haxe/Http.hx:398
            _gthis.onError = old
            # /usr/local/lib/haxe/std/haxe/Http.hx:399
            _gthis.onError(e)
        self.onError = _hx_local_0
        # /usr/local/lib/haxe/std/haxe/Http.hx:401
        self.customRequest(post,output)
        # /usr/local/lib/haxe/std/haxe/Http.hx:402
        if (not err):
            # /usr/local/lib/haxe/std/haxe/Http.hx:406
            def _hx_local_1():
                # /usr/local/lib/haxe/std/haxe/Http.hx:406
                me1.responseData = output.getBytes().toString()
                return me1.responseData
            me1.onData(_hx_local_1())

    def customRequest(self,post,api,sock = None,method = None):
        # /usr/local/lib/haxe/std/haxe/Http.hx:426
        self.responseData = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:427
        url_regexp = EReg("^(https?://)?([a-zA-Z\\.0-9_-]+)(:[0-9]+)?(.*)$","")
        # /usr/local/lib/haxe/std/haxe/Http.hx:428
        url_regexp.matchObj = python_lib_Re.search(url_regexp.pattern,self.url)
        if (url_regexp.matchObj is None):
            # /usr/local/lib/haxe/std/haxe/Http.hx:429
            self.onError("Invalid URL")
            # /usr/local/lib/haxe/std/haxe/Http.hx:430
            return
        # /usr/local/lib/haxe/std/haxe/Http.hx:432
        secure = (url_regexp.matchObj.group(1) == "https://")
        # /usr/local/lib/haxe/std/haxe/Http.hx:433
        if (sock is None):
            if secure:
                raise _HxException("Https is only supported with -lib hxssl")
            else:
                sock = sys_net_Socket()
        # /usr/local/lib/haxe/std/haxe/Http.hx:447
        host = url_regexp.matchObj.group(2)
        # /usr/local/lib/haxe/std/haxe/Http.hx:448
        portString = url_regexp.matchObj.group(3)
        # /usr/local/lib/haxe/std/haxe/Http.hx:449
        request = url_regexp.matchObj.group(4)
        # /usr/local/lib/haxe/std/haxe/Http.hx:450
        if (request == ""):
            request = "/"
        # /usr/local/lib/haxe/std/haxe/Http.hx:452
        port = ((443 if secure else 80) if (((portString is None) or ((portString == "")))) else Std.parseInt(HxString.substr(portString,1,(len(portString) - 1))))
        # /usr/local/lib/haxe/std/haxe/Http.hx:453
        data = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:455
        multipart = (self.file is not None)
        # /usr/local/lib/haxe/std/haxe/Http.hx:456
        boundary = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:457
        uri = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:458
        if multipart:
            # /usr/local/lib/haxe/std/haxe/Http.hx:459
            post = True
            # /usr/local/lib/haxe/std/haxe/Http.hx:460
            x = (python_lib_Random.random() * 1000)
            boundary1 = None
            try:
                boundary1 = int(x)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                boundary1 = None
            boundary2 = Std.string(boundary1)
            x1 = (python_lib_Random.random() * 1000)
            boundary3 = None
            try:
                boundary3 = int(x1)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e1 = _hx_e1
                boundary3 = None
            boundary4 = (("null" if boundary2 is None else boundary2) + Std.string(boundary3))
            x2 = (python_lib_Random.random() * 1000)
            boundary5 = None
            try:
                boundary5 = int(x2)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e2 = _hx_e1
                boundary5 = None
            boundary6 = (("null" if boundary4 is None else boundary4) + Std.string(boundary5))
            x3 = (python_lib_Random.random() * 1000)
            boundary7 = None
            try:
                boundary7 = int(x3)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e3 = _hx_e1
                boundary7 = None
            boundary = (("null" if boundary6 is None else boundary6) + Std.string(boundary7))
            # /usr/local/lib/haxe/std/haxe/Http.hx:461
            while (len(boundary) < 38):
                boundary = ("-" + ("null" if boundary is None else boundary))
            # /usr/local/lib/haxe/std/haxe/Http.hx:463
            b_b = python_lib_io_StringIO()
            # /usr/local/lib/haxe/std/haxe/Http.hx:464
            # /usr/local/lib/haxe/std/haxe/Http.hx:464
            _g_head = self.params.h
            while (_g_head is not None):
                val = _g_head.item
                _g_head = _g_head.next
                p = val
                # /usr/local/lib/haxe/std/haxe/Http.hx:465
                b_b.write("--")
                # /usr/local/lib/haxe/std/haxe/Http.hx:466
                b_b.write(Std.string(boundary))
                # /usr/local/lib/haxe/std/haxe/Http.hx:467
                b_b.write("\r\n")
                # /usr/local/lib/haxe/std/haxe/Http.hx:468
                b_b.write("Content-Disposition: form-data; name=\"")
                # /usr/local/lib/haxe/std/haxe/Http.hx:469
                b_b.write(Std.string(p.param))
                # /usr/local/lib/haxe/std/haxe/Http.hx:470
                b_b.write("\"")
                # /usr/local/lib/haxe/std/haxe/Http.hx:471
                b_b.write("\r\n")
                # /usr/local/lib/haxe/std/haxe/Http.hx:472
                b_b.write("\r\n")
                # /usr/local/lib/haxe/std/haxe/Http.hx:473
                b_b.write(Std.string(p.value))
                # /usr/local/lib/haxe/std/haxe/Http.hx:474
                b_b.write("\r\n")
            # /usr/local/lib/haxe/std/haxe/Http.hx:476
            b_b.write("--")
            # /usr/local/lib/haxe/std/haxe/Http.hx:477
            b_b.write(Std.string(boundary))
            # /usr/local/lib/haxe/std/haxe/Http.hx:478
            b_b.write("\r\n")
            # /usr/local/lib/haxe/std/haxe/Http.hx:479
            b_b.write("Content-Disposition: form-data; name=\"")
            # /usr/local/lib/haxe/std/haxe/Http.hx:480
            b_b.write(Std.string(self.file.param))
            # /usr/local/lib/haxe/std/haxe/Http.hx:481
            b_b.write("\"; filename=\"")
            # /usr/local/lib/haxe/std/haxe/Http.hx:482
            b_b.write(Std.string(self.file.filename))
            # /usr/local/lib/haxe/std/haxe/Http.hx:483
            b_b.write("\"")
            # /usr/local/lib/haxe/std/haxe/Http.hx:484
            b_b.write("\r\n")
            # /usr/local/lib/haxe/std/haxe/Http.hx:485
            b_b.write(Std.string(((("Content-Type: " + HxOverrides.stringOrNull(self.file.mimeType)) + "\r\n") + "\r\n")))
            # /usr/local/lib/haxe/std/haxe/Http.hx:486
            uri = b_b.getvalue()
        else:
            # /usr/local/lib/haxe/std/haxe/Http.hx:488
            _g_head1 = self.params.h
            while (_g_head1 is not None):
                val1 = _g_head1.item
                _g_head1 = _g_head1.next
                p1 = val1
                # /usr/local/lib/haxe/std/haxe/Http.hx:489
                if (uri is None):
                    uri = ""
                else:
                    uri = (("null" if uri is None else uri) + "&")
                # /usr/local/lib/haxe/std/haxe/Http.hx:493
                uri = (("null" if uri is None else uri) + HxOverrides.stringOrNull((((HxOverrides.stringOrNull(python_lib_urllib_Parse.quote(p1.param,"")) + "=") + HxOverrides.stringOrNull(python_lib_urllib_Parse.quote(p1.value,""))))))
        # /usr/local/lib/haxe/std/haxe/Http.hx:497
        b_b1 = python_lib_io_StringIO()
        # /usr/local/lib/haxe/std/haxe/Http.hx:498
        if (method is not None):
            # /usr/local/lib/haxe/std/haxe/Http.hx:499
            b_b1.write(Std.string(method))
            # /usr/local/lib/haxe/std/haxe/Http.hx:500
            b_b1.write(" ")
        elif post:
            b_b1.write("POST ")
        else:
            b_b1.write("GET ")
        # /usr/local/lib/haxe/std/haxe/Http.hx:506
        if (haxe_Http.PROXY is not None):
            # /usr/local/lib/haxe/std/haxe/Http.hx:507
            b_b1.write("http://")
            # /usr/local/lib/haxe/std/haxe/Http.hx:508
            b_b1.write(Std.string(host))
            # /usr/local/lib/haxe/std/haxe/Http.hx:509
            if (port != 80):
                # /usr/local/lib/haxe/std/haxe/Http.hx:510
                b_b1.write(":")
                # /usr/local/lib/haxe/std/haxe/Http.hx:511
                b_b1.write(Std.string(port))
        # /usr/local/lib/haxe/std/haxe/Http.hx:514
        b_b1.write(Std.string(request))
        # /usr/local/lib/haxe/std/haxe/Http.hx:516
        if ((not post) and ((uri is not None))):
            # /usr/local/lib/haxe/std/haxe/Http.hx:517
            if (request.find("?", 0) >= 0):
                b_b1.write("&")
            else:
                b_b1.write("?")
            # /usr/local/lib/haxe/std/haxe/Http.hx:521
            b_b1.write(Std.string(uri))
        # /usr/local/lib/haxe/std/haxe/Http.hx:523
        b_b1.write(Std.string(((" HTTP/1.1\r\nHost: " + ("null" if host is None else host)) + "\r\n")))
        # /usr/local/lib/haxe/std/haxe/Http.hx:524
        if (self.postData is not None):
            b_b1.write(Std.string((("Content-Length: " + Std.string(len(self.postData))) + "\r\n")))
        elif (post and ((uri is not None))):
            # /usr/local/lib/haxe/std/haxe/Http.hx:527
            def _hx_local_2(h):
                # /usr/local/lib/haxe/std/haxe/Http.hx:527
                return (h.header == "Content-Type")
            if (multipart or (not Lambda.exists(self.headers,_hx_local_2))):
                # /usr/local/lib/haxe/std/haxe/Http.hx:528
                b_b1.write("Content-Type: ")
                # /usr/local/lib/haxe/std/haxe/Http.hx:529
                if multipart:
                    # /usr/local/lib/haxe/std/haxe/Http.hx:530
                    b_b1.write("multipart/form-data")
                    # /usr/local/lib/haxe/std/haxe/Http.hx:531
                    b_b1.write("; boundary=")
                    # /usr/local/lib/haxe/std/haxe/Http.hx:532
                    b_b1.write(Std.string(boundary))
                else:
                    b_b1.write("application/x-www-form-urlencoded")
                # /usr/local/lib/haxe/std/haxe/Http.hx:535
                b_b1.write("\r\n")
            # /usr/local/lib/haxe/std/haxe/Http.hx:537
            if multipart:
                b_b1.write(Std.string((("Content-Length: " + Std.string(((((len(uri) + self.file.size) + len(boundary)) + 6)))) + "\r\n")))
            else:
                b_b1.write(Std.string((("Content-Length: " + Std.string(len(uri))) + "\r\n")))
        # /usr/local/lib/haxe/std/haxe/Http.hx:542
        b_b1.write("Connection: close\r\n")
        # /usr/local/lib/haxe/std/haxe/Http.hx:543
        # /usr/local/lib/haxe/std/haxe/Http.hx:543
        _g_head2 = self.headers.h
        while (_g_head2 is not None):
            val2 = _g_head2.item
            _g_head2 = _g_head2.next
            h1 = val2
            # /usr/local/lib/haxe/std/haxe/Http.hx:544
            b_b1.write(Std.string(h1.header))
            # /usr/local/lib/haxe/std/haxe/Http.hx:545
            b_b1.write(": ")
            # /usr/local/lib/haxe/std/haxe/Http.hx:546
            b_b1.write(Std.string(h1.value))
            # /usr/local/lib/haxe/std/haxe/Http.hx:547
            b_b1.write("\r\n")
        # /usr/local/lib/haxe/std/haxe/Http.hx:549
        b_b1.write("\r\n")
        # /usr/local/lib/haxe/std/haxe/Http.hx:550
        if (self.postData is not None):
            b_b1.write(Std.string(self.postData))
        elif (post and ((uri is not None))):
            b_b1.write(Std.string(uri))
        # /usr/local/lib/haxe/std/haxe/Http.hx:554
        try:
            # /usr/local/lib/haxe/std/haxe/Http.hx:555
            if (haxe_Http.PROXY is not None):
                sock.connect(sys_net_Host(haxe_Http.PROXY.host),haxe_Http.PROXY.port)
            else:
                sock.connect(sys_net_Host(host),port)
            # /usr/local/lib/haxe/std/haxe/Http.hx:559
            sock.write(b_b1.getvalue())
            # /usr/local/lib/haxe/std/haxe/Http.hx:560
            if multipart:
                # /usr/local/lib/haxe/std/haxe/Http.hx:561
                bufsize = 4096
                # /usr/local/lib/haxe/std/haxe/Http.hx:562
                buf = haxe_io_Bytes.alloc(bufsize)
                # /usr/local/lib/haxe/std/haxe/Http.hx:563
                while (self.file.size > 0):
                    # /usr/local/lib/haxe/std/haxe/Http.hx:564
                    size = (bufsize if ((self.file.size > bufsize)) else self.file.size)
                    # /usr/local/lib/haxe/std/haxe/Http.hx:565
                    _hx_len = 0
                    # /usr/local/lib/haxe/std/haxe/Http.hx:566
                    try:
                        _hx_len = self.file.io.readBytes(buf,0,size)
                    except Exception as _hx_e:
                        _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                        if isinstance(_hx_e1, haxe_io_Eof):
                            e4 = _hx_e1
                            break
                        else:
                            raise _hx_e
                    # /usr/local/lib/haxe/std/haxe/Http.hx:569
                    sock.output.writeFullBytes(buf,0,_hx_len)
                    # /usr/local/lib/haxe/std/haxe/Http.hx:570
                    # /usr/local/lib/haxe/std/haxe/Http.hx:570
                    _hx_local_3 = self.file
                    _hx_local_4 = _hx_local_3.size
                    _hx_local_3.size = (_hx_local_4 - _hx_len)
                    _hx_local_3.size
                # /usr/local/lib/haxe/std/haxe/Http.hx:572
                sock.write("\r\n")
                # /usr/local/lib/haxe/std/haxe/Http.hx:573
                sock.write("--")
                # /usr/local/lib/haxe/std/haxe/Http.hx:574
                sock.write(boundary)
                # /usr/local/lib/haxe/std/haxe/Http.hx:575
                sock.write("--")
            # /usr/local/lib/haxe/std/haxe/Http.hx:577
            self.readHttpResponse(api,sock)
            # /usr/local/lib/haxe/std/haxe/Http.hx:578
            sock.close()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e5 = _hx_e1
            # /usr/local/lib/haxe/std/haxe/Http.hx:580
            try:
                sock.close()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            # /usr/local/lib/haxe/std/haxe/Http.hx:581
            self.onError(Std.string(e5))

    def readHttpResponse(self,api,sock):
        # /usr/local/lib/haxe/std/haxe/Http.hx:587
        b = haxe_io_BytesBuffer()
        # /usr/local/lib/haxe/std/haxe/Http.hx:588
        k = 4
        # /usr/local/lib/haxe/std/haxe/Http.hx:589
        s = haxe_io_Bytes.alloc(4)
        # /usr/local/lib/haxe/std/haxe/Http.hx:590
        sock.setTimeout(self.cnxTimeout)
        # /usr/local/lib/haxe/std/haxe/Http.hx:591
        while True:
            # /usr/local/lib/haxe/std/haxe/Http.hx:592
            p = sock.input.readBytes(s,0,k)
            # /usr/local/lib/haxe/std/haxe/Http.hx:593
            while (p != k):
                p = (p + sock.input.readBytes(s,p,(k - p)))
            # /usr/local/lib/haxe/std/haxe/Http.hx:595
            # /usr/local/lib/haxe/std/haxe/Http.hx:595
            if ((k < 0) or ((k > s.length))):
                raise _HxException(haxe_io_Error.OutsideBounds)
            b1 = b.b
            b2 = s.b
            _g1 = 0
            _g = k
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                _this = b.b
                _this.append(b2[i])
            # /usr/local/lib/haxe/std/haxe/Http.hx:596
            k1 = k
            # /usr/local/lib/haxe/std/haxe/Http.hx:597
            if (k1 == 1):
                # /usr/local/lib/haxe/std/haxe/Http.hx:598
                c = s.b[0]
                # /usr/local/lib/haxe/std/haxe/Http.hx:599
                if (c == 10):
                    break
                # /usr/local/lib/haxe/std/haxe/Http.hx:601
                if (c == 13):
                    k = 3
                else:
                    k = 4
            elif (k1 == 2):
                # /usr/local/lib/haxe/std/haxe/Http.hx:606
                c1 = s.b[1]
                # /usr/local/lib/haxe/std/haxe/Http.hx:607
                if (c1 == 10):
                    # /usr/local/lib/haxe/std/haxe/Http.hx:608
                    if (s.b[0] == 13):
                        break
                    # /usr/local/lib/haxe/std/haxe/Http.hx:610
                    k = 4
                elif (c1 == 13):
                    k = 3
                else:
                    k = 4
            elif (k1 == 3):
                # /usr/local/lib/haxe/std/haxe/Http.hx:616
                c2 = s.b[2]
                # /usr/local/lib/haxe/std/haxe/Http.hx:617
                if (c2 == 10):
                    if (s.b[1] != 13):
                        k = 4
                    elif (s.b[0] != 10):
                        k = 2
                    else:
                        break
                elif (c2 == 13):
                    if ((s.b[1] != 10) or ((s.b[0] != 13))):
                        k = 1
                    else:
                        k = 3
                else:
                    k = 4
            elif (k1 == 4):
                # /usr/local/lib/haxe/std/haxe/Http.hx:632
                c3 = s.b[3]
                # /usr/local/lib/haxe/std/haxe/Http.hx:633
                if (c3 == 10):
                    if (s.b[2] != 13):
                        continue
                    elif ((s.b[1] != 10) or ((s.b[0] != 13))):
                        k = 2
                    else:
                        break
                elif (c3 == 13):
                    if ((s.b[2] != 10) or ((s.b[1] != 13))):
                        k = 3
                    else:
                        k = 1
            else:
                pass
        # /usr/local/lib/haxe/std/haxe/Http.hx:651
        _this1 = b.getBytes().toString()
        headers = _this1.split("\r\n")
        # /usr/local/lib/haxe/std/haxe/Http.hx:653
        response = (None if ((len(headers) == 0)) else headers.pop(0))
        # /usr/local/lib/haxe/std/haxe/Http.hx:654
        rp = response.split(" ")
        # /usr/local/lib/haxe/std/haxe/Http.hx:655
        status = Std.parseInt((rp[1] if 1 < len(rp) else None))
        # /usr/local/lib/haxe/std/haxe/Http.hx:656
        if ((status == 0) or ((status is None))):
            raise _HxException("Response status error")
        # /usr/local/lib/haxe/std/haxe/Http.hx:660
        if (len(headers) != 0):
            headers.pop()
        # /usr/local/lib/haxe/std/haxe/Http.hx:661
        if (len(headers) != 0):
            headers.pop()
        # /usr/local/lib/haxe/std/haxe/Http.hx:662
        self.responseHeaders = haxe_ds_StringMap()
        # /usr/local/lib/haxe/std/haxe/Http.hx:663
        size = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:664
        chunked = False
        # /usr/local/lib/haxe/std/haxe/Http.hx:665
        # /usr/local/lib/haxe/std/haxe/Http.hx:665
        _g2 = 0
        while (_g2 < len(headers)):
            hline = (headers[_g2] if _g2 >= 0 and _g2 < len(headers) else None)
            _g2 = (_g2 + 1)
            # /usr/local/lib/haxe/std/haxe/Http.hx:666
            a = hline.split(": ")
            # /usr/local/lib/haxe/std/haxe/Http.hx:667
            hname = (None if ((len(a) == 0)) else a.pop(0))
            # /usr/local/lib/haxe/std/haxe/Http.hx:668
            hval = ((a[0] if 0 < len(a) else None) if ((len(a) == 1)) else ": ".join([python_Boot.toString1(x1,'') for x1 in a]))
            # /usr/local/lib/haxe/std/haxe/Http.hx:669
            hval = StringTools.ltrim(StringTools.rtrim(hval))
            # /usr/local/lib/haxe/std/haxe/Http.hx:670
            self.responseHeaders.h[hname] = hval
            # /usr/local/lib/haxe/std/haxe/Http.hx:671
            # /usr/local/lib/haxe/std/haxe/Http.hx:671
            _g11 = hname.lower()
            _g12 = _g11
            _hx_local_2 = len(_g12)
            # /usr/local/lib/haxe/std/haxe/Http.hx:676
            if (_hx_local_2 == 17):
                if (_g12 == "transfer-encoding"):
                    chunked = (hval.lower() == "chunked")
            elif (_hx_local_2 == 14):
                if (_g12 == "content-length"):
                    size = Std.parseInt(hval)
            else:
                pass
        # /usr/local/lib/haxe/std/haxe/Http.hx:680
        self.onStatus(status)
        # /usr/local/lib/haxe/std/haxe/Http.hx:682
        chunk_re = EReg("^([0-9A-Fa-f]+)[ ]*\r\n","m")
        # /usr/local/lib/haxe/std/haxe/Http.hx:683
        self.chunk_size = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:684
        self.chunk_buf = None
        # /usr/local/lib/haxe/std/haxe/Http.hx:686
        bufsize = 1024
        # /usr/local/lib/haxe/std/haxe/Http.hx:687
        buf = haxe_io_Bytes.alloc(bufsize)
        # /usr/local/lib/haxe/std/haxe/Http.hx:688
        if chunked:
            try:
                while True:
                    # /usr/local/lib/haxe/std/haxe/Http.hx:691
                    _hx_len = sock.input.readBytes(buf,0,bufsize)
                    # /usr/local/lib/haxe/std/haxe/Http.hx:692
                    if (not self.readChunk(chunk_re,api,buf,_hx_len)):
                        break
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, haxe_io_Eof):
                    e = _hx_e1
                    raise _HxException("Transfer aborted")
                else:
                    raise _hx_e
        elif (size is None):
            # /usr/local/lib/haxe/std/haxe/Http.hx:699
            if (not self.noShutdown):
                sock.shutdown(False,True)
            # /usr/local/lib/haxe/std/haxe/Http.hx:701
            try:
                while True:
                    # /usr/local/lib/haxe/std/haxe/Http.hx:703
                    len1 = sock.input.readBytes(buf,0,bufsize)
                    # /usr/local/lib/haxe/std/haxe/Http.hx:704
                    api.writeBytes(buf,0,len1)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, haxe_io_Eof):
                        pass
                else:
                    raise _hx_e
        else:
            # /usr/local/lib/haxe/std/haxe/Http.hx:709
            api.prepare(size)
            # /usr/local/lib/haxe/std/haxe/Http.hx:710
            try:
                while (size > 0):
                    # /usr/local/lib/haxe/std/haxe/Http.hx:712
                    len2 = sock.input.readBytes(buf,0,(bufsize if ((size > bufsize)) else size))
                    # /usr/local/lib/haxe/std/haxe/Http.hx:713
                    api.writeBytes(buf,0,len2)
                    # /usr/local/lib/haxe/std/haxe/Http.hx:714
                    size = (size - len2)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, haxe_io_Eof):
                    e2 = _hx_e1
                    raise _HxException("Transfer aborted")
                else:
                    raise _hx_e
        # /usr/local/lib/haxe/std/haxe/Http.hx:720
        if (chunked and (((self.chunk_size is not None) or ((self.chunk_buf is not None))))):
            raise _HxException("Invalid chunk")
        # /usr/local/lib/haxe/std/haxe/Http.hx:722
        if ((status < 200) or ((status >= 400))):
            raise _HxException(("Http Error #" + Std.string(status)))
        # /usr/local/lib/haxe/std/haxe/Http.hx:724
        api.close()

    def readChunk(self,chunk_re,api,buf,_hx_len):
        # /usr/local/lib/haxe/std/haxe/Http.hx:728
        if (self.chunk_size is None):
            # /usr/local/lib/haxe/std/haxe/Http.hx:729
            if (self.chunk_buf is not None):
                # /usr/local/lib/haxe/std/haxe/Http.hx:730
                b = haxe_io_BytesBuffer()
                # /usr/local/lib/haxe/std/haxe/Http.hx:731
                # /usr/local/lib/haxe/std/haxe/Http.hx:731
                src = self.chunk_buf
                b1 = b.b
                b2 = src.b
                _g1 = 0
                _g = src.length
                while (_g1 < _g):
                    i = _g1
                    _g1 = (_g1 + 1)
                    _this = b.b
                    _this.append(b2[i])
                # /usr/local/lib/haxe/std/haxe/Http.hx:732
                # /usr/local/lib/haxe/std/haxe/Http.hx:732
                if ((_hx_len < 0) or ((_hx_len > buf.length))):
                    raise _HxException(haxe_io_Error.OutsideBounds)
                b11 = b.b
                b21 = buf.b
                _g11 = 0
                _g2 = _hx_len
                while (_g11 < _g2):
                    i1 = _g11
                    _g11 = (_g11 + 1)
                    _this1 = b.b
                    _this1.append(b21[i1])
                # /usr/local/lib/haxe/std/haxe/Http.hx:733
                buf = b.getBytes()
                # /usr/local/lib/haxe/std/haxe/Http.hx:734
                _hx_len = (_hx_len + self.chunk_buf.length)
                # /usr/local/lib/haxe/std/haxe/Http.hx:735
                self.chunk_buf = None
            # /usr/local/lib/haxe/std/haxe/Http.hx:740
            s = buf.toString()
            chunk_re.matchObj = python_lib_Re.search(chunk_re.pattern,s)
            if (chunk_re.matchObj is not None):
                # /usr/local/lib/haxe/std/haxe/Http.hx:742
                p_len = None
                # /usr/local/lib/haxe/std/haxe/Http.hx:727
                p_pos = chunk_re.matchObj.start()
                # /usr/local/lib/haxe/std/haxe/Http.hx:742
                p_len = (chunk_re.matchObj.end() - chunk_re.matchObj.start())
                # /usr/local/lib/haxe/std/haxe/Http.hx:743
                if (p_len <= _hx_len):
                    # /usr/local/lib/haxe/std/haxe/Http.hx:744
                    cstr = chunk_re.matchObj.group(1)
                    # /usr/local/lib/haxe/std/haxe/Http.hx:745
                    self.chunk_size = Std.parseInt(("0x" + ("null" if cstr is None else cstr)))
                    # /usr/local/lib/haxe/std/haxe/Http.hx:746
                    if (cstr == "0"):
                        # /usr/local/lib/haxe/std/haxe/Http.hx:747
                        self.chunk_size = None
                        # /usr/local/lib/haxe/std/haxe/Http.hx:748
                        self.chunk_buf = None
                        # /usr/local/lib/haxe/std/haxe/Http.hx:749
                        return False
                    # /usr/local/lib/haxe/std/haxe/Http.hx:751
                    _hx_len = (_hx_len - p_len)
                    # /usr/local/lib/haxe/std/haxe/Http.hx:752
                    return self.readChunk(chunk_re,api,buf.sub(p_len,_hx_len),_hx_len)
            # /usr/local/lib/haxe/std/haxe/Http.hx:756
            if (_hx_len > 10):
                # /usr/local/lib/haxe/std/haxe/Http.hx:757
                self.onError("Invalid chunk")
                # /usr/local/lib/haxe/std/haxe/Http.hx:758
                return False
            # /usr/local/lib/haxe/std/haxe/Http.hx:760
            self.chunk_buf = buf.sub(0,_hx_len)
            # /usr/local/lib/haxe/std/haxe/Http.hx:761
            return True
        # /usr/local/lib/haxe/std/haxe/Http.hx:763
        if (self.chunk_size > _hx_len):
            # /usr/local/lib/haxe/std/haxe/Http.hx:764
            # /usr/local/lib/haxe/std/haxe/Http.hx:764
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.chunk_size
            _hx_local_2.chunk_size = (_hx_local_3 - _hx_len)
            _hx_local_2.chunk_size
            # /usr/local/lib/haxe/std/haxe/Http.hx:765
            api.writeBytes(buf,0,_hx_len)
            # /usr/local/lib/haxe/std/haxe/Http.hx:766
            return True
        # /usr/local/lib/haxe/std/haxe/Http.hx:768
        end = (self.chunk_size + 2)
        # /usr/local/lib/haxe/std/haxe/Http.hx:769
        if (_hx_len >= end):
            # /usr/local/lib/haxe/std/haxe/Http.hx:770
            if (self.chunk_size > 0):
                api.writeBytes(buf,0,self.chunk_size)
            # /usr/local/lib/haxe/std/haxe/Http.hx:772
            _hx_len = (_hx_len - end)
            # /usr/local/lib/haxe/std/haxe/Http.hx:773
            self.chunk_size = None
            # /usr/local/lib/haxe/std/haxe/Http.hx:774
            if (_hx_len == 0):
                return True
            # /usr/local/lib/haxe/std/haxe/Http.hx:776
            return self.readChunk(chunk_re,api,buf.sub(end,_hx_len),_hx_len)
        # /usr/local/lib/haxe/std/haxe/Http.hx:778
        if (self.chunk_size > 0):
            api.writeBytes(buf,0,self.chunk_size)
        # /usr/local/lib/haxe/std/haxe/Http.hx:780
        # /usr/local/lib/haxe/std/haxe/Http.hx:780
        _hx_local_5 = self
        _hx_local_6 = _hx_local_5.chunk_size
        _hx_local_5.chunk_size = (_hx_local_6 - _hx_len)
        _hx_local_5.chunk_size
        # /usr/local/lib/haxe/std/haxe/Http.hx:781
        return True

    def onData(self,data):
        pass

    def onError(self,msg):
        pass

    def onStatus(self,status):
        pass



class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]

    def __init__(self):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/StringMap.hx:32
        self.h = dict()



class haxe_io_Bytes:
    _hx_class_name = "haxe.io.Bytes"
    __slots__ = ("length", "b")
    _hx_fields = ["length", "b"]
    _hx_methods = ["sub", "getString", "toString"]
    _hx_statics = ["alloc", "ofString"]

    def __init__(self,length,b):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:34
        self.length = length
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:35
        self.b = b

    def sub(self,pos,_hx_len):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:135
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > self.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:155
        return haxe_io_Bytes(_hx_len,self.b[pos:(pos + _hx_len)])

    def getString(self,pos,_hx_len):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:362
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > self.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:382
        return self.b[pos:pos+_hx_len].decode('UTF-8','replace')

    def toString(self):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:440
        return self.getString(0,self.length)

    @staticmethod
    def alloc(length):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:480
        return haxe_io_Bytes(length,bytearray(length))

    @staticmethod
    def ofString(s):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:516
        b = bytearray(s,"UTF-8")
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:517
        return haxe_io_Bytes(len(b),b)



class haxe_io_BytesBuffer:
    _hx_class_name = "haxe.io.BytesBuffer"
    __slots__ = ("b",)
    _hx_fields = ["b"]
    _hx_methods = ["getBytes"]

    def __init__(self):
        # /usr/local/lib/haxe/std/haxe/io/BytesBuffer.hx:60
        self.b = list()

    def getBytes(self):
        # /usr/local/lib/haxe/std/haxe/io/BytesBuffer.hx:207
        buf = bytearray(self.b)
        # /usr/local/lib/haxe/std/haxe/io/BytesBuffer.hx:208
        _hx_bytes = haxe_io_Bytes(len(buf),buf)
        # /usr/local/lib/haxe/std/haxe/io/BytesBuffer.hx:214
        self.b = None
        # /usr/local/lib/haxe/std/haxe/io/BytesBuffer.hx:215
        return _hx_bytes



class haxe_io_Input:
    _hx_class_name = "haxe.io.Input"
    __slots__ = ()
    _hx_methods = ["readByte", "readBytes"]

    def readByte(self):
        # /usr/local/lib/haxe/std/haxe/io/Input.hx:53
        raise _HxException("Not implemented")

    def readBytes(self,s,pos,_hx_len):
        # /usr/local/lib/haxe/std/haxe/io/Input.hx:65
        k = _hx_len
        # /usr/local/lib/haxe/std/haxe/io/Input.hx:66
        b = s.b
        # /usr/local/lib/haxe/std/haxe/io/Input.hx:67
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > s.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        # /usr/local/lib/haxe/std/haxe/io/Input.hx:69
        try:
            while (k > 0):
                # /usr/local/lib/haxe/std/haxe/io/Input.hx:78
                b[pos] = self.readByte()
                # /usr/local/lib/haxe/std/haxe/io/Input.hx:80
                pos = (pos + 1)
                # /usr/local/lib/haxe/std/haxe/io/Input.hx:81
                k = (k - 1)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            if isinstance(_hx_e1, haxe_io_Eof):
                    pass
            else:
                raise _hx_e
        # /usr/local/lib/haxe/std/haxe/io/Input.hx:84
        return (_hx_len - k)



class haxe_io_Output:
    _hx_class_name = "haxe.io.Output"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["writeByte", "writeBytes", "close", "set_bigEndian", "writeFullBytes", "prepare", "writeString"]

    def writeByte(self,c):
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:47
        raise _HxException("Not implemented")

    def writeBytes(self,s,pos,_hx_len):
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:59
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > s.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:62
        b = s.b
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:63
        k = _hx_len
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:64
        while (k > 0):
            # /usr/local/lib/haxe/std/haxe/io/Output.hx:74
            self.writeByte(b[pos])
            # /usr/local/lib/haxe/std/haxe/io/Output.hx:76
            pos = (pos + 1)
            # /usr/local/lib/haxe/std/haxe/io/Output.hx:77
            k = (k - 1)
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:79
        return _hx_len

    def close(self):
        pass

    def set_bigEndian(self,b):
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:97
        self.bigEndian = b
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:98
        return b

    def writeFullBytes(self,s,pos,_hx_len):
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:123
        while (_hx_len > 0):
            # /usr/local/lib/haxe/std/haxe/io/Output.hx:124
            k = self.writeBytes(s,pos,_hx_len)
            # /usr/local/lib/haxe/std/haxe/io/Output.hx:125
            pos = (pos + k)
            # /usr/local/lib/haxe/std/haxe/io/Output.hx:126
            _hx_len = (_hx_len - k)

    def prepare(self,nbytes):
        pass

    def writeString(self,s):
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:282
        b = haxe_io_Bytes.ofString(s)
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:284
        self.writeFullBytes(b,0,b.length)



class haxe_io_BytesOutput(haxe_io_Output):
    _hx_class_name = "haxe.io.BytesOutput"
    __slots__ = ("b",)
    _hx_fields = ["b"]
    _hx_methods = ["writeByte", "writeBytes", "getBytes"]
    _hx_statics = []
    _hx_super = haxe_io_Output


    def __init__(self):
        # /usr/local/lib/haxe/std/haxe/io/BytesOutput.hx:40
        self.b = haxe_io_BytesBuffer()
        # /usr/local/lib/haxe/std/haxe/io/BytesOutput.hx:43
        self.set_bigEndian(False)

    def writeByte(self,c):
        # /usr/local/lib/haxe/std/haxe/io/BytesOutput.hx:55
        _this = self.b.b
        _this.append(c)

    def writeBytes(self,buf,pos,_hx_len):
        # /usr/local/lib/haxe/std/haxe/io/BytesOutput.hx:64
        # /usr/local/lib/haxe/std/haxe/io/BytesOutput.hx:64
        _this = self.b
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > buf.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        b1 = _this.b
        b2 = buf.b
        _g1 = pos
        _g = (pos + _hx_len)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            _this1 = _this.b
            _this1.append(b2[i])
        # /usr/local/lib/haxe/std/haxe/io/BytesOutput.hx:66
        return _hx_len

    def getBytes(self):
        # /usr/local/lib/haxe/std/haxe/io/BytesOutput.hx:137
        return self.b.getBytes()



class haxe_io_Eof:
    _hx_class_name = "haxe.io.Eof"
    __slots__ = ()
    _hx_methods = ["toString"]

    def __init__(self):
        pass

    def toString(self):
        # /usr/local/lib/haxe/std/haxe/io/Eof.hx:31
        return "Eof"


class haxe_io_Error(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Error"

    @staticmethod
    def Custom(e):
        return haxe_io_Error("Custom", 3, [e])
haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, list())
haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, list())
haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, list())


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        # /usr/local/lib/haxe/std/python/Boot.hx:94
        if (o is None):
            return "null"
        # /usr/local/lib/haxe/std/python/Boot.hx:96
        if isinstance(o,str):
            return o
        # /usr/local/lib/haxe/std/python/Boot.hx:98
        if (s is None):
            s = ""
        # /usr/local/lib/haxe/std/python/Boot.hx:99
        if (len(s) >= 5):
            return "<...>"
        # /usr/local/lib/haxe/std/python/Boot.hx:101
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        # /usr/local/lib/haxe/std/python/Boot.hx:104
        if isinstance(o,int):
            return str(o)
        # /usr/local/lib/haxe/std/python/Boot.hx:108
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        # /usr/local/lib/haxe/std/python/Boot.hx:120
        if isinstance(o,list):
            # /usr/local/lib/haxe/std/python/Boot.hx:122
            o1 = o
            # /usr/local/lib/haxe/std/python/Boot.hx:124
            l = len(o1)
            # /usr/local/lib/haxe/std/python/Boot.hx:126
            st = "["
            # /usr/local/lib/haxe/std/python/Boot.hx:127
            s = (("null" if s is None else s) + "\t")
            # /usr/local/lib/haxe/std/python/Boot.hx:128
            # /usr/local/lib/haxe/std/python/Boot.hx:128
            _g1 = 0
            _g = l
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                # /usr/local/lib/haxe/std/python/Boot.hx:129
                prefix = ""
                # /usr/local/lib/haxe/std/python/Boot.hx:130
                if (i > 0):
                    prefix = ","
                # /usr/local/lib/haxe/std/python/Boot.hx:133
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            # /usr/local/lib/haxe/std/python/Boot.hx:135
            st = (("null" if st is None else st) + "]")
            # /usr/local/lib/haxe/std/python/Boot.hx:136
            return st
        # /usr/local/lib/haxe/std/python/Boot.hx:139
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        # /usr/local/lib/haxe/std/python/Boot.hx:145
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        # /usr/local/lib/haxe/std/python/Boot.hx:147
        if hasattr(o,"__class__"):
            # /usr/local/lib/haxe/std/python/Boot.hx:150
            if isinstance(o,_hx_AnonObject):
                # /usr/local/lib/haxe/std/python/Boot.hx:152
                toStr = None
                # /usr/local/lib/haxe/std/python/Boot.hx:153
                try:
                    # /usr/local/lib/haxe/std/python/Boot.hx:155
                    fields = python_Boot.fields(o)
                    # /usr/local/lib/haxe/std/python/Boot.hx:156
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    # /usr/local/lib/haxe/std/python/Boot.hx:157
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                # /usr/local/lib/haxe/std/python/Boot.hx:163
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            # /usr/local/lib/haxe/std/python/Boot.hx:173
            if isinstance(o,Enum):
                # /usr/local/lib/haxe/std/python/Boot.hx:175
                o2 = o
                # /usr/local/lib/haxe/std/python/Boot.hx:177
                l1 = len(o2.params)
                # /usr/local/lib/haxe/std/python/Boot.hx:178
                hasParams = (l1 > 0)
                # /usr/local/lib/haxe/std/python/Boot.hx:179
                if hasParams:
                    # /usr/local/lib/haxe/std/python/Boot.hx:180
                    paramsStr = ""
                    # /usr/local/lib/haxe/std/python/Boot.hx:181
                    # /usr/local/lib/haxe/std/python/Boot.hx:181
                    _g12 = 0
                    _g3 = l1
                    while (_g12 < _g3):
                        i1 = _g12
                        _g12 = (_g12 + 1)
                        # /usr/local/lib/haxe/std/python/Boot.hx:182
                        prefix1 = ""
                        # /usr/local/lib/haxe/std/python/Boot.hx:183
                        if (i1 > 0):
                            prefix1 = ","
                        # /usr/local/lib/haxe/std/python/Boot.hx:186
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    # /usr/local/lib/haxe/std/python/Boot.hx:188
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            # /usr/local/lib/haxe/std/python/Boot.hx:194
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    # /usr/local/lib/haxe/std/python/Boot.hx:196
                    fields1 = python_Boot.getInstanceFields(o)
                    # /usr/local/lib/haxe/std/python/Boot.hx:197
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    # /usr/local/lib/haxe/std/python/Boot.hx:199
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    # /usr/local/lib/haxe/std/python/Boot.hx:200
                    return toStr1
                else:
                    # /usr/local/lib/haxe/std/python/Boot.hx:202
                    fields2 = python_Boot.getClassFields(o)
                    # /usr/local/lib/haxe/std/python/Boot.hx:203
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    # /usr/local/lib/haxe/std/python/Boot.hx:204
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    # /usr/local/lib/haxe/std/python/Boot.hx:205
                    return toStr2
            # /usr/local/lib/haxe/std/python/Boot.hx:209
            if (o == str):
                return "#String"
            # /usr/local/lib/haxe/std/python/Boot.hx:213
            if (o == list):
                return "#Array"
            # /usr/local/lib/haxe/std/python/Boot.hx:217
            if callable(o):
                return "function"
            # /usr/local/lib/haxe/std/python/Boot.hx:220
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            # /usr/local/lib/haxe/std/python/Boot.hx:226
            if hasattr(o,"__str__"):
                return o.__str__([])
            # /usr/local/lib/haxe/std/python/Boot.hx:230
            if hasattr(o,"__name__"):
                return o.__name__
            # /usr/local/lib/haxe/std/python/Boot.hx:233
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        # /usr/local/lib/haxe/std/python/Boot.hx:245
        a = []
        # /usr/local/lib/haxe/std/python/Boot.hx:246
        if (o is not None):
            # /usr/local/lib/haxe/std/python/Boot.hx:247
            if hasattr(o,"_hx_fields"):
                # /usr/local/lib/haxe/std/python/Boot.hx:248
                fields = o._hx_fields
                # /usr/local/lib/haxe/std/python/Boot.hx:249
                return list(fields)
            # /usr/local/lib/haxe/std/python/Boot.hx:251
            if isinstance(o,_hx_AnonObject):
                # /usr/local/lib/haxe/std/python/Boot.hx:253
                d = o.__dict__
                # /usr/local/lib/haxe/std/python/Boot.hx:254
                keys = d.keys()
                # /usr/local/lib/haxe/std/python/Boot.hx:255
                handler = python_Boot.unhandleKeywords
                # /usr/local/lib/haxe/std/python/Boot.hx:257
                for k in keys:
                # /usr/local/lib/haxe/std/python/Boot.hx:258
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                # /usr/local/lib/haxe/std/python/Boot.hx:262
                d1 = o.__dict__
                # /usr/local/lib/haxe/std/python/Boot.hx:263
                keys1 = d1.keys()
                # /usr/local/lib/haxe/std/python/Boot.hx:264
                for k in keys1:
                # /usr/local/lib/haxe/std/python/Boot.hx:265
                    a.append(k)
        # /usr/local/lib/haxe/std/python/Boot.hx:269
        return a

    @staticmethod
    def simpleField(o,field):
        # /usr/local/lib/haxe/std/python/Boot.hx:281
        if (field is None):
            return None
        # /usr/local/lib/haxe/std/python/Boot.hx:283
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        # /usr/local/lib/haxe/std/python/Boot.hx:284
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        # /usr/local/lib/haxe/std/python/Boot.hx:288
        if (field is None):
            return None
        # /usr/local/lib/haxe/std/python/Boot.hx:290
        field1 = field
        _hx_local_0 = len(field1)
        # /usr/local/lib/haxe/std/python/Boot.hx:295
        if (_hx_local_0 == 10):
            if (field1 == "charCodeAt"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:295
                    s1 = o
                    def _hx_local_1(a11):
                        return HxString.charCodeAt(s1,a11)
                    return _hx_local_1
        elif (_hx_local_0 == 11):
            if (field1 == "lastIndexOf"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:297
                    s3 = o
                    def _hx_local_2(a15):
                        return HxString.lastIndexOf(s3,a15)
                    return _hx_local_2
                elif isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:315
                    a4 = o
                    def _hx_local_3(x4):
                        return python_internal_ArrayImpl.lastIndexOf(a4,x4)
                    return _hx_local_3
            elif (field1 == "toLowerCase"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:292
                    s7 = o
                    def _hx_local_4():
                        return HxString.toLowerCase(s7)
                    return _hx_local_4
            elif (field1 == "toUpperCase"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:293
                    s9 = o
                    def _hx_local_5():
                        return HxString.toUpperCase(s9)
                    return _hx_local_5
        elif (_hx_local_0 == 9):
            if (field1 == "substring"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:300
                    s6 = o
                    def _hx_local_6(a19):
                        return HxString.substring(s6,a19)
                    return _hx_local_6
        elif (_hx_local_0 == 4):
            if (field1 == "copy"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:306
                    def _hx_local_7():
                        # /usr/local/lib/haxe/std/python/Boot.hx:306
                        return list(o)
                    return _hx_local_7
            elif (field1 == "join"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:309
                    def _hx_local_8(sep):
                        # /usr/local/lib/haxe/std/python/Boot.hx:309
                        return sep.join([python_Boot.toString1(x1,'') for x1 in o])
                    return _hx_local_8
            elif (field1 == "push"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:312
                    x7 = o
                    def _hx_local_9(e):
                        return python_internal_ArrayImpl.push(x7,e)
                    return _hx_local_9
            elif (field1 == "sort"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:320
                    x11 = o
                    def _hx_local_10(f2):
                        python_internal_ArrayImpl.sort(x11,f2)
                    return _hx_local_10
        elif (_hx_local_0 == 5):
            if (field1 == "shift"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:318
                    x9 = o
                    def _hx_local_11():
                        return python_internal_ArrayImpl.shift(x9)
                    return _hx_local_11
            elif (field1 == "slice"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:319
                    x10 = o
                    def _hx_local_12(a16):
                        return python_internal_ArrayImpl.slice(x10,a16)
                    return _hx_local_12
            elif (field1 == "split"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:298
                    s4 = o
                    def _hx_local_13(d):
                        return HxString.split(s4,d)
                    return _hx_local_13
        elif (_hx_local_0 == 7):
            if (field1 == "indexOf"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:296
                    s2 = o
                    def _hx_local_14(a13):
                        return HxString.indexOf(s2,a13)
                    return _hx_local_14
                elif isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:314
                    a = o
                    def _hx_local_15(x1):
                        return python_internal_ArrayImpl.indexOf(a,x1)
                    return _hx_local_15
            elif (field1 == "reverse"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:317
                    a5 = o
                    def _hx_local_16():
                        python_internal_ArrayImpl.reverse(a5)
                    return _hx_local_16
            elif (field1 == "unshift"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:313
                    x14 = o
                    def _hx_local_17(e2):
                        python_internal_ArrayImpl.unshift(x14,e2)
                    return _hx_local_17
        elif (_hx_local_0 == 3):
            if (field1 == "map"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:303
                    x5 = o
                    def _hx_local_18(f1):
                        return python_internal_ArrayImpl.map(x5,f1)
                    return _hx_local_18
            elif (field1 == "pop"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:311
                    x6 = o
                    def _hx_local_19():
                        return python_internal_ArrayImpl.pop(x6)
                    return _hx_local_19
        elif (_hx_local_0 == 8):
            if (field1 == "iterator"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:307
                    x3 = o
                    def _hx_local_20():
                        return python_internal_ArrayImpl.iterator(x3)
                    return _hx_local_20
            elif (field1 == "toString"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:301
                    s8 = o
                    def _hx_local_21():
                        return HxString.toString(s8)
                    return _hx_local_21
                elif isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:310
                    x13 = o
                    def _hx_local_22():
                        return python_internal_ArrayImpl.toString(x13)
                    return _hx_local_22
        elif (_hx_local_0 == 6):
            if (field1 == "charAt"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:294
                    s = o
                    def _hx_local_23(a1):
                        return HxString.charAt(s,a1)
                    return _hx_local_23
            elif (field1 == "concat"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:305
                    a12 = o
                    def _hx_local_24(a2):
                        return python_internal_ArrayImpl.concat(a12,a2)
                    return _hx_local_24
            elif (field1 == "filter"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:304
                    x = o
                    def _hx_local_25(f):
                        return python_internal_ArrayImpl.filter(x,f)
                    return _hx_local_25
            elif (field1 == "insert"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:308
                    a3 = o
                    def _hx_local_26(a14,x2):
                        python_internal_ArrayImpl.insert(a3,a14,x2)
                    return _hx_local_26
            elif (field1 == "length"):
                if isinstance(o,str):
                    return len(o)
                elif isinstance(o,list):
                    return len(o)
            elif (field1 == "remove"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:316
                    x8 = o
                    def _hx_local_27(e1):
                        return python_internal_ArrayImpl.remove(x8,e1)
                    return _hx_local_27
            elif (field1 == "splice"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:321
                    x12 = o
                    def _hx_local_28(a17,a21):
                        return python_internal_ArrayImpl.splice(x12,a17,a21)
                    return _hx_local_28
            elif (field1 == "substr"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:299
                    s5 = o
                    def _hx_local_29(a18):
                        return HxString.substr(s5,a18)
                    return _hx_local_29
        else:
            pass
        # /usr/local/lib/haxe/std/python/Boot.hx:325
        field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        # /usr/local/lib/haxe/std/python/Boot.hx:326
        if hasattr(o,field2):
            return getattr(o,field2)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        # /usr/local/lib/haxe/std/python/Boot.hx:331
        f = (c._hx_fields if (hasattr(c,"_hx_fields")) else [])
        # /usr/local/lib/haxe/std/python/Boot.hx:332
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        # /usr/local/lib/haxe/std/python/Boot.hx:335
        sc = python_Boot.getSuperClass(c)
        # /usr/local/lib/haxe/std/python/Boot.hx:337
        if (sc is None):
            return f
        else:
            # /usr/local/lib/haxe/std/python/Boot.hx:341
            scArr = python_Boot.getInstanceFields(sc)
            # /usr/local/lib/haxe/std/python/Boot.hx:342
            scMap = set(scArr)
            # /usr/local/lib/haxe/std/python/Boot.hx:345
            # /usr/local/lib/haxe/std/python/Boot.hx:345
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                # /usr/local/lib/haxe/std/python/Boot.hx:346
                if (not (f1 in scMap)):
                    scArr.append(f1)
            # /usr/local/lib/haxe/std/python/Boot.hx:351
            return scArr

    @staticmethod
    def getSuperClass(c):
        # /usr/local/lib/haxe/std/python/Boot.hx:356
        if (c is None):
            return None
        # /usr/local/lib/haxe/std/python/Boot.hx:359
        try:
            # /usr/local/lib/haxe/std/python/Boot.hx:360
            if hasattr(c,"_hx_super"):
                return c._hx_super
            # /usr/local/lib/haxe/std/python/Boot.hx:363
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        # /usr/local/lib/haxe/std/python/Boot.hx:367
        return None

    @staticmethod
    def getClassFields(c):
        # /usr/local/lib/haxe/std/python/Boot.hx:372
        if hasattr(c,"_hx_statics"):
            # /usr/local/lib/haxe/std/python/Boot.hx:373
            x = c._hx_statics
            # /usr/local/lib/haxe/std/python/Boot.hx:374
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        # /usr/local/lib/haxe/std/python/Boot.hx:398
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            # /usr/local/lib/haxe/std/python/Boot.hx:399
            real = HxString.substr(name,python_Boot.prefixLength,None)
            # /usr/local/lib/haxe/std/python/Boot.hx:400
            if (real in python_Boot.keywords):
                return real
        # /usr/local/lib/haxe/std/python/Boot.hx:402
        return name


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:31
        self.checked = False
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:30
        self.has = False
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:29
        self.x = None
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:34
        self.it = it

    def next(self):
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:38
        if (not self.checked):
            self.hasNext()
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:39
        self.checked = False
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:40
        return self.x

    def hasNext(self):
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:44
        if (not self.checked):
            # /usr/local/lib/haxe/std/python/HaxeIterator.hx:45
            try:
                # /usr/local/lib/haxe/std/python/HaxeIterator.hx:46
                self.x = self.it.__next__()
                # /usr/local/lib/haxe/std/python/HaxeIterator.hx:47
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    # /usr/local/lib/haxe/std/python/HaxeIterator.hx:49
                    self.has = False
                    # /usr/local/lib/haxe/std/python/HaxeIterator.hx:50
                    self.x = None
                else:
                    raise _hx_e
            # /usr/local/lib/haxe/std/python/HaxeIterator.hx:52
            self.checked = True
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:54
        return self.has



class python__KwArgs_KwArgs_Impl_:
    _hx_class_name = "python._KwArgs.KwArgs_Impl_"
    __slots__ = ()
    _hx_statics = ["fromT"]

    @staticmethod
    def fromT(d):
        # /usr/local/lib/haxe/std/python/KwArgs.hx:57
        this1 = python_Lib.anonAsDict(d)
        return this1


class python_Lib:
    _hx_class_name = "python.Lib"
    __slots__ = ()
    _hx_statics = ["print", "dictToAnon", "anonToDict", "anonAsDict", "dictAsAnon"]

    @staticmethod
    def print(v):
        # /usr/local/lib/haxe/std/python/Lib.hx:40
        _hx_str = Std.string(v)
        # /usr/local/lib/haxe/std/python/Lib.hx:42
        python_lib_Sys.stdout.buffer.write(_hx_str.encode("utf-8", "strict"))
        # /usr/local/lib/haxe/std/python/Lib.hx:43
        python_lib_Sys.stdout.flush()

    @staticmethod
    def dictToAnon(v):
        # /usr/local/lib/haxe/std/python/Lib.hx:60
        return _hx_AnonObject(v.copy())

    @staticmethod
    def anonToDict(o):
        # /usr/local/lib/haxe/std/python/Lib.hx:69
        if isinstance(o,_hx_AnonObject):
            return o.__dict__.copy()
        else:
            return None

    @staticmethod
    def anonAsDict(o):
        # /usr/local/lib/haxe/std/python/Lib.hx:83
        if isinstance(o,_hx_AnonObject):
            return o.__dict__
        else:
            return None

    @staticmethod
    def dictAsAnon(d):
        # /usr/local/lib/haxe/std/python/Lib.hx:95
        return _hx_AnonObject(d)


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "iterator", "indexOf", "lastIndexOf", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get"]

    @staticmethod
    def concat(a1,a2):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:35
        return (a1 + a2)

    @staticmethod
    def iterator(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:45
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:50
        _hx_len = len(a)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:51
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:55
        if (l < 0):
            l = 0
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:56
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:56
        _g1 = l
        _g = _hx_len
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:57
            if (a[i] == x):
                return i
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:59
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:64
        _hx_len = len(a)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:65
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:69
        if (l > _hx_len):
            l = _hx_len
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:70
        while True:
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:70
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:71
            if (a[l] == x):
                return l
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:73
        return -1

    @staticmethod
    def toString(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:84
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:89
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:94
        x.append(e)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:95
        return len(x)

    @staticmethod
    def unshift(x,e):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:100
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:105
        try:
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:106
            x.remove(e)
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:107
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:115
        if (len(x) == 0):
            return None
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:116
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:121
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:125
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:130
        if (pos < 0):
            pos = (len(x) + pos)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:131
        if (pos < 0):
            pos = 0
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:132
        res = x[pos:(pos + _hx_len)]
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:133
        del x[pos:(pos + _hx_len)]
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:134
        return res

    @staticmethod
    def map(x,f):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:139
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:144
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:149
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:153
        a.reverse()

    @staticmethod
    def _get(x,idx):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:158
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = Exception


    def __init__(self,val):
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:28
        self.val = None
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:31
        message = str(val)
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:32
        super().__init__(message)
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:33
        self.val = val



class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["iterator", "eq", "stringOrNull", "mapKwArgs"]

    @staticmethod
    def iterator(x):
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:39
        if isinstance(x,list):
            return python_HaxeIterator(x.__iter__())
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:42
        return x.iterator()

    @staticmethod
    def eq(a,b):
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:46
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:49
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:53
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def mapKwArgs(a,v):
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:156
        a1 = python_Lib.dictAsAnon(python_Lib.anonToDict(a))
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:157
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:157
        k = python_HaxeIterator(iter(v.keys()))
        while k.hasNext():
            k1 = k.next()
            # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:158
            val = v.get(k1)
            # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:159
            if hasattr(a1,k1):
                # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:160
                x = getattr(a1,k1)
                # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:161
                setattr(a1,val,x)
                # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:162
                delattr(a1,k1)
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:165
        return a1


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:31
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:37
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:43
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:48
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:52
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:53
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:54
            check = s.find(_hx_str, startLeft, len(s))
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:55
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:66
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:70
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:74
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:81
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:97
        if (startIndex < 0):
            startIndex = 0
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:98
        if (endIndex is None):
            return s[startIndex:]
        else:
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:101
            if (endIndex < 0):
                endIndex = 0
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:102
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:113
        if (_hx_len is None):
            return s[startIndex:]
        else:
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:116
            if (_hx_len == 0):
                return ""
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:117
            return s[startIndex:(startIndex + _hx_len)]


class sys_net_Host:
    _hx_class_name = "sys.net.Host"
    __slots__ = ("host", "name")
    _hx_fields = ["host", "name"]
    _hx_methods = ["toString"]

    def __init__(self,name):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Host.hx:31
        self.host = name
        # /usr/local/lib/haxe/std/python/_std/sys/net/Host.hx:32
        self.name = name

    def toString(self):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Host.hx:36
        return self.name



class sys_net__Socket_SocketInput(haxe_io_Input):
    _hx_class_name = "sys.net._Socket.SocketInput"
    __slots__ = ("_hx___s",)
    _hx_fields = ["__s"]
    _hx_methods = ["readByte", "readBytes"]
    _hx_statics = []
    _hx_super = haxe_io_Input


    def __init__(self,s):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:39
        self._hx___s = s

    def readByte(self):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:43
        r = None
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:44
        try:
            r = self._hx___s.recv(1,0)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            if isinstance(_hx_e1, BlockingIOError):
                e = _hx_e1
                raise _HxException(haxe_io_Error.Blocked)
            else:
                raise _hx_e
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:49
        if (len(r) == 0):
            raise _HxException(haxe_io_Eof())
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:51
        return r[0]

    def readBytes(self,buf,pos,_hx_len):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:55
        r = None
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:56
        data = buf.b
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:57
        try:
            # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:58
            r = self._hx___s.recv(_hx_len,0)
            # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:59
            # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:59
            _g1 = pos
            _g = (pos + len(r))
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:60
                data.__setitem__(i,r[(i - pos)])
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            if isinstance(_hx_e1, BlockingIOError):
                e = _hx_e1
                raise _HxException(haxe_io_Error.Blocked)
            else:
                raise _hx_e
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:65
        if (len(r) == 0):
            raise _HxException(haxe_io_Eof())
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:67
        return len(r)



class sys_net__Socket_SocketOutput(haxe_io_Output):
    _hx_class_name = "sys.net._Socket.SocketOutput"
    __slots__ = ("_hx___s",)
    _hx_fields = ["__s"]
    _hx_methods = ["writeByte", "writeBytes", "close"]
    _hx_statics = []
    _hx_super = haxe_io_Output


    def __init__(self,s):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:82
        self._hx___s = s

    def writeByte(self,c):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:86
        try:
            self._hx___s.send(bytes([c]),0)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            if isinstance(_hx_e1, BlockingIOError):
                e = _hx_e1
                raise _HxException(haxe_io_Error.Blocked)
            else:
                raise _hx_e

    def writeBytes(self,buf,pos,_hx_len):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:94
        try:
            # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:95
            data = buf.b
            # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:96
            payload = data[pos:pos+_hx_len]
            # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:97
            r = self._hx___s.send(payload,0)
            # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:98
            return r
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            if isinstance(_hx_e1, BlockingIOError):
                e = _hx_e1
                raise _HxException(haxe_io_Error.Blocked)
            else:
                raise _hx_e

    def close(self):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:105
        super().close()
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:106
        if (self._hx___s is not None):
            self._hx___s.close()



class sys_net_Socket:
    _hx_class_name = "sys.net.Socket"
    __slots__ = ("_hx___s", "input", "output")
    _hx_fields = ["__s", "input", "output"]
    _hx_methods = ["__init", "close", "write", "connect", "shutdown", "setTimeout", "fileno"]

    def __init__(self):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:126
        self.output = None
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:121
        self.input = None
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:116
        self._hx___s = None

    def _hx___init(self):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:140
        self._hx___s = python_lib_net_Socket()
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:141
        self.input = sys_net__Socket_SocketInput(self._hx___s)
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:142
        self.output = sys_net__Socket_SocketOutput(self._hx___s)

    def close(self):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:149
        self._hx___s.close()

    def write(self,content):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:163
        self.output.writeString(content)

    def connect(self,host,port):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:170
        self._hx___init()
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:171
        host_str = host.toString()
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:172
        self._hx___s.connect((host_str,port))

    def shutdown(self,read,write):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:186
        self._hx___s.shutdown((python_lib_net_SocketModule.SHUT_RDWR if ((read and write)) else (python_lib_net_SocketModule.SHUT_RD if read else python_lib_net_SocketModule.SHUT_WR)))

    def setTimeout(self,timeout):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:229
        self._hx___s.settimeout(timeout)

    def fileno(self):
        # /usr/local/lib/haxe/std/python/_std/sys/net/Socket.hx:251
        return self._hx___s.fileno()


# /usr/local/lib/haxe/std/python/_std/Math.hx:135
Math.NEGATIVE_INFINITY = float("-inf")
# /usr/local/lib/haxe/std/python/_std/Math.hx:136
Math.POSITIVE_INFINITY = float("inf")
# /usr/local/lib/haxe/std/python/_std/Math.hx:137
Math.NaN = float("nan")
# /usr/local/lib/haxe/std/python/_std/Math.hx:138
Math.PI = python_lib_Math.pi

Date.EPOCH_UTC = python_lib_datetime_Datetime.fromtimestamp(0,python_lib_datetime_Timezone.utc)
haxe_Http.PROXY = None
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

Main.main()