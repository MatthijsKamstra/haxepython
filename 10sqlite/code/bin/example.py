# Generated by Haxe 3.3.0

from datetime import datetime as python_lib_datetime_Datetime
from datetime import timezone as python_lib_datetime_Timezone
import math as python_lib_Math
import math as Math
from os import path as python_lib_os_Path
import inspect as python_lib_Inspect
import functools as python_lib_Functools
import random as python_lib_Random
import time as python_lib_Time
from io import StringIO as python_lib_io_StringIO
import urllib.parse as python_lib_urllib_Parse


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields


_hx_classes = {}


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:38
        self.tag = tag
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:39
        self.index = index
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:40
        self.params = params

    def __str__(self):
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:45
        if (self.params is None):
            return self.tag
        else:
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in self.params]))) + ")")

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.tag = None
        _hx_o.index = None
        _hx_o.params = None
Enum._hx_class = Enum
_hx_classes["Enum"] = Enum


class Class:
    _hx_class_name = "Class"
Class._hx_class = Class
_hx_classes["Class"] = Class


class DBStart:
    _hx_class_name = "DBStart"
    __slots__ = ()

    def __init__(self):
        # src/DBStart.hx:13
        sys_db_Sqlite.open("mybase.ddb")
DBStart._hx_class = DBStart
_hx_classes["DBStart"] = DBStart


class Date:
    _hx_class_name = "Date"
    __slots__ = ("date",)
    _hx_fields = ["date"]
    _hx_statics = ["EPOCH_UTC", "now", "fromTime", "UTC", "datetimeTimestamp", "fromString"]

    def __init__(self,year,month,day,hour,_hx_min,sec):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:34
        if (year < python_lib_datetime_Datetime.min.year):
            year = python_lib_datetime_Datetime.min.year
        # /usr/local/lib/haxe/std/python/_std/Date.hx:35
        if (day == 0):
            day = 1
        # /usr/local/lib/haxe/std/python/_std/Date.hx:36
        self.date = python_lib_datetime_Datetime(year, (month + 1), day, hour, _hx_min, sec, 0)

    @staticmethod
    def now():
        # /usr/local/lib/haxe/std/python/_std/Date.hx:98
        d = Date(1970, 0, 1, 0, 0, 0)
        # /usr/local/lib/haxe/std/python/_std/Date.hx:99
        d.date = python_lib_datetime_Datetime.now()
        # /usr/local/lib/haxe/std/python/_std/Date.hx:100
        return d

    @staticmethod
    def fromTime(t):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:105
        d = Date(1970, 0, 1, 0, 0, 0)
        # /usr/local/lib/haxe/std/python/_std/Date.hx:106
        d.date = python_lib_datetime_Datetime.fromtimestamp((t / 1000.0))
        # /usr/local/lib/haxe/std/python/_std/Date.hx:107
        return d

    @staticmethod
    def UTC(year,month,day,hour,_hx_min,sec):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:114
        return Date.datetimeTimestamp(python_lib_datetime_Datetime(year, (month + 1), day, hour, _hx_min, sec, 0, python_lib_datetime_Timezone.utc),Date.EPOCH_UTC)

    @staticmethod
    def datetimeTimestamp(dt,epoch):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:119
        return ((dt - epoch).total_seconds() * 1000)

    @staticmethod
    def fromString(s):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:124
        _g = len(s)
        # /usr/local/lib/haxe/std/python/_std/Date.hx:126
        if (_g == 8):
            # /usr/local/lib/haxe/std/python/_std/Date.hx:127
            k = s.split(":")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:129
            return Date(0, 0, 0, Std.parseInt((k[0] if 0 < len(k) else None)), Std.parseInt((k[1] if 1 < len(k) else None)), Std.parseInt((k[2] if 2 < len(k) else None)))
        elif (_g == 10):
            # /usr/local/lib/haxe/std/python/_std/Date.hx:131
            k1 = s.split("-")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:132
            return Date(Std.parseInt((k1[0] if 0 < len(k1) else None)), (Std.parseInt((k1[1] if 1 < len(k1) else None)) - 1), Std.parseInt((k1[2] if 2 < len(k1) else None)), 0, 0, 0)
        elif (_g == 19):
            # /usr/local/lib/haxe/std/python/_std/Date.hx:134
            k2 = s.split(" ")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:135
            y = (k2[0] if 0 < len(k2) else None).split("-")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:136
            t = (k2[1] if 1 < len(k2) else None).split(":")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:137
            return Date(Std.parseInt((y[0] if 0 < len(y) else None)), (Std.parseInt((y[1] if 1 < len(y) else None)) - 1), Std.parseInt((y[2] if 2 < len(y) else None)), Std.parseInt((t[0] if 0 < len(t) else None)), Std.parseInt((t[1] if 1 < len(t) else None)), Std.parseInt((t[2] if 2 < len(t) else None)))
        else:
            raise _HxException(("Invalid date format : " + ("null" if s is None else s)))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.date = None
Date._hx_class = Date
_hx_classes["Date"] = Date


class EnumValue:
    _hx_class_name = "EnumValue"
EnumValue._hx_class = EnumValue
_hx_classes["EnumValue"] = EnumValue


class List:
    _hx_class_name = "List"
    __slots__ = ("h", "q", "length")
    _hx_fields = ["h", "q", "length"]
    _hx_methods = ["add", "join"]

    def __init__(self):
        # /usr/local/lib/haxe/std/List.hx:33
        self.q = None
        # /usr/local/lib/haxe/std/List.hx:32
        self.h = None
        # /usr/local/lib/haxe/std/List.hx:44
        self.length = 0

    def add(self,item):
        # /usr/local/lib/haxe/std/List.hx:53
        x = _List_ListNode(item, None)
        # /usr/local/lib/haxe/std/List.hx:54
        if (self.h is None):
            self.h = x
        else:
            self.q.next = x
        # /usr/local/lib/haxe/std/List.hx:58
        self.q = x
        # /usr/local/lib/haxe/std/List.hx:59
        # /usr/local/lib/haxe/std/List.hx:59
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.length
        _hx_local_0.length = (_hx_local_1 + 1)
        _hx_local_1

    def join(self,sep):
        # /usr/local/lib/haxe/std/List.hx:191
        s_b = python_lib_io_StringIO()
        # /usr/local/lib/haxe/std/List.hx:193
        first = True
        # /usr/local/lib/haxe/std/List.hx:194
        l = self.h
        # /usr/local/lib/haxe/std/List.hx:195
        while (l is not None):
            # /usr/local/lib/haxe/std/List.hx:196
            if first:
                first = False
            else:
                s_b.write(Std.string(sep))
            # /usr/local/lib/haxe/std/List.hx:200
            s_b.write(Std.string(l.item))
            # /usr/local/lib/haxe/std/List.hx:201
            l = l.next
        # /usr/local/lib/haxe/std/List.hx:203
        return s_b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.h = None
        _hx_o.q = None
        _hx_o.length = None
List._hx_class = List
_hx_classes["List"] = List


class _List_ListNode:
    _hx_class_name = "_List.ListNode"
    __slots__ = ("item", "next")
    _hx_fields = ["item", "next"]

    def __init__(self,item,next):
        # /usr/local/lib/haxe/std/List.hx:256
        self.item = item
        # /usr/local/lib/haxe/std/List.hx:257
        self.next = next

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.item = None
        _hx_o.next = None
_List_ListNode._hx_class = _List_ListNode
_hx_classes["_List.ListNode"] = _List_ListNode


class Main:
    _hx_class_name = "Main"
    __slots__ = ()
    _hx_statics = ["main"]

    def __init__(self):
        # src/Main.hx:14
        if (not sys_FileSystem.exists("mybase.ddb")):
            DBStart()

    @staticmethod
    def main():
        # src/Main.hx:66
        Main()
Main._hx_class = Main
_hx_classes["Main"] = Main


class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field", "setField", "callMethod", "isFunction", "deleteField"]

    @staticmethod
    def field(o,field):
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:44
        return python_Boot.field(o,field)

    @staticmethod
    def setField(o,field,value):
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:49
        setattr(o,(("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field)),value)

    @staticmethod
    def callMethod(o,func,args):
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:76
        if callable(func):
            return func(*args)
        else:
            return None

    @staticmethod
    def isFunction(f):
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:86
        if (not ((python_lib_Inspect.isfunction(f) or python_lib_Inspect.ismethod(f)))):
            return hasattr(f,"func_code")
        else:
            return True

    @staticmethod
    def deleteField(o,field):
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:117
        if (field in python_Boot.keywords):
            field = ("_hx_" + field)
        elif ((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95))):
            field = ("_hx_" + field)
        else:
            field = field
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:118
        if (not hasattr(o,(("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field)))):
            return False
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:119
        o.__delattr__(field)
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:120
        return True
Reflect._hx_class = Reflect
_hx_classes["Reflect"] = Reflect


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["is", "string", "parseInt", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def _hx_is(v,t):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:51
        if ((v is None) and ((t is None))):
            return False
        # /usr/local/lib/haxe/std/python/_std/Std.hx:54
        if (t is None):
            return False
        # /usr/local/lib/haxe/std/python/_std/Std.hx:58
        if (t == Dynamic):
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:61
        isBool = isinstance(v,bool)
        # /usr/local/lib/haxe/std/python/_std/Std.hx:63
        if ((t == Bool) and isBool):
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:66
        if ((((not isBool) and (not (t == Bool))) and (t == Int)) and isinstance(v,int)):
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:69
        vIsFloat = isinstance(v,float)
        # /usr/local/lib/haxe/std/python/_std/Std.hx:71
        tmp = None
        tmp1 = None
        tmp2 = None
        tmp3 = None
        if (((not isBool) and vIsFloat) and (t == Int)):
            f = v
            if ((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))):
                tmp3 = (not python_lib_Math.isnan(f))
            else:
                tmp3 = False
        else:
            tmp3 = False
        if tmp3:
            tmp4 = None
            try:
                tmp4 = int(v)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                tmp4 = None
            tmp2 = (v == tmp4)
        else:
            tmp2 = False
        if tmp2:
            tmp1 = (v <= 2147483647)
        else:
            tmp1 = False
        if tmp1:
            tmp = (v >= -2147483648)
        else:
            tmp = False
        if tmp:
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:76
        if (((not isBool) and (t == Float)) and isinstance(v,(float, int))):
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:80
        if (t == str):
            return isinstance(v,str)
        # /usr/local/lib/haxe/std/python/_std/Std.hx:83
        isEnumType = (t == Enum)
        # /usr/local/lib/haxe/std/python/_std/Std.hx:84
        if ((isEnumType and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_constructs")):
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:86
        if isEnumType:
            return False
        # /usr/local/lib/haxe/std/python/_std/Std.hx:88
        isClassType = (t == Class)
        # /usr/local/lib/haxe/std/python/_std/Std.hx:89
        if ((((isClassType and (not isinstance(v,Enum))) and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_class_name")) and (not hasattr(v,"_hx_constructs"))):
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:91
        if isClassType:
            return False
        # /usr/local/lib/haxe/std/python/_std/Std.hx:93
        tmp5 = None
        try:
            tmp5 = isinstance(v,t)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            tmp5 = False
        if tmp5:
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:97
        if python_lib_Inspect.isclass(t):
            # /usr/local/lib/haxe/std/python/_std/Std.hx:99
            loop = None
            # /usr/local/lib/haxe/std/python/_std/Std.hx:100
            def _hx_local_1(intf):
                # /usr/local/lib/haxe/std/python/_std/Std.hx:101
                f1 = (intf._hx_interfaces if (hasattr(intf,"_hx_interfaces")) else [])
                # /usr/local/lib/haxe/std/python/_std/Std.hx:102
                if (f1 is not None):
                    # /usr/local/lib/haxe/std/python/_std/Std.hx:103
                    # /usr/local/lib/haxe/std/python/_std/Std.hx:103
                    _g = 0
                    while (_g < len(f1)):
                        i = (f1[_g] if _g >= 0 and _g < len(f1) else None)
                        _g = (_g + 1)
                        # /usr/local/lib/haxe/std/python/_std/Std.hx:104
                        if HxOverrides.eq(i,t):
                            return True
                        else:
                            # /usr/local/lib/haxe/std/python/_std/Std.hx:107
                            l = loop(i)
                            # /usr/local/lib/haxe/std/python/_std/Std.hx:108
                            if l:
                                return True
                    # /usr/local/lib/haxe/std/python/_std/Std.hx:113
                    return False
                else:
                    return False
            # /usr/local/lib/haxe/std/python/_std/Std.hx:99
            loop = _hx_local_1
            loop1 = loop
            # /usr/local/lib/haxe/std/python/_std/Std.hx:118
            currentClass = v.__class__
            # /usr/local/lib/haxe/std/python/_std/Std.hx:119
            while (currentClass is not None):
                # /usr/local/lib/haxe/std/python/_std/Std.hx:120
                if loop1(currentClass):
                    return True
                # /usr/local/lib/haxe/std/python/_std/Std.hx:123
                currentClass = python_Boot.getSuperClass(currentClass)
            # /usr/local/lib/haxe/std/python/_std/Std.hx:125
            return False
        else:
            return False

    @staticmethod
    def string(s):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:134
        return python_Boot.toString1(s,"")

    @staticmethod
    def parseInt(x):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:147
        if (x is None):
            return None
        # /usr/local/lib/haxe/std/python/_std/Std.hx:148
        try:
            return int(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            try:
                # /usr/local/lib/haxe/std/python/_std/Std.hx:152
                prefix = HxString.substr(x,0,2).lower()
                # /usr/local/lib/haxe/std/python/_std/Std.hx:154
                if (prefix == "0x"):
                    return int(x,16)
                # /usr/local/lib/haxe/std/python/_std/Std.hx:157
                raise _HxException("fail")
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e1 = _hx_e1
                # /usr/local/lib/haxe/std/python/_std/Std.hx:160
                x1 = Std.parseFloat(x)
                r = None
                try:
                    r = int(x1)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    r = None
                # /usr/local/lib/haxe/std/python/_std/Std.hx:162
                if (r is None):
                    # /usr/local/lib/haxe/std/python/_std/Std.hx:163
                    r1 = Std.shortenPossibleNumber(x)
                    # /usr/local/lib/haxe/std/python/_std/Std.hx:164
                    if (r1 != x):
                        return Std.parseInt(r1)
                    else:
                        return None
                # /usr/local/lib/haxe/std/python/_std/Std.hx:170
                return r

    @staticmethod
    def shortenPossibleNumber(x):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:177
        r = ""
        # /usr/local/lib/haxe/std/python/_std/Std.hx:178
        # /usr/local/lib/haxe/std/python/_std/Std.hx:178
        _g1 = 0
        _g = len(x)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/python/_std/Std.hx:179
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            # /usr/local/lib/haxe/std/python/_std/Std.hx:180
            # /usr/local/lib/haxe/std/python/_std/Std.hx:180
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            elif (((((((((((_g2 == 57) or ((_g2 == 56))) or ((_g2 == 55))) or ((_g2 == 54))) or ((_g2 == 53))) or ((_g2 == 52))) or ((_g2 == 51))) or ((_g2 == 50))) or ((_g2 == 49))) or ((_g2 == 48))) or ((_g2 == 46))):
                r = (("null" if r is None else r) + ("null" if c is None else c))
            else:
                break
        # /usr/local/lib/haxe/std/python/_std/Std.hx:195
        return r

    @staticmethod
    def parseFloat(x):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:200
        try:
            return float(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            # /usr/local/lib/haxe/std/python/_std/Std.hx:204
            if (x is not None):
                # /usr/local/lib/haxe/std/python/_std/Std.hx:205
                r1 = Std.shortenPossibleNumber(x)
                # /usr/local/lib/haxe/std/python/_std/Std.hx:206
                if (r1 != x):
                    return Std.parseFloat(r1)
            # /usr/local/lib/haxe/std/python/_std/Std.hx:210
            return Math.NaN
Std._hx_class = Std
_hx_classes["Std"] = Std


class Float:
    _hx_class_name = "Float"
Float._hx_class = Float
_hx_classes["Float"] = Float


class Int:
    _hx_class_name = "Int"
Int._hx_class = Int
_hx_classes["Int"] = Int


class Bool:
    _hx_class_name = "Bool"
Bool._hx_class = Bool
_hx_classes["Bool"] = Bool


class Dynamic:
    _hx_class_name = "Dynamic"
Dynamic._hx_class = Dynamic
_hx_classes["Dynamic"] = Dynamic


class StringBuf:
    _hx_class_name = "StringBuf"
    __slots__ = ("b",)
    _hx_fields = ["b"]

    def __init__(self):
        # /usr/local/lib/haxe/std/python/_std/StringBuf.hx:32
        self.b = python_lib_io_StringIO()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.b = None
        _hx_o.length = None
StringBuf._hx_class = StringBuf
_hx_classes["StringBuf"] = StringBuf


class sys_FileSystem:
    _hx_class_name = "sys.FileSystem"
    __slots__ = ()
    _hx_statics = ["exists"]

    @staticmethod
    def exists(path):
        # /usr/local/lib/haxe/std/python/_std/sys/FileSystem.hx:31
        return python_lib_os_Path.exists(path)
sys_FileSystem._hx_class = sys_FileSystem
_hx_classes["sys.FileSystem"] = sys_FileSystem


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()
haxe_IMap._hx_class = haxe_IMap
_hx_classes["haxe.IMap"] = haxe_IMap


class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["remove", "keys"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/StringMap.hx:32
        self.h = dict()

    def remove(self,key):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/StringMap.hx:48
        has = (key in self.h)
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/StringMap.hx:49
        if has:
            del self.h[key]
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/StringMap.hx:50
        return has

    def keys(self):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/StringMap.hx:54
        return python_HaxeIterator(iter(self.h.keys()))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.h = None
haxe_ds_StringMap._hx_class = haxe_ds_StringMap
_hx_classes["haxe.ds.StringMap"] = haxe_ds_StringMap


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:31
        self.checked = False
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:30
        self.has = False
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:29
        self.x = None
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:34
        self.it = it

    def next(self):
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:38
        if (not self.checked):
            self.hasNext()
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:39
        self.checked = False
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:40
        return self.x

    def hasNext(self):
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:44
        if (not self.checked):
            # /usr/local/lib/haxe/std/python/HaxeIterator.hx:45
            try:
                # /usr/local/lib/haxe/std/python/HaxeIterator.hx:46
                self.x = self.it.__next__()
                # /usr/local/lib/haxe/std/python/HaxeIterator.hx:47
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    # /usr/local/lib/haxe/std/python/HaxeIterator.hx:49
                    self.has = False
                    # /usr/local/lib/haxe/std/python/HaxeIterator.hx:50
                    self.x = None
                else:
                    raise _hx_e
            # /usr/local/lib/haxe/std/python/HaxeIterator.hx:52
            self.checked = True
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:54
        return self.has

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.it = None
        _hx_o.x = None
        _hx_o.has = None
        _hx_o.checked = None
python_HaxeIterator._hx_class = python_HaxeIterator
_hx_classes["python.HaxeIterator"] = python_HaxeIterator

class ValueType(Enum):
    __slots__ = ()
    _hx_class_name = "ValueType"
    _hx_constructs = ["TNull", "TInt", "TFloat", "TBool", "TObject", "TFunction", "TClass", "TEnum", "TUnknown"]

    @staticmethod
    def TClass(c):
        return ValueType("TClass", 6, [c])

    @staticmethod
    def TEnum(e):
        return ValueType("TEnum", 7, [e])
ValueType.TNull = ValueType("TNull", 0, list())
ValueType.TInt = ValueType("TInt", 1, list())
ValueType.TFloat = ValueType("TFloat", 2, list())
ValueType.TBool = ValueType("TBool", 3, list())
ValueType.TObject = ValueType("TObject", 4, list())
ValueType.TFunction = ValueType("TFunction", 5, list())
ValueType.TUnknown = ValueType("TUnknown", 8, list())
ValueType._hx_class = ValueType
_hx_classes["ValueType"] = ValueType


class Type:
    _hx_class_name = "Type"
    __slots__ = ()
    _hx_statics = ["getClass", "getSuperClass", "getClassName", "getEnumName", "resolveClass", "resolveEnum", "createEmptyInstance", "createEnum", "getEnumConstructs", "typeof"]

    @staticmethod
    def getClass(o):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:46
        if (o is None):
            return None
        # /usr/local/lib/haxe/std/python/_std/Type.hx:49
        if ((o is not None) and (((o == str) or python_lib_Inspect.isclass(o)))):
            return None
        # /usr/local/lib/haxe/std/python/_std/Type.hx:51
        if isinstance(o,_hx_AnonObject):
            return None
        # /usr/local/lib/haxe/std/python/_std/Type.hx:53
        if hasattr(o,"_hx_class"):
            return o._hx_class
        # /usr/local/lib/haxe/std/python/_std/Type.hx:56
        if hasattr(o,"__class__"):
            return o.__class__
        else:
            return None

    @staticmethod
    def getSuperClass(c):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:70
        return python_Boot.getSuperClass(c)

    @staticmethod
    def getClassName(c):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:75
        if hasattr(c,"_hx_class_name"):
            return c._hx_class_name
        else:
            # /usr/local/lib/haxe/std/python/_std/Type.hx:79
            if (c == list):
                return "Array"
            # /usr/local/lib/haxe/std/python/_std/Type.hx:80
            if (c == Math):
                return "Math"
            # /usr/local/lib/haxe/std/python/_std/Type.hx:81
            if (c == str):
                return "String"
            # /usr/local/lib/haxe/std/python/_std/Type.hx:83
            try:
                return c.__name__
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return None

    @staticmethod
    def getEnumName(e):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:92
        return e._hx_class_name

    @staticmethod
    def resolveClass(name):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:97
        if (name == "Array"):
            return list
        # /usr/local/lib/haxe/std/python/_std/Type.hx:98
        if (name == "Math"):
            return Math
        # /usr/local/lib/haxe/std/python/_std/Type.hx:99
        if (name == "String"):
            return str
        # /usr/local/lib/haxe/std/python/_std/Type.hx:101
        cl = _hx_classes.get(name,None)
        # /usr/local/lib/haxe/std/python/_std/Type.hx:103
        if ((cl is None) or (not (((cl is not None) and (((cl == str) or python_lib_Inspect.isclass(cl))))))):
            return None
        # /usr/local/lib/haxe/std/python/_std/Type.hx:105
        return cl

    @staticmethod
    def resolveEnum(name):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:109
        if (name == "Bool"):
            return Bool
        # /usr/local/lib/haxe/std/python/_std/Type.hx:110
        o = Type.resolveClass(name)
        # /usr/local/lib/haxe/std/python/_std/Type.hx:111
        if hasattr(o,"_hx_constructs"):
            return o
        else:
            return None

    @staticmethod
    def createEmptyInstance(cl):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:121
        i = cl.__new__(cl)
        # /usr/local/lib/haxe/std/python/_std/Type.hx:123
        callInit = None
        def _hx_local_0(cl1):
            # /usr/local/lib/haxe/std/python/_std/Type.hx:124
            sc = Type.getSuperClass(cl1)
            # /usr/local/lib/haxe/std/python/_std/Type.hx:125
            if (sc is not None):
                callInit(sc)
            # /usr/local/lib/haxe/std/python/_std/Type.hx:128
            if hasattr(cl1,"_hx_empty_init"):
                cl1._hx_empty_init(i)
        callInit = _hx_local_0
        callInit1 = callInit
        # /usr/local/lib/haxe/std/python/_std/Type.hx:132
        callInit1(cl)
        # /usr/local/lib/haxe/std/python/_std/Type.hx:134
        return i

    @staticmethod
    def createEnum(e,constr,params = None):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:139
        f = Reflect.field(e,constr)
        # /usr/local/lib/haxe/std/python/_std/Type.hx:140
        if (f is None):
            raise _HxException(("No such constructor " + ("null" if constr is None else constr)))
        # /usr/local/lib/haxe/std/python/_std/Type.hx:141
        if Reflect.isFunction(f):
            # /usr/local/lib/haxe/std/python/_std/Type.hx:142
            if (params is None):
                raise _HxException((("Constructor " + ("null" if constr is None else constr)) + " need parameters"))
            # /usr/local/lib/haxe/std/python/_std/Type.hx:144
            return Reflect.callMethod(e,f,params)
        # /usr/local/lib/haxe/std/python/_std/Type.hx:146
        if ((params is not None) and ((len(params) != 0))):
            raise _HxException((("Constructor " + ("null" if constr is None else constr)) + " does not need parameters"))
        # /usr/local/lib/haxe/std/python/_std/Type.hx:148
        return f

    @staticmethod
    def getEnumConstructs(e):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:167
        if hasattr(e,"_hx_constructs"):
            # /usr/local/lib/haxe/std/python/_std/Type.hx:168
            x = e._hx_constructs
            # /usr/local/lib/haxe/std/python/_std/Type.hx:169
            return list(x)
        else:
            return []

    @staticmethod
    def typeof(v):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:178
        if (v is None):
            return ValueType.TNull
        elif isinstance(v,bool):
            return ValueType.TBool
        elif isinstance(v,int):
            return ValueType.TInt
        elif isinstance(v,float):
            return ValueType.TFloat
        elif isinstance(v,str):
            return ValueType.TClass(str)
        elif isinstance(v,list):
            return ValueType.TClass(list)
        elif (isinstance(v,_hx_AnonObject) or python_lib_Inspect.isclass(v)):
            return ValueType.TObject
        elif isinstance(v,Enum):
            return ValueType.TEnum(v.__class__)
        elif (isinstance(v,type) or hasattr(v,"_hx_class")):
            return ValueType.TClass(v.__class__)
        elif callable(v):
            return ValueType.TFunction
        else:
            return ValueType.TUnknown
Type._hx_class = Type
_hx_classes["Type"] = Type


class sys_db_Object:
    _hx_class_name = "sys.db.Object"
    __slots__ = ("_lock", "_manager", "__cache__")
    _hx_fields = ["_lock", "_manager", "__cache__"]
    _hx_methods = ["__getManager", "insert", "update", "lock", "delete", "isLocked", "toString"]

    def __init__(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:35
        self.__cache__ = None
        # /usr/local/lib/haxe/std/sys/db/Object.hx:33
        self._manager = None
        # /usr/local/lib/haxe/std/sys/db/Object.hx:32
        self._lock = None
        # /usr/local/lib/haxe/std/sys/db/Object.hx:40
        if (self._manager is None):
            self._manager = self._hx___getManager()

    def _hx___getManager(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:47
        cls = Type.getClass(self)
        # /usr/local/lib/haxe/std/sys/db/Object.hx:48
        return Reflect.field(cls,"manager")

    def insert(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:53
        self._manager.doInsert(self)

    def update(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:57
        self._manager.doUpdate(self)

    def lock(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:61
        self._manager.doLock(self)

    def delete(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:65
        self._manager.doDelete(self)

    def isLocked(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:69
        return self._lock

    def toString(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:73
        return self._manager.objectToString(self)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o._lock = None
        _hx_o._manager = None
        _hx_o.__cache__ = None
sys_db_Object._hx_class = sys_db_Object
_hx_classes["sys.db.Object"] = sys_db_Object


class sys_db_Manager:
    _hx_class_name = "sys.db.Manager"
    __slots__ = ("table_infos", "table_name", "table_keys", "class_proto")
    _hx_fields = ["table_infos", "table_name", "table_keys", "class_proto"]
    _hx_methods = ["doUpdateCache", "doInsert", "doUpdate", "getUpdateStatement", "doDelete", "doLock", "objectToString", "doSerialize", "normalizeCache", "cacheObject", "make", "unmake", "quoteField", "addKeys", "unsafeExecute", "unsafeObject", "getCnx", "getLockMode", "makeCacheKey", "addToCache", "removeFromCache", "getFromCache"]
    _hx_statics = ["cnx", "lockMode", "object_cache", "KEYWORDS", "getFieldName", "__depends"]

    def __init__(self,classval):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:61
        self.class_proto = None
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:60
        self.table_keys = None
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:59
        self.table_name = None
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:64
        m = Reflect.field(haxe_rtti_Meta.getType(classval),"rtti")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:65
        if (m is None):
            raise _HxException(("Missing @rtti for class " + HxOverrides.stringOrNull(Type.getClassName(classval))))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:66
        self.table_infos = haxe_Unserializer.run((m[0] if 0 < len(m) else None))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:67
        self.table_name = self.quoteField(self.table_infos.name)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:68
        self.table_keys = self.table_infos.key
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:70
        self.class_proto = classval

    def doUpdateCache(self,x,name,v):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:117
        cache = Reflect.field(x,("cache_" + ("null" if name is None else name)))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:120
        if (cache is None):
            return v
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:125
        return self.doSerialize(name,cache.v)

    def doInsert(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:139
        self.unmake(x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:140
        s = StringBuf()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:141
        fields = List()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:142
        values = List()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:143
        cache = Reflect.field(x,"__cache__")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:144
        if (cache is None):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:146
            cache = _hx_AnonObject({})
            setattr(x,(("_hx_" + "__cache__") if (("__cache__" in python_Boot.keywords)) else (("_hx_" + "__cache__") if (((((len("__cache__") > 2) and ((ord("__cache__"[0]) == 95))) and ((ord("__cache__"[1]) == 95))) and ((ord("__cache__"[(len("__cache__") - 1)]) != 95)))) else "__cache__")),cache)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:149
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:149
        _g = 0
        _g1 = self.table_infos.fields
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:150
            name = f.name
            fieldName = sys_db_Manager.getFieldName(f)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:152
            v = Reflect.field(x,fieldName)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:153
            if (v is not None):
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:154
                fields.add(self.quoteField(name))
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:155
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:155
                _g2 = f.t
                if (_g2.index == 30):
                    v = self.doUpdateCache(x,name,v)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:159
                values.add(v)
            elif (not f.isNull):
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:162
                _g21 = f.t
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:166
                if ((_g21.index) == 8):
                    setattr(x,(("_hx_" + fieldName) if ((fieldName in python_Boot.keywords)) else (("_hx_" + fieldName) if (((((len(fieldName) > 2) and ((ord(fieldName[0]) == 95))) and ((ord(fieldName[1]) == 95))) and ((ord(fieldName[(len(fieldName) - 1)]) != 95)))) else fieldName)),False)
                elif ((((_g21.index) == 12) or (((_g21.index) == 11))) or (((_g21.index) == 10))):
                    pass
                elif ((((((_g21.index) == 21) or (((_g21.index) == 15))) or (((_g21.index) == 14))) or (((_g21.index) == 13))) or (((_g21.index) == 9))):
                    setattr(x,(("_hx_" + fieldName) if ((fieldName in python_Boot.keywords)) else (("_hx_" + fieldName) if (((((len(fieldName) > 2) and ((ord(fieldName[0]) == 95))) and ((ord(fieldName[1]) == 95))) and ((ord(fieldName[(len(fieldName) - 1)]) != 95)))) else fieldName)),"")
                elif ((((((_g21.index) == 22) or (((_g21.index) == 19))) or (((_g21.index) == 18))) or (((_g21.index) == 17))) or (((_g21.index) == 16))):
                    # /usr/local/lib/haxe/std/sys/db/Manager.hx:170
                    value = haxe_io_Bytes.alloc(0)
                    setattr(x,(("_hx_" + fieldName) if ((fieldName in python_Boot.keywords)) else (("_hx_" + fieldName) if (((((len(fieldName) > 2) and ((ord(fieldName[0]) == 95))) and ((ord(fieldName[1]) == 95))) and ((ord(fieldName[(len(fieldName) - 1)]) != 95)))) else fieldName)),value)
                elif ((((((((((((((_g21.index) == 31) or (((_g21.index) == 29))) or (((_g21.index) == 28))) or (((_g21.index) == 27))) or (((_g21.index) == 26))) or (((_g21.index) == 25))) or (((_g21.index) == 24))) or (((_g21.index) == 23))) or (((_g21.index) == 7))) or (((_g21.index) == 6))) or (((_g21.index) == 5))) or (((_g21.index) == 3))) or (((_g21.index) == 1))):
                    setattr(x,(("_hx_" + fieldName) if ((fieldName in python_Boot.keywords)) else (("_hx_" + fieldName) if (((((len(fieldName) > 2) and ((ord(fieldName[0]) == 95))) and ((ord(fieldName[1]) == 95))) and ((ord(fieldName[(len(fieldName) - 1)]) != 95)))) else fieldName)),0)
                elif ((((((((_g21.index) == 33) or (((_g21.index) == 32))) or (((_g21.index) == 30))) or (((_g21.index) == 20))) or (((_g21.index) == 4))) or (((_g21.index) == 2))) or (((_g21.index) == 0))):
                    pass
                else:
                    pass
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:178
            setattr(cache,(("_hx_" + name) if ((name in python_Boot.keywords)) else (("_hx_" + name) if (((((len(name) > 2) and ((ord(name[0]) == 95))) and ((ord(name[1]) == 95))) and ((ord(name[(len(name) - 1)]) != 95)))) else name)),v)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:180
        s.b.write("INSERT INTO ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:181
        s.b.write(Std.string(self.table_name))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:182
        if ((fields.length > 0) or ((sys_db_Manager.cnx.dbName() != "SQLite"))):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:184
            s.b.write(" (")
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:185
            s.b.write(Std.string(fields.join(",")))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:186
            s.b.write(") VALUES (")
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:187
            first = True
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:188
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:188
            _g_head = values.h
            while (_g_head is not None):
                val = _g_head.item
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:138
                _g_head = _g_head.next
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:188
                v1 = val
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:189
                if first:
                    first = False
                else:
                    s.b.write(", ")
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:193
                self.getCnx().addValue(s,v1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:195
            s.b.write(")")
        else:
            s.b.write(" DEFAULT VALUES")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:199
        self.unsafeExecute(s.b.getvalue())
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:200
        x._lock = True
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:202
        if ((len(self.table_keys) == 1) and ((Reflect.field(x,(self.table_keys[0] if 0 < len(self.table_keys) else None)) is None))):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:203
            field = (self.table_keys[0] if 0 < len(self.table_keys) else None)
            value1 = self.getCnx().lastInsertId()
            setattr(x,(("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field)),value1)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:204
        self.addToCache(x)

    def doUpdate(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:220
        if (not x._lock):
            raise _HxException("Cannot update a not locked object")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:222
        upd = self.getUpdateStatement(x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:223
        if (upd is None):
            return
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:224
        self.unsafeExecute(upd)

    def getUpdateStatement(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:229
        self.unmake(x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:230
        s = StringBuf()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:231
        s.b.write("UPDATE ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:232
        s.b.write(Std.string(self.table_name))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:233
        s.b.write(" SET ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:234
        cache = Reflect.field(x,"__cache__")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:235
        mod = False
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:236
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:236
        _g = 0
        _g1 = self.table_infos.fields
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:237
            if (python_internal_ArrayImpl.indexOf(self.table_keys,f.name,None) >= 0):
                continue
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:239
            name = f.name
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:241
            v = Reflect.field(x,sys_db_Manager.getFieldName(f))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:242
            vc = Reflect.field(cache,name)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:243
            if ((cache is None) or (not HxOverrides.eq(v,vc))):
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:244
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:244
                _g2 = f.t
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:246
                if ((((((_g2.index) == 22) or (((_g2.index) == 19))) or (((_g2.index) == 18))) or (((_g2.index) == 17))) or (((_g2.index) == 16))):
                    # /usr/local/lib/haxe/std/sys/db/Manager.hx:246
                    a = v
                    b = vc
                    if (not (((a != b) and ((((a is None) or ((b is None))) or ((a.compare(b) != 0))))))):
                        continue
                elif ((_g2.index) == 30):
                    # /usr/local/lib/haxe/std/sys/db/Manager.hx:249
                    v = self.doUpdateCache(x,name,v)
                    # /usr/local/lib/haxe/std/sys/db/Manager.hx:250
                    a1 = v
                    b1 = vc
                    if (not (((a1 != b1) and ((((a1 is None) or ((b1 is None))) or ((a1.compare(b1) != 0))))))):
                        continue
                else:
                    pass
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:254
                if mod:
                    s.b.write(", ")
                else:
                    mod = True
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:258
                s.b.write(Std.string(self.quoteField(name)))
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:259
                s.b.write(" = ")
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:260
                self.getCnx().addValue(s,v)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:261
                if (cache is not None):
                    setattr(cache,(("_hx_" + name) if ((name in python_Boot.keywords)) else (("_hx_" + name) if (((((len(name) > 2) and ((ord(name[0]) == 95))) and ((ord(name[1]) == 95))) and ((ord(name[(len(name) - 1)]) != 95)))) else name)),v)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:265
        if (not mod):
            return None
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:267
        s.b.write(" WHERE ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:268
        self.addKeys(s,x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:269
        return s.b.getvalue()

    def doDelete(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:273
        s = StringBuf()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:274
        s.b.write("DELETE FROM ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:275
        s.b.write(Std.string(self.table_name))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:276
        s.b.write(" WHERE ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:277
        self.addKeys(s,x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:278
        self.unsafeExecute(s.b.getvalue())
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:279
        self.removeFromCache(x)

    def doLock(self,i):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:283
        if i._lock:
            return
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:285
        s = StringBuf()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:286
        s.b.write("SELECT * FROM ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:287
        s.b.write(Std.string(self.table_name))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:288
        s.b.write(" WHERE ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:289
        self.addKeys(s,i)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:291
        if (self.unsafeObject(s.b.getvalue(),True) != i):
            raise _HxException("Could not lock object (was deleted ?); try restarting transaction")

    def objectToString(self,it):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:295
        s_b = python_lib_io_StringIO()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:297
        s_b.write(Std.string(self.table_name))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:298
        if (len(self.table_keys) == 1):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:299
            s_b.write("#")
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:300
            s_b.write(Std.string(Reflect.field(it,(self.table_keys[0] if 0 < len(self.table_keys) else None))))
        else:
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:302
            s_b.write("(")
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:303
            first = True
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:304
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:304
            _g = 0
            _g1 = self.table_keys
            while (_g < len(_g1)):
                f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:305
                if first:
                    first = False
                else:
                    s_b.write(",")
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:309
                s_b.write(Std.string(self.quoteField(f)))
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:310
                s_b.write(":")
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:311
                s_b.write(Std.string(Reflect.field(it,f)))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:313
            s_b.write(")")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:315
        return s_b.getvalue()

    def doSerialize(self,field,v):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:319
        s = haxe_Serializer()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:320
        s.useEnumIndex = True
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:321
        s.serialize(v)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:326
        return haxe_io_Bytes.ofString(s.toString())

    def normalizeCache(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:348
        _g = 0
        _g1 = python_Boot.fields(x)
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:350
            val = Reflect.field(x,f)
            info = self.table_infos.hfields.h.get(f,None)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:351
            if (info is not None):
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:353
                if (val is not None):
                    # /usr/local/lib/haxe/std/sys/db/Manager.hx:353
                    _g2 = info.t
                    # /usr/local/lib/haxe/std/sys/db/Manager.hx:381
                    if ((_g2.index) == 7):
                        if Std._hx_is(val,str):
                            val = Std.parseFloat(val)
                    elif ((_g2.index) == 8):
                        if (not Std._hx_is(val,Bool)):
                            if Std._hx_is(val,Int):
                                val = (val != 0)
                            elif Std._hx_is(val,str):
                                # /usr/local/lib/haxe/std/sys/db/Manager.hx:377
                                _g21 = Reflect.field(val,"toLowerCase")()
                                _hx_local_1 = len((_g21))
                                # /usr/local/lib/haxe/std/sys/db/Manager.hx:378
                                if (_hx_local_1 == 1):
                                    if ((_g21) == "1"):
                                        val = True
                                    elif ((_g21) == "0"):
                                        val = False
                                elif (_hx_local_1 == 4):
                                    if ((_g21) == "true"):
                                        val = True
                                elif (_hx_local_1 == 5):
                                    if ((_g21) == "false"):
                                        val = False
                                else:
                                    pass
                    elif (((_g2.index) == 11) or (((_g2.index) == 10))):
                        if (not Std._hx_is(val,Date)):
                            if Std._hx_is(val,Float):
                                val = Date.fromTime(val)
                            else:
                                # /usr/local/lib/haxe/std/sys/db/Manager.hx:359
                                v = (Std.string(val) + "")
                                # /usr/local/lib/haxe/std/sys/db/Manager.hx:360
                                index = v.find(".")
                                # /usr/local/lib/haxe/std/sys/db/Manager.hx:361
                                if (index >= 0):
                                    v = HxString.substr(v,0,index)
                                # /usr/local/lib/haxe/std/sys/db/Manager.hx:363
                                val = Date.fromString(v)
                    elif (((((_g2.index) == 15) or (((_g2.index) == 14))) or (((_g2.index) == 13))) or (((_g2.index) == 9))):
                        if (not Std._hx_is(val,str)):
                            val = (Std.string(val) + "")
                    elif ((((((_g2.index) == 30) or (((_g2.index) == 19))) or (((_g2.index) == 18))) or (((_g2.index) == 17))) or (((_g2.index) == 16))):
                        if Std._hx_is(val,str):
                            val = haxe_io_Bytes.ofString(val)
                    else:
                        pass
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:385
                setattr(x,(("_hx_" + f) if ((f in python_Boot.keywords)) else (("_hx_" + f) if (((((len(f) > 2) and ((ord(f[0]) == 95))) and ((ord(f[1]) == 95))) and ((ord(f[(len(f) - 1)]) != 95)))) else f)),val)

    def cacheObject(self,x,lock):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:395
        o = Type.createEmptyInstance(self.class_proto)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:396
        o._manager = self
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:398
        self.normalizeCache(x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:399
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:399
        _g = 0
        _g1 = python_Boot.fields(x)
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:401
            val = Reflect.field(x,f)
            info = self.table_infos.hfields.h.get(f,None)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:402
            if (info is not None):
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:404
                fieldName = sys_db_Manager.getFieldName(info)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:405
                setattr(o,(("_hx_" + fieldName) if ((fieldName in python_Boot.keywords)) else (("_hx_" + fieldName) if (((((len(fieldName) > 2) and ((ord(fieldName[0]) == 95))) and ((ord(fieldName[1]) == 95))) and ((ord(fieldName[(len(fieldName) - 1)]) != 95)))) else fieldName)),val)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:408
        setattr(o,(("_hx_" + "__cache__") if (("__cache__" in python_Boot.keywords)) else (("_hx_" + "__cache__") if (((((len("__cache__") > 2) and ((ord("__cache__"[0]) == 95))) and ((ord("__cache__"[1]) == 95))) and ((ord("__cache__"[(len("__cache__") - 1)]) != 95)))) else "__cache__")),x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:409
        self.addToCache(o)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:410
        o._lock = lock
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:411
        return o

    def make(self,x):
        pass

    def unmake(self,x):
        pass

    def quoteField(self,f):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:421
        if (f.lower() in sys_db_Manager.KEYWORDS.h):
            return (("`" + ("null" if f is None else f)) + "`")
        else:
            return f

    def addKeys(self,s,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:425
        first = True
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:426
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:426
        _g = 0
        _g1 = self.table_keys
        while (_g < len(_g1)):
            k = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:427
            if first:
                first = False
            else:
                s.b.write(" AND ")
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:431
            s.b.write(Std.string(self.quoteField(k)))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:432
            s.b.write(" = ")
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:433
            f = Reflect.field(x,k)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:434
            if (f is None):
                raise _HxException(("Missing key " + ("null" if k is None else k)))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:436
            self.getCnx().addValue(s,f)

    def unsafeExecute(self,sql):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:441
        return self.getCnx().request(sql)

    def unsafeObject(self,sql,lock):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:445
        if (lock != False):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:446
            lock = True
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:447
            sql = (("null" if sql is None else sql) + HxOverrides.stringOrNull(self.getLockMode()))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:449
        r = self.unsafeExecute(sql)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:450
        r1 = (r.next() if (r.hasNext()) else None)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:451
        if (r1 is None):
            return None
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:453
        self.normalizeCache(r1)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:454
        c = self.getFromCache(r1,lock)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:455
        if (c is not None):
            return c
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:457
        r1 = self.cacheObject(r1,lock)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:458
        self.make(r1)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:459
        return r1

    def getCnx(self):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:573
        return sys_db_Manager.cnx

    def getLockMode(self):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:577
        return sys_db_Manager.lockMode

    def makeCacheKey(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:667
        if (len(self.table_keys) == 1):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:668
            k = Reflect.field(x,(self.table_keys[0] if 0 < len(self.table_keys) else None))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:669
            if (k is None):
                raise _HxException(("Missing key " + HxOverrides.stringOrNull((self.table_keys[0] if 0 < len(self.table_keys) else None))))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:671
            return (Std.string(k) + HxOverrides.stringOrNull(self.table_name))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:666
        s_b = python_lib_io_StringIO()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:674
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:674
        _g = 0
        _g1 = self.table_keys
        while (_g < len(_g1)):
            k1 = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:675
            v = Reflect.field(x,k1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:676
            if (k1 is None):
                raise _HxException(("Missing key " + ("null" if k1 is None else k1)))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:678
            s_b.write(Std.string(v))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:679
            s_b.write("#")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:681
        s_b.write(Std.string(self.table_name))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:682
        return s_b.getvalue()

    def addToCache(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:686
        sys_db_Manager.object_cache.h[self.makeCacheKey(x)] = x

    def removeFromCache(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:690
        sys_db_Manager.object_cache.remove(self.makeCacheKey(x))

    def getFromCache(self,x,lock):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:698
        c = sys_db_Manager.object_cache.h.get(self.makeCacheKey(x),None)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:699
        if (((c is not None) and lock) and (not Reflect.field(c,"_lock"))):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:701
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:701
            _g = 0
            _g1 = python_Boot.fields(c)
            while (_g < len(_g1)):
                f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:702
                Reflect.deleteField(c,f)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:703
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:703
            _g2 = 0
            _g11 = self.table_infos.fields
            while (_g2 < len(_g11)):
                f1 = (_g11[_g2] if _g2 >= 0 and _g2 < len(_g11) else None)
                _g2 = (_g2 + 1)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:705
                name = f1.name
                fieldName = sys_db_Manager.getFieldName(f1)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:707
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:707
                value = Reflect.field(x,name)
                setattr(c,(("_hx_" + fieldName) if ((fieldName in python_Boot.keywords)) else (("_hx_" + fieldName) if (((((len(fieldName) > 2) and ((ord(fieldName[0]) == 95))) and ((ord(fieldName[1]) == 95))) and ((ord(fieldName[(len(fieldName) - 1)]) != 95)))) else fieldName)),value)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:710
            Reflect.setField(c,"_lock",True)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:713
            Reflect.setField(c,"_manager",self)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:716
            setattr(c,(("_hx_" + "__cache__") if (("__cache__" in python_Boot.keywords)) else (("_hx_" + "__cache__") if (((((len("__cache__") > 2) and ((ord("__cache__"[0]) == 95))) and ((ord("__cache__"[1]) == 95))) and ((ord("__cache__"[(len("__cache__") - 1)]) != 95)))) else "__cache__")),x)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:718
            self.make(c)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:720
        return c
    cnx = None
    lockMode = None

    @staticmethod
    def getFieldName(field):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:130
        _g = field.t
        if (((_g.index) == 31) or (((_g.index) == 30))):
            return ("data_" + HxOverrides.stringOrNull(field.name))
        else:
            return field.name

    @staticmethod
    def _hx___depends():
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:749
        return haxe_io_Bytes.alloc(0).toString()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.table_infos = None
        _hx_o.table_name = None
        _hx_o.table_keys = None
        _hx_o.class_proto = None
sys_db_Manager._hx_class = sys_db_Manager
_hx_classes["sys.db.Manager"] = sys_db_Manager


class haxe_rtti_Meta:
    _hx_class_name = "haxe.rtti.Meta"
    __slots__ = ()
    _hx_statics = ["getType", "getMeta"]

    @staticmethod
    def getType(t):
        # /usr/local/lib/haxe/std/haxe/rtti/Meta.hx:35
        meta = haxe_rtti_Meta.getMeta(t)
        # /usr/local/lib/haxe/std/haxe/rtti/Meta.hx:36
        if ((meta is None) or ((meta.obj is None))):
            return _hx_AnonObject({})
        else:
            return meta.obj

    @staticmethod
    def getMeta(t):
        # /usr/local/lib/haxe/std/haxe/rtti/Meta.hx:73
        return Reflect.field(t,"__meta__")
haxe_rtti_Meta._hx_class = haxe_rtti_Meta
_hx_classes["haxe.rtti.Meta"] = haxe_rtti_Meta


class haxe__Unserializer_DefaultResolver:
    _hx_class_name = "haxe._Unserializer.DefaultResolver"
    __slots__ = ()
    _hx_methods = ["resolveClass", "resolveEnum"]

    def __init__(self):
        pass

    def resolveClass(self,name):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:472
        return Type.resolveClass(name)

    def resolveEnum(self,name):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:473
        return Type.resolveEnum(name)

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
haxe__Unserializer_DefaultResolver._hx_class = haxe__Unserializer_DefaultResolver
_hx_classes["haxe._Unserializer.DefaultResolver"] = haxe__Unserializer_DefaultResolver


class haxe_Unserializer:
    _hx_class_name = "haxe.Unserializer"
    __slots__ = ("buf", "pos", "length", "cache", "scache", "resolver")
    _hx_fields = ["buf", "pos", "length", "cache", "scache", "resolver"]
    _hx_methods = ["readDigits", "readFloat", "unserializeObject", "unserializeEnum", "unserialize"]
    _hx_statics = ["DEFAULT_RESOLVER", "BASE64", "CODES", "initCodes", "run"]

    def __init__(self,buf):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:103
        self.buf = buf
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:104
        self.length = len(buf)
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:105
        self.pos = 0
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:109
        self.scache = list()
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:110
        self.cache = list()
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:111
        r = haxe_Unserializer.DEFAULT_RESOLVER
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:112
        if (r is None):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:113
            r = haxe__Unserializer_DefaultResolver()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:114
            haxe_Unserializer.DEFAULT_RESOLVER = r
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:116
        self.resolver = r

    def readDigits(self):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:148
        k = 0
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:149
        s = False
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:150
        fpos = self.pos
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:151
        while True:
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:152
            p = self.pos
            s1 = self.buf
            c = (-1 if ((p >= len(s1))) else ord(s1[p]))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:153
            if (c == -1):
                break
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:155
            if (c == 45):
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:156
                if (self.pos != fpos):
                    break
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:158
                s = True
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:159
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:159
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.pos
                _hx_local_0.pos = (_hx_local_1 + 1)
                _hx_local_1
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:160
                continue
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:162
            if ((c < 48) or ((c > 57))):
                break
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:164
            k = ((k * 10) + ((c - 48)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:165
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:165
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_3
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:167
        if s:
            k = (k * -1)
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:169
        return k

    def readFloat(self):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:173
        p1 = self.pos
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:174
        while True:
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:175
            p = self.pos
            s = self.buf
            c = (-1 if ((p >= len(s))) else ord(s[p]))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:176
            if (c == -1):
                break
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:178
            if ((((c >= 43) and ((c < 58))) or ((c == 101))) or ((c == 69))):
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:179
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.pos
                _hx_local_0.pos = (_hx_local_1 + 1)
                _hx_local_1
            else:
                break
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:183
        return Std.parseFloat(HxString.substr(self.buf,p1,(self.pos - p1)))

    def unserializeObject(self,o):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:187
        while True:
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:188
            if (self.pos >= self.length):
                raise _HxException("Invalid object")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:190
            p = self.pos
            s = self.buf
            if (((-1 if ((p >= len(s))) else ord(s[p]))) == 103):
                break
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:192
            k = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:193
            if (not Std._hx_is(k,str)):
                raise _HxException("Invalid object key")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:195
            v = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:196
            setattr(o,(("_hx_" + k) if ((k in python_Boot.keywords)) else (("_hx_" + k) if (((((len(k) > 2) and ((ord(k[0]) == 95))) and ((ord(k[1]) == 95))) and ((ord(k[(len(k) - 1)]) != 95)))) else k)),v)
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:198
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:198
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.pos
        _hx_local_0.pos = (_hx_local_1 + 1)
        _hx_local_1

    def unserializeEnum(self,edecl,tag):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:202
        p = self.pos
        self.pos = (self.pos + 1)
        s = self.buf
        if (((-1 if ((p >= len(s))) else ord(s[p]))) != 58):
            raise _HxException("Invalid enum format")
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:204
        nargs = self.readDigits()
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:205
        if (nargs == 0):
            return Type.createEnum(edecl,tag)
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:207
        args = list()
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:208
        while True:
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:208
            tmp = nargs
            nargs = (nargs - 1)
            if (not ((tmp > 0))):
                break
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:209
            x = self.unserialize()
            args.append(x)
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:210
        return Type.createEnum(edecl,tag,args)

    def unserialize(self):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:234
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:234
        p = self.pos
        self.pos = (self.pos + 1)
        s = self.buf
        _g = (-1 if ((p >= len(s))) else ord(s[p]))
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:435
        if (_g == 65):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:436
            name = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:437
            cl = self.resolver.resolveClass(name)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:438
            if (cl is None):
                raise _HxException(("Class not found " + ("null" if name is None else name)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:440
            return cl
        elif (_g == 66):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:442
            name1 = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:443
            e = self.resolver.resolveEnum(name1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:444
            if (e is None):
                raise _HxException(("Enum not found " + ("null" if name1 is None else name1)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:446
            return e
        elif (_g == 67):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:425
            name2 = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:426
            cl1 = self.resolver.resolveClass(name2)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:427
            if (cl1 is None):
                raise _HxException(("Class not found " + ("null" if name2 is None else name2)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:429
            o = Type.createEmptyInstance(cl1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:430
            self.cache.append(o)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:431
            Reflect.field(o,"hxUnserialize")(self)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:432
            p1 = self.pos
            self.pos = (self.pos + 1)
            s1 = self.buf
            if (((-1 if ((p1 >= len(s1))) else ord(s1[p1]))) != 103):
                raise _HxException("Invalid custom data")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:434
            return o
        elif (_g == 77):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:359
            h = haxe_ds_ObjectMap()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:360
            self.cache.append(h)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:362
            while True:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:362
                p2 = self.pos
                s2 = self.buf
                if (not ((((-1 if ((p2 >= len(s2))) else ord(s2[p2]))) != 104))):
                    break
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:364
                h.set(self.unserialize(),self.unserialize())
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:366
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:366
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:367
            return h
        elif (_g == 82):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:291
            n = self.readDigits()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:292
            if ((n < 0) or ((n >= len(self.scache)))):
                raise _HxException("Invalid string reference")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:294
            return (self.scache[n] if n >= 0 and n < len(self.scache) else None)
        elif (_g == 97):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:264
            a = list()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:265
            self.cache.append(a)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:266
            while True:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:267
                p3 = self.pos
                s3 = self.buf
                c = (-1 if ((p3 >= len(s3))) else ord(s3[p3]))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:268
                if (c == 104):
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:269
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:269
                    _hx_local_2 = self
                    _hx_local_3 = _hx_local_2.pos
                    _hx_local_2.pos = (_hx_local_3 + 1)
                    _hx_local_3
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:270
                    break
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:272
                if (c == 117):
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:273
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:273
                    _hx_local_4 = self
                    _hx_local_5 = _hx_local_4.pos
                    _hx_local_4.pos = (_hx_local_5 + 1)
                    _hx_local_5
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:274
                    n1 = self.readDigits()
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:275
                    python_internal_ArrayImpl._set(a, ((len(a) + n1) - 1), None)
                else:
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:277
                    x = self.unserialize()
                    a.append(x)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:279
            return a
        elif (_g == 98):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:336
            h1 = haxe_ds_StringMap()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:337
            self.cache.append(h1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:339
            while True:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:339
                p4 = self.pos
                s4 = self.buf
                if (not ((((-1 if ((p4 >= len(s4))) else ord(s4[p4]))) != 104))):
                    break
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:340
                s5 = self.unserialize()
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:341
                h1.h[s5] = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:343
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:343
            _hx_local_6 = self
            _hx_local_7 = _hx_local_6.pos
            _hx_local_6.pos = (_hx_local_7 + 1)
            _hx_local_7
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:344
            return h1
        elif (_g == 99):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:298
            name3 = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:299
            cl2 = self.resolver.resolveClass(name3)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:300
            if (cl2 is None):
                raise _HxException(("Class not found " + ("null" if name3 is None else name3)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:302
            o1 = Type.createEmptyInstance(cl2)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:303
            self.cache.append(o1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:304
            self.unserializeObject(o1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:305
            return o1
        elif (_g == 100):
            return self.readFloat()
        elif (_g == 102):
            return False
        elif (_g == 105):
            return self.readDigits()
        elif (_g == 106):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:315
            name4 = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:316
            edecl = self.resolver.resolveEnum(name4)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:317
            if (edecl is None):
                raise _HxException(("Enum not found " + ("null" if name4 is None else name4)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:319
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:319
            _hx_local_8 = self
            _hx_local_9 = _hx_local_8.pos
            _hx_local_8.pos = (_hx_local_9 + 1)
            _hx_local_9
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:320
            index = self.readDigits()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:321
            tag = python_internal_ArrayImpl._get(Type.getEnumConstructs(edecl), index)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:322
            if (tag is None):
                raise _HxException(((("Unknown enum index " + ("null" if name4 is None else name4)) + "@") + Std.string(index)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:324
            e1 = self.unserializeEnum(edecl,tag)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:325
            self.cache.append(e1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:326
            return e1
        elif (_g == 107):
            return Math.NaN
        elif (_g == 108):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:328
            l = List()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:329
            self.cache.append(l)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:331
            while True:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:331
                p5 = self.pos
                s6 = self.buf
                if (not ((((-1 if ((p5 >= len(s6))) else ord(s6[p5]))) != 104))):
                    break
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:332
                l.add(self.unserialize())
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:333
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:333
            _hx_local_10 = self
            _hx_local_11 = _hx_local_10.pos
            _hx_local_10.pos = (_hx_local_11 + 1)
            _hx_local_11
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:334
            return l
        elif (_g == 109):
            return Math.NEGATIVE_INFINITY
        elif (_g == 110):
            return None
        elif (_g == 111):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:281
            o2 = _hx_AnonObject({})
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:282
            self.cache.append(o2)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:283
            self.unserializeObject(o2)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:284
            return o2
        elif (_g == 112):
            return Math.POSITIVE_INFINITY
        elif (_g == 113):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:346
            h2 = haxe_ds_IntMap()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:347
            self.cache.append(h2)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:349
            p6 = self.pos
            self.pos = (self.pos + 1)
            s7 = self.buf
            c1 = (-1 if ((p6 >= len(s7))) else ord(s7[p6]))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:350
            while (c1 == 58):
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:352
                h2.set(self.readDigits(),self.unserialize())
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:353
                p7 = self.pos
                self.pos = (self.pos + 1)
                s8 = self.buf
                if (p7 >= len(s8)):
                    c1 = -1
                else:
                    c1 = ord(s8[p7])
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:355
            if (c1 != 104):
                raise _HxException("Invalid IntMap format")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:357
            return h2
        elif (_g == 114):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:286
            n2 = self.readDigits()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:287
            if ((n2 < 0) or ((n2 >= len(self.cache)))):
                raise _HxException("Invalid reference")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:289
            return (self.cache[n2] if n2 >= 0 and n2 < len(self.cache) else None)
        elif (_g == 115):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:384
            _hx_len = self.readDigits()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:385
            buf = self.buf
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:386
            tmp = None
            p8 = self.pos
            self.pos = (self.pos + 1)
            s9 = self.buf
            if (((-1 if ((p8 >= len(s9))) else ord(s9[p8]))) == 58):
                tmp = ((self.length - self.pos) < _hx_len)
            else:
                tmp = True
            if tmp:
                raise _HxException("Invalid bytes length")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:391
            codes = haxe_Unserializer.CODES
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:392
            if (codes is None):
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:393
                codes = haxe_Unserializer.initCodes()
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:394
                haxe_Unserializer.CODES = codes
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:396
            i = self.pos
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:397
            rest = (_hx_len & 3)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:398
            size = ((((_hx_len >> 2)) * 3) + (((rest - 1) if ((rest >= 2)) else 0)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:399
            _hx_max = (i + ((_hx_len - rest)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:400
            _hx_bytes = haxe_io_Bytes.alloc(size)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:401
            bpos = 0
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:402
            while (i < _hx_max):
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:403
                index1 = i
                i = (i + 1)
                c11 = python_internal_ArrayImpl._get(codes, (-1 if ((index1 >= len(buf))) else ord(buf[index1])))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:404
                index2 = i
                i = (i + 1)
                c2 = python_internal_ArrayImpl._get(codes, (-1 if ((index2 >= len(buf))) else ord(buf[index2])))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:405
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:405
                pos = bpos
                bpos = (bpos + 1)
                _hx_bytes.b[pos] = ((((c11 << 2) | ((c2 >> 4)))) & 255)
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:406
                index3 = i
                i = (i + 1)
                c3 = python_internal_ArrayImpl._get(codes, (-1 if ((index3 >= len(buf))) else ord(buf[index3])))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:407
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:407
                pos1 = bpos
                bpos = (bpos + 1)
                _hx_bytes.b[pos1] = ((((c2 << 4) | ((c3 >> 2)))) & 255)
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:408
                index4 = i
                i = (i + 1)
                tmp1 = (-1 if ((index4 >= len(buf))) else ord(buf[index4]))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:409
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:409
                pos2 = bpos
                bpos = (bpos + 1)
                _hx_bytes.b[pos2] = ((((c3 << 6) | (codes[tmp1] if tmp1 >= 0 and tmp1 < len(codes) else None))) & 255)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:411
            if (rest >= 2):
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:412
                index5 = i
                i = (i + 1)
                c12 = python_internal_ArrayImpl._get(codes, (-1 if ((index5 >= len(buf))) else ord(buf[index5])))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:413
                index6 = i
                i = (i + 1)
                c21 = python_internal_ArrayImpl._get(codes, (-1 if ((index6 >= len(buf))) else ord(buf[index6])))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:414
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:414
                pos3 = bpos
                bpos = (bpos + 1)
                _hx_bytes.b[pos3] = ((((c12 << 2) | ((c21 >> 4)))) & 255)
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:415
                if (rest == 3):
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:416
                    index7 = i
                    i = (i + 1)
                    tmp2 = (-1 if ((index7 >= len(buf))) else ord(buf[index7]))
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:417
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:417
                    pos4 = bpos
                    bpos = (bpos + 1)
                    _hx_bytes.b[pos4] = ((((c21 << 4) | (((codes[tmp2] if tmp2 >= 0 and tmp2 < len(codes) else None) >> 2)))) & 255)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:421
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:421
            _hx_local_12 = self
            _hx_local_13 = _hx_local_12.pos
            _hx_local_12.pos = (_hx_local_13 + _hx_len)
            _hx_local_12.pos
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:422
            self.cache.append(_hx_bytes)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:423
            return _hx_bytes
        elif (_g == 116):
            return True
        elif (_g == 118):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:369
            d = None
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:370
            tmp3 = None
            tmp4 = None
            tmp5 = None
            tmp6 = None
            tmp7 = None
            tmp8 = None
            tmp9 = None
            tmp10 = None
            p9 = self.pos
            s10 = self.buf
            if (((-1 if ((p9 >= len(s10))) else ord(s10[p9]))) >= 48):
                p10 = self.pos
                s11 = self.buf
                tmp10 = (((-1 if ((p10 >= len(s11))) else ord(s11[p10]))) <= 57)
            else:
                tmp10 = False
            if tmp10:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:371
                p11 = (self.pos + 1)
                s12 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:370
                tmp9 = (((-1 if ((p11 >= len(s12))) else ord(s12[p11]))) >= 48)
            else:
                tmp9 = False
            if tmp9:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:371
                p12 = (self.pos + 1)
                s13 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:370
                tmp8 = (((-1 if ((p12 >= len(s13))) else ord(s13[p12]))) <= 57)
            else:
                tmp8 = False
            if tmp8:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:372
                p13 = (self.pos + 2)
                s14 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:370
                tmp7 = (((-1 if ((p13 >= len(s14))) else ord(s14[p13]))) >= 48)
            else:
                tmp7 = False
            if tmp7:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:372
                p14 = (self.pos + 2)
                s15 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:370
                tmp6 = (((-1 if ((p14 >= len(s15))) else ord(s15[p14]))) <= 57)
            else:
                tmp6 = False
            if tmp6:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:373
                p15 = (self.pos + 3)
                s16 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:370
                tmp5 = (((-1 if ((p15 >= len(s16))) else ord(s16[p15]))) >= 48)
            else:
                tmp5 = False
            if tmp5:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:373
                p16 = (self.pos + 3)
                s17 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:370
                tmp4 = (((-1 if ((p16 >= len(s17))) else ord(s17[p16]))) <= 57)
            else:
                tmp4 = False
            if tmp4:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:374
                p17 = (self.pos + 4)
                s18 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:370
                tmp3 = (((-1 if ((p17 >= len(s18))) else ord(s18[p17]))) == 45)
            else:
                tmp3 = False
            if tmp3:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:377
                d = Date.fromString(HxString.substr(self.buf,self.pos,19))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:378
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:378
                _hx_local_14 = self
                _hx_local_15 = _hx_local_14.pos
                _hx_local_14.pos = (_hx_local_15 + 19)
                _hx_local_14.pos
            else:
                d = Date.fromTime(self.readFloat())
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:381
            self.cache.append(d)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:382
            return d
        elif (_g == 119):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:307
            name5 = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:308
            edecl1 = self.resolver.resolveEnum(name5)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:309
            if (edecl1 is None):
                raise _HxException(("Enum not found " + ("null" if name5 is None else name5)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:311
            e2 = self.unserializeEnum(edecl1,self.unserialize())
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:312
            self.cache.append(e2)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:313
            return e2
        elif (_g == 120):
            raise _HxException(self.unserialize())
        elif (_g == 121):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:248
            len1 = self.readDigits()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:249
            tmp11 = None
            p18 = self.pos
            self.pos = (self.pos + 1)
            s19 = self.buf
            if (((-1 if ((p18 >= len(s19))) else ord(s19[p18]))) == 58):
                tmp11 = ((self.length - self.pos) < len1)
            else:
                tmp11 = True
            if tmp11:
                raise _HxException("Invalid string length")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:251
            s20 = HxString.substr(self.buf,self.pos,len1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:252
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:252
            _hx_local_16 = self
            _hx_local_17 = _hx_local_16.pos
            _hx_local_16.pos = (_hx_local_17 + len1)
            _hx_local_16.pos
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:253
            s20 = python_lib_urllib_Parse.unquote(s20)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:254
            self.scache.append(s20)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:255
            return s20
        elif (_g == 122):
            return 0
        else:
            pass
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:449
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:449
        _hx_local_18 = self
        _hx_local_19 = _hx_local_18.pos
        _hx_local_18.pos = (_hx_local_19 - 1)
        _hx_local_19
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:450
        _this = self.buf
        index8 = self.pos
        raise _HxException(((("Invalid char " + HxOverrides.stringOrNull((("" if (((index8 < 0) or ((index8 >= len(_this))))) else _this[index8])))) + " at position ") + Std.string(self.pos)))

    @staticmethod
    def initCodes():
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:71
        codes = list()
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:77
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:77
        _g1 = 0
        _g = len(haxe_Unserializer.BASE64)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:78
            s = haxe_Unserializer.BASE64
            python_internal_ArrayImpl._set(codes, (-1 if ((i >= len(s))) else ord(s[i])), i)
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:79
        return codes

    @staticmethod
    def run(v):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:461
        return haxe_Unserializer(v).unserialize()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.buf = None
        _hx_o.pos = None
        _hx_o.length = None
        _hx_o.cache = None
        _hx_o.scache = None
        _hx_o.resolver = None
haxe_Unserializer._hx_class = haxe_Unserializer
_hx_classes["haxe.Unserializer"] = haxe_Unserializer


class User(sys_db_Object):
    _hx_class_name = "User"
    __slots__ = ("id", "name", "birthday", "phoneNumber")
    _hx_fields = ["id", "name", "birthday", "phoneNumber"]
    _hx_methods = ["__getManager"]
    _hx_statics = ["__meta__", "manager"]
    _hx_interfaces = []
    _hx_super = sys_db_Object


    def __init__(self):
        # src/User.hx:7
        self.phoneNumber = None
        # src/User.hx:6
        self.birthday = None
        # src/User.hx:5
        self.name = None
        # src/User.hx:4
        self.id = None
        # src/User.hx:3
        super().__init__()

    def _hx___getManager(self):
        # /usr/local/lib/haxe/std/sys/db/RecordMacros.hx:1412
        return User.manager

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.id = None
        _hx_o.name = None
        _hx_o.birthday = None
        _hx_o.phoneNumber = None
User._hx_class = User
_hx_classes["User"] = User


class haxe_Serializer:
    _hx_class_name = "haxe.Serializer"
    __slots__ = ("buf", "cache", "shash", "scount", "useCache", "useEnumIndex")
    _hx_fields = ["buf", "cache", "shash", "scount", "useCache", "useEnumIndex"]
    _hx_methods = ["toString", "serializeString", "serializeRef", "serializeFields", "serialize"]
    _hx_statics = ["USE_CACHE", "USE_ENUM_INDEX", "BASE64", "BASE64_CODES"]

    def __init__(self):
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:102
        self.buf = StringBuf()
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:103
        self.cache = list()
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:104
        self.useCache = haxe_Serializer.USE_CACHE
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:105
        self.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:106
        self.shash = haxe_ds_StringMap()
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:107
        self.scount = 0

    def toString(self):
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:117
        return self.buf.b.getvalue()

    def serializeString(self,s):
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:154
        x = self.shash.h.get(s,None)
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:155
        if (x is not None):
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:156
            self.buf.b.write("R")
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:157
            self.buf.b.write(Std.string(x))
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:158
            return
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:160
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:160
        value = self.scount
        self.scount = (self.scount + 1)
        self.shash.h[s] = value
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:165
        self.buf.b.write("y")
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:166
        s = python_lib_urllib_Parse.quote(s,"")
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:167
        self.buf.b.write(Std.string(len(s)))
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:168
        self.buf.b.write(":")
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:169
        self.buf.b.write(Std.string(s))

    def serializeRef(self,v):
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:176
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:176
        _g1 = 0
        _g = len(self.cache)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:181
            if ((self.cache[i] if i >= 0 and i < len(self.cache) else None) == v):
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:183
                self.buf.b.write("r")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:184
                self.buf.b.write(Std.string(i))
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:185
                return True
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:188
        self.cache.append(v)
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:189
        return False

    def serializeFields(self,v):
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:210
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:210
        _g = 0
        _g1 = python_Boot.fields(v)
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:211
            self.serializeString(f)
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:212
            self.serialize(Reflect.field(v,f))
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:214
        self.buf.b.write("g")

    def serialize(self,v):
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:228
        _g = Type.typeof(v)
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:230
        if ((_g.index) == 0):
            self.buf.b.write("n")
        elif ((_g.index) == 1):
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:232
            v1 = v
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:233
            if (v1 == 0):
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:234
                self.buf.b.write("z")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:235
                return
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:237
            self.buf.b.write("i")
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:238
            self.buf.b.write(Std.string(v1))
        elif ((_g.index) == 2):
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:240
            v2 = v
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:241
            if python_lib_Math.isnan(v2):
                self.buf.b.write("k")
            elif (not ((((v2 != Math.POSITIVE_INFINITY) and ((v2 != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(v2))))):
                self.buf.b.write(("m" if ((v2 < 0)) else "p"))
            else:
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:246
                self.buf.b.write("d")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:247
                self.buf.b.write(Std.string(v2))
        elif ((_g.index) == 3):
            self.buf.b.write(("t" if v else "f"))
        elif ((_g.index) == 4):
            if Std._hx_is(v,Class):
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:399
                className = Type.getClassName(v)
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:405
                self.buf.b.write("A")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:406
                self.serializeString(className)
            elif Std._hx_is(v,Enum):
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:408
                self.buf.b.write("B")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:409
                self.serializeString(Type.getEnumName(v))
            else:
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:411
                if (self.useCache and self.serializeRef(v)):
                    return
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:413
                self.buf.b.write("o")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:414
                self.serializeFields(v)
        elif ((_g.index) == 5):
            raise _HxException("Cannot serialize function")
        elif ((_g.index) == 6):
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:251
            c = _g.params[0]
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:252
            if (c == str):
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:253
                self.serializeString(v)
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:254
                return
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:256
            if (self.useCache and self.serializeRef(v)):
                return
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:258
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:258
            _g1 = Type.getClassName(c)
            _hx_local_0 = len(_g1)
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:318
            if (_hx_local_0 == 17):
                if (_g1 == "haxe.ds.ObjectMap"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:319
                    self.buf.b.write("M")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:320
                    v6 = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:321
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:321
                    tmp1 = v6.keys()
                    while tmp1.hasNext():
                        k1 = tmp1.next()
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:328
                        self.serialize(k1)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:330
                        self.serialize(v6.h.get(k1,None))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:332
                    self.buf.b.write("h")
                elif (_g1 == "haxe.ds.StringMap"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:302
                    self.buf.b.write("b")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:303
                    v7 = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:304
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:304
                    tmp2 = v7.keys()
                    while tmp2.hasNext():
                        k2 = tmp2.next()
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:305
                        self.serializeString(k2)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:306
                        self.serialize(v7.h.get(k2,None))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:308
                    self.buf.b.write("h")
                else:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                    if self.useCache:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                        _this = self.cache
                        if (len(_this) != 0):
                            _this.pop()
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:380
                    if hasattr(v,(("_hx_" + "hxSerialize") if (("hxSerialize" in python_Boot.keywords)) else (("_hx_" + "hxSerialize") if (((((len("hxSerialize") > 2) and ((ord("hxSerialize"[0]) == 95))) and ((ord("hxSerialize"[1]) == 95))) and ((ord("hxSerialize"[(len("hxSerialize") - 1)]) != 95)))) else "hxSerialize"))):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:381
                        self.buf.b.write("C")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:382
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                        if self.useCache:
                            self.cache.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:384
                        Reflect.field(v,"hxSerialize")(self)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:385
                        self.buf.b.write("g")
                    else:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:387
                        self.buf.b.write("c")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:388
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                        if self.useCache:
                            self.cache.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:393
                        self.serializeFields(v)
            elif (_hx_local_0 == 5):
                if (_g1 == "Array"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:260
                    ucount = 0
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:261
                    self.buf.b.write("a")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:263
                    v3 = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:265
                    l = len(v3)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:266
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:266
                    _g11 = 0
                    while (_g11 < l):
                        i = _g11
                        _g11 = (_g11 + 1)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:267
                        if ((v3[i] if i >= 0 and i < len(v3) else None) is None):
                            ucount = (ucount + 1)
                        else:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:270
                            if (ucount > 0):
                                # /usr/local/lib/haxe/std/haxe/Serializer.hx:271
                                if (ucount == 1):
                                    self.buf.b.write("n")
                                else:
                                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:274
                                    self.buf.b.write("u")
                                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:275
                                    self.buf.b.write(Std.string(ucount))
                                # /usr/local/lib/haxe/std/haxe/Serializer.hx:277
                                ucount = 0
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:279
                            self.serialize((v3[i] if i >= 0 and i < len(v3) else None))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:282
                    if (ucount > 0):
                        if (ucount == 1):
                            self.buf.b.write("n")
                        else:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:286
                            self.buf.b.write("u")
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:287
                            self.buf.b.write(Std.string(ucount))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:290
                    self.buf.b.write("h")
                else:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                    if self.useCache:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                        _this = self.cache
                        if (len(_this) != 0):
                            _this.pop()
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:380
                    if hasattr(v,(("_hx_" + "hxSerialize") if (("hxSerialize" in python_Boot.keywords)) else (("_hx_" + "hxSerialize") if (((((len("hxSerialize") > 2) and ((ord("hxSerialize"[0]) == 95))) and ((ord("hxSerialize"[1]) == 95))) and ((ord("hxSerialize"[(len("hxSerialize") - 1)]) != 95)))) else "hxSerialize"))):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:381
                        self.buf.b.write("C")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:382
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                        if self.useCache:
                            self.cache.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:384
                        Reflect.field(v,"hxSerialize")(self)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:385
                        self.buf.b.write("g")
                    else:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:387
                        self.buf.b.write("c")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:388
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                        if self.useCache:
                            self.cache.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:393
                        self.serializeFields(v)
            elif (_hx_local_0 == 4):
                if (_g1 == "Date"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:298
                    d = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:299
                    self.buf.b.write("v")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:300
                    self.buf.b.write(Std.string((python_lib_Time.mktime(d.date.timetuple()) * 1000)))
                elif (_g1 == "List"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:292
                    self.buf.b.write("l")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:293
                    v4 = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:294
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:294
                    _g_head = v4.h
                    while (_g_head is not None):
                        val = _g_head.item
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:227
                        _g_head = _g_head.next
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:295
                        self.serialize(val)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:296
                    self.buf.b.write("h")
                else:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                    if self.useCache:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                        _this = self.cache
                        if (len(_this) != 0):
                            _this.pop()
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:380
                    if hasattr(v,(("_hx_" + "hxSerialize") if (("hxSerialize" in python_Boot.keywords)) else (("_hx_" + "hxSerialize") if (((((len("hxSerialize") > 2) and ((ord("hxSerialize"[0]) == 95))) and ((ord("hxSerialize"[1]) == 95))) and ((ord("hxSerialize"[(len("hxSerialize") - 1)]) != 95)))) else "hxSerialize"))):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:381
                        self.buf.b.write("C")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:382
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                        if self.useCache:
                            self.cache.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:384
                        Reflect.field(v,"hxSerialize")(self)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:385
                        self.buf.b.write("g")
                    else:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:387
                        self.buf.b.write("c")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:388
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                        if self.useCache:
                            self.cache.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:393
                        self.serializeFields(v)
            elif (_hx_local_0 == 13):
                if (_g1 == "haxe.io.Bytes"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:334
                    v8 = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:343
                    self.buf.b.write("s")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:344
                    self.buf.b.write(Std.string(Math.ceil(((v8.length * 8) / 6))))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:345
                    self.buf.b.write(":")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:347
                    i1 = 0
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:348
                    _hx_max = (v8.length - 2)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:349
                    b64 = haxe_Serializer.BASE64_CODES
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:350
                    if (b64 is None):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:351
                        b64 = [None]*len(haxe_Serializer.BASE64)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:352
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:352
                        _g12 = 0
                        _g2 = len(haxe_Serializer.BASE64)
                        while (_g12 < _g2):
                            i2 = _g12
                            _g12 = (_g12 + 1)
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:353
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:353
                            val1 = HxString.charCodeAt(haxe_Serializer.BASE64,i2)
                            b64[i2] = val1
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:354
                        haxe_Serializer.BASE64_CODES = b64
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:356
                    while (i1 < _hx_max):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:357
                        pos = i1
                        i1 = (i1 + 1)
                        b1 = v8.b[pos]
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:358
                        pos1 = i1
                        i1 = (i1 + 1)
                        b2 = v8.b[pos1]
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:359
                        pos2 = i1
                        i1 = (i1 + 1)
                        b3 = v8.b[pos2]
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:361
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:361
                        c1 = b64[(b1 >> 2)]
                        self.buf.b.write("".join(map(chr,[c1])))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:362
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:362
                        c2 = b64[((((b1 << 4) | ((b2 >> 4)))) & 63)]
                        self.buf.b.write("".join(map(chr,[c2])))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:363
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:363
                        c3 = b64[((((b2 << 2) | ((b3 >> 6)))) & 63)]
                        self.buf.b.write("".join(map(chr,[c3])))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:364
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:364
                        c4 = b64[(b3 & 63)]
                        self.buf.b.write("".join(map(chr,[c4])))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:366
                    if (i1 == _hx_max):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:367
                        pos3 = i1
                        i1 = (i1 + 1)
                        b11 = v8.b[pos3]
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:368
                        pos4 = i1
                        i1 = (i1 + 1)
                        b21 = v8.b[pos4]
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:369
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:369
                        c5 = b64[(b11 >> 2)]
                        self.buf.b.write("".join(map(chr,[c5])))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:370
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:370
                        c6 = b64[((((b11 << 4) | ((b21 >> 4)))) & 63)]
                        self.buf.b.write("".join(map(chr,[c6])))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:371
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:371
                        c7 = b64[((b21 << 2) & 63)]
                        self.buf.b.write("".join(map(chr,[c7])))
                    elif (i1 == ((_hx_max + 1))):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:373
                        pos5 = i1
                        i1 = (i1 + 1)
                        b12 = v8.b[pos5]
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:374
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:374
                        c8 = b64[(b12 >> 2)]
                        self.buf.b.write("".join(map(chr,[c8])))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:375
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:375
                        c9 = b64[((b12 << 4) & 63)]
                        self.buf.b.write("".join(map(chr,[c9])))
                else:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                    if self.useCache:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                        _this = self.cache
                        if (len(_this) != 0):
                            _this.pop()
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:380
                    if hasattr(v,(("_hx_" + "hxSerialize") if (("hxSerialize" in python_Boot.keywords)) else (("_hx_" + "hxSerialize") if (((((len("hxSerialize") > 2) and ((ord("hxSerialize"[0]) == 95))) and ((ord("hxSerialize"[1]) == 95))) and ((ord("hxSerialize"[(len("hxSerialize") - 1)]) != 95)))) else "hxSerialize"))):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:381
                        self.buf.b.write("C")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:382
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                        if self.useCache:
                            self.cache.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:384
                        Reflect.field(v,"hxSerialize")(self)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:385
                        self.buf.b.write("g")
                    else:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:387
                        self.buf.b.write("c")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:388
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                        if self.useCache:
                            self.cache.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:393
                        self.serializeFields(v)
            elif (_hx_local_0 == 14):
                if (_g1 == "haxe.ds.IntMap"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:310
                    self.buf.b.write("q")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:311
                    v5 = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:312
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:312
                    tmp = v5.keys()
                    while tmp.hasNext():
                        k = tmp.next()
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:313
                        self.buf.b.write(":")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:314
                        self.buf.b.write(Std.string(k))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:315
                        self.serialize(v5.h.get(k,None))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:317
                    self.buf.b.write("h")
                else:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                    if self.useCache:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                        _this = self.cache
                        if (len(_this) != 0):
                            _this.pop()
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:380
                    if hasattr(v,(("_hx_" + "hxSerialize") if (("hxSerialize" in python_Boot.keywords)) else (("_hx_" + "hxSerialize") if (((((len("hxSerialize") > 2) and ((ord("hxSerialize"[0]) == 95))) and ((ord("hxSerialize"[1]) == 95))) and ((ord("hxSerialize"[(len("hxSerialize") - 1)]) != 95)))) else "hxSerialize"))):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:381
                        self.buf.b.write("C")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:382
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                        if self.useCache:
                            self.cache.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:384
                        Reflect.field(v,"hxSerialize")(self)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:385
                        self.buf.b.write("g")
                    else:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:387
                        self.buf.b.write("c")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:388
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                        if self.useCache:
                            self.cache.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:393
                        self.serializeFields(v)
            else:
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                if self.useCache:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                    _this = self.cache
                    if (len(_this) != 0):
                        _this.pop()
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:380
                if hasattr(v,(("_hx_" + "hxSerialize") if (("hxSerialize" in python_Boot.keywords)) else (("_hx_" + "hxSerialize") if (((((len("hxSerialize") > 2) and ((ord("hxSerialize"[0]) == 95))) and ((ord("hxSerialize"[1]) == 95))) and ((ord("hxSerialize"[(len("hxSerialize") - 1)]) != 95)))) else "hxSerialize"))):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:381
                    self.buf.b.write("C")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:382
                    self.serializeString(Type.getClassName(c))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                    if self.useCache:
                        self.cache.append(v)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:384
                    Reflect.field(v,"hxSerialize")(self)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:385
                    self.buf.b.write("g")
                else:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:387
                    self.buf.b.write("c")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:388
                    self.serializeString(Type.getClassName(c))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                    if self.useCache:
                        self.cache.append(v)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:393
                    self.serializeFields(v)
        elif ((_g.index) == 7):
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:417
            if self.useCache:
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:418
                if self.serializeRef(v):
                    return
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:420
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:420
                _this1 = self.cache
                if (len(_this1) != 0):
                    _this1.pop()
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:422
            self.buf.b.write(Std.string(("j" if (self.useEnumIndex) else "w")))
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:423
            self.serializeString(Type.getEnumName(_g.params[0]))
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:483
            if self.useEnumIndex:
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:484
                self.buf.b.write(":")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:485
                self.buf.b.write(Std.string(v.index))
            else:
                self.serializeString(v.tag)
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:488
            self.buf.b.write(":")
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:489
            arr = v.params
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:490
            if (arr is not None):
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:492
                self.buf.b.write(Std.string(len(arr)))
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:493
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:493
                _g3 = 0
                while (_g3 < len(arr)):
                    v9 = (arr[_g3] if _g3 >= 0 and _g3 < len(arr) else None)
                    _g3 = (_g3 + 1)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:494
                    self.serialize(v9)
            else:
                self.buf.b.write("0")
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:511
            if self.useCache:
                self.cache.append(v)
        else:
            raise _HxException(("Cannot serialize " + Std.string(v)))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.buf = None
        _hx_o.cache = None
        _hx_o.shash = None
        _hx_o.scount = None
        _hx_o.useCache = None
        _hx_o.useEnumIndex = None
haxe_Serializer._hx_class = haxe_Serializer
_hx_classes["haxe.Serializer"] = haxe_Serializer


class haxe_ds_IntMap:
    _hx_class_name = "haxe.ds.IntMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["set", "keys"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/IntMap.hx:31
        self.h = dict()

    def set(self,key,value):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/IntMap.hx:35
        self.h[key] = value

    def keys(self):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/IntMap.hx:54
        return python_HaxeIterator(iter(self.h.keys()))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.h = None
haxe_ds_IntMap._hx_class = haxe_ds_IntMap
_hx_classes["haxe.ds.IntMap"] = haxe_ds_IntMap


class haxe_ds_ObjectMap:
    _hx_class_name = "haxe.ds.ObjectMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["set", "keys"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/ObjectMap.hx:32
        self.h = dict()

    def set(self,key,value):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/ObjectMap.hx:36
        self.h[key] = value

    def keys(self):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/ObjectMap.hx:55
        return python_HaxeIterator(iter(self.h.keys()))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.h = None
haxe_ds_ObjectMap._hx_class = haxe_ds_ObjectMap
_hx_classes["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap


class haxe_io_Bytes:
    _hx_class_name = "haxe.io.Bytes"
    __slots__ = ("length", "b")
    _hx_fields = ["length", "b"]
    _hx_methods = ["compare", "getString", "toString"]
    _hx_statics = ["alloc", "ofString"]

    def __init__(self,length,b):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:34
        self.length = length
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:35
        self.b = b

    def compare(self,other):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:197
        b1 = self.b
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:198
        b2 = other.b
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:199
        _hx_len = (self.length if ((self.length < other.length)) else other.length)
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:200
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:200
        _g1 = 0
        _g = _hx_len
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:201
            if (b1[i] != b2[i]):
                return (b1[i] - b2[i])
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:203
        return (self.length - other.length)

    def getString(self,pos,_hx_len):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:362
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > self.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:382
        return self.b[pos:pos+_hx_len].decode('UTF-8','replace')

    def toString(self):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:440
        return self.getString(0,self.length)

    @staticmethod
    def alloc(length):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:480
        return haxe_io_Bytes(length, bytearray(length))

    @staticmethod
    def ofString(s):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:516
        b = bytearray(s, "UTF-8")
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:517
        return haxe_io_Bytes(len(b), b)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.length = None
        _hx_o.b = None
haxe_io_Bytes._hx_class = haxe_io_Bytes
_hx_classes["haxe.io.Bytes"] = haxe_io_Bytes


class haxe_io_Eof:
    _hx_class_name = "haxe.io.Eof"
    __slots__ = ()
    _hx_methods = ["toString"]

    def toString(self):
        # /usr/local/lib/haxe/std/haxe/io/Eof.hx:31
        return "Eof"

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
haxe_io_Eof._hx_class = haxe_io_Eof
_hx_classes["haxe.io.Eof"] = haxe_io_Eof

class haxe_io_Error(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Error"
    _hx_constructs = ["Blocked", "Overflow", "OutsideBounds", "Custom"]

    @staticmethod
    def Custom(e):
        return haxe_io_Error("Custom", 3, [e])
haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, list())
haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, list())
haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, list())
haxe_io_Error._hx_class = haxe_io_Error
_hx_classes["haxe.io.Error"] = haxe_io_Error


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        # /usr/local/lib/haxe/std/python/Boot.hx:94
        if (o is None):
            return "null"
        # /usr/local/lib/haxe/std/python/Boot.hx:96
        if isinstance(o,str):
            return o
        # /usr/local/lib/haxe/std/python/Boot.hx:98
        if (s is None):
            s = ""
        # /usr/local/lib/haxe/std/python/Boot.hx:99
        if (len(s) >= 5):
            return "<...>"
        # /usr/local/lib/haxe/std/python/Boot.hx:101
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        # /usr/local/lib/haxe/std/python/Boot.hx:104
        if isinstance(o,int):
            return str(o)
        # /usr/local/lib/haxe/std/python/Boot.hx:108
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        # /usr/local/lib/haxe/std/python/Boot.hx:120
        if isinstance(o,list):
            # /usr/local/lib/haxe/std/python/Boot.hx:122
            o1 = o
            # /usr/local/lib/haxe/std/python/Boot.hx:124
            l = len(o1)
            # /usr/local/lib/haxe/std/python/Boot.hx:126
            st = "["
            # /usr/local/lib/haxe/std/python/Boot.hx:127
            s = (("null" if s is None else s) + "\t")
            # /usr/local/lib/haxe/std/python/Boot.hx:128
            # /usr/local/lib/haxe/std/python/Boot.hx:128
            _g1 = 0
            _g = l
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                # /usr/local/lib/haxe/std/python/Boot.hx:129
                prefix = ""
                # /usr/local/lib/haxe/std/python/Boot.hx:130
                if (i > 0):
                    prefix = ","
                # /usr/local/lib/haxe/std/python/Boot.hx:133
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            # /usr/local/lib/haxe/std/python/Boot.hx:135
            st = (("null" if st is None else st) + "]")
            # /usr/local/lib/haxe/std/python/Boot.hx:136
            return st
        # /usr/local/lib/haxe/std/python/Boot.hx:139
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        # /usr/local/lib/haxe/std/python/Boot.hx:145
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        # /usr/local/lib/haxe/std/python/Boot.hx:147
        if hasattr(o,"__class__"):
            # /usr/local/lib/haxe/std/python/Boot.hx:150
            if isinstance(o,_hx_AnonObject):
                # /usr/local/lib/haxe/std/python/Boot.hx:152
                toStr = None
                # /usr/local/lib/haxe/std/python/Boot.hx:153
                try:
                    # /usr/local/lib/haxe/std/python/Boot.hx:155
                    fields = python_Boot.fields(o)
                    # /usr/local/lib/haxe/std/python/Boot.hx:156
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        tmp = (("" + ("null" if f is None else f)) + " : ")
                        tmp1 = python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))
                        _g2.append((("null" if tmp is None else tmp) + ("null" if tmp1 is None else tmp1)))
                    fieldsStr = _g2
                    # /usr/local/lib/haxe/std/python/Boot.hx:157
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                # /usr/local/lib/haxe/std/python/Boot.hx:163
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            # /usr/local/lib/haxe/std/python/Boot.hx:173
            if isinstance(o,Enum):
                # /usr/local/lib/haxe/std/python/Boot.hx:175
                o2 = o
                # /usr/local/lib/haxe/std/python/Boot.hx:177
                l1 = len(o2.params)
                # /usr/local/lib/haxe/std/python/Boot.hx:178
                hasParams = (l1 > 0)
                # /usr/local/lib/haxe/std/python/Boot.hx:179
                if hasParams:
                    # /usr/local/lib/haxe/std/python/Boot.hx:180
                    paramsStr = ""
                    # /usr/local/lib/haxe/std/python/Boot.hx:181
                    # /usr/local/lib/haxe/std/python/Boot.hx:181
                    _g12 = 0
                    _g3 = l1
                    while (_g12 < _g3):
                        i1 = _g12
                        _g12 = (_g12 + 1)
                        # /usr/local/lib/haxe/std/python/Boot.hx:182
                        prefix1 = ""
                        # /usr/local/lib/haxe/std/python/Boot.hx:183
                        if (i1 > 0):
                            prefix1 = ","
                        # /usr/local/lib/haxe/std/python/Boot.hx:186
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    # /usr/local/lib/haxe/std/python/Boot.hx:188
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            # /usr/local/lib/haxe/std/python/Boot.hx:194
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    # /usr/local/lib/haxe/std/python/Boot.hx:196
                    fields1 = python_Boot.getInstanceFields(o)
                    # /usr/local/lib/haxe/std/python/Boot.hx:197
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        tmp2 = (("" + ("null" if f1 is None else f1)) + " : ")
                        tmp3 = python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))
                        _g4.append((("null" if tmp2 is None else tmp2) + ("null" if tmp3 is None else tmp3)))
                    fieldsStr1 = _g4
                    # /usr/local/lib/haxe/std/python/Boot.hx:199
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    # /usr/local/lib/haxe/std/python/Boot.hx:200
                    return toStr1
                else:
                    # /usr/local/lib/haxe/std/python/Boot.hx:202
                    fields2 = python_Boot.getClassFields(o)
                    # /usr/local/lib/haxe/std/python/Boot.hx:203
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        tmp4 = (("" + ("null" if f2 is None else f2)) + " : ")
                        tmp5 = python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))
                        _g5.append((("null" if tmp4 is None else tmp4) + ("null" if tmp5 is None else tmp5)))
                    fieldsStr2 = _g5
                    # /usr/local/lib/haxe/std/python/Boot.hx:204
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    # /usr/local/lib/haxe/std/python/Boot.hx:205
                    return toStr2
            # /usr/local/lib/haxe/std/python/Boot.hx:209
            if (o == str):
                return "#String"
            # /usr/local/lib/haxe/std/python/Boot.hx:213
            if (o == list):
                return "#Array"
            # /usr/local/lib/haxe/std/python/Boot.hx:217
            if callable(o):
                return "function"
            # /usr/local/lib/haxe/std/python/Boot.hx:220
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            # /usr/local/lib/haxe/std/python/Boot.hx:226
            if hasattr(o,"__str__"):
                return o.__str__([])
            # /usr/local/lib/haxe/std/python/Boot.hx:230
            if hasattr(o,"__name__"):
                return o.__name__
            # /usr/local/lib/haxe/std/python/Boot.hx:233
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        # /usr/local/lib/haxe/std/python/Boot.hx:245
        a = []
        # /usr/local/lib/haxe/std/python/Boot.hx:246
        if (o is not None):
            # /usr/local/lib/haxe/std/python/Boot.hx:247
            if hasattr(o,"_hx_fields"):
                # /usr/local/lib/haxe/std/python/Boot.hx:248
                fields = o._hx_fields
                # /usr/local/lib/haxe/std/python/Boot.hx:249
                return list(fields)
            # /usr/local/lib/haxe/std/python/Boot.hx:251
            if isinstance(o,_hx_AnonObject):
                # /usr/local/lib/haxe/std/python/Boot.hx:253
                d = o.__dict__
                # /usr/local/lib/haxe/std/python/Boot.hx:254
                keys = d.keys()
                # /usr/local/lib/haxe/std/python/Boot.hx:255
                handler = python_Boot.unhandleKeywords
                # /usr/local/lib/haxe/std/python/Boot.hx:257
                for k in keys:
                # /usr/local/lib/haxe/std/python/Boot.hx:258
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                # /usr/local/lib/haxe/std/python/Boot.hx:262
                d1 = o.__dict__
                # /usr/local/lib/haxe/std/python/Boot.hx:263
                keys1 = d1.keys()
                # /usr/local/lib/haxe/std/python/Boot.hx:264
                for k in keys1:
                # /usr/local/lib/haxe/std/python/Boot.hx:265
                    a.append(k)
        # /usr/local/lib/haxe/std/python/Boot.hx:269
        return a

    @staticmethod
    def simpleField(o,field):
        # /usr/local/lib/haxe/std/python/Boot.hx:281
        if (field is None):
            return None
        # /usr/local/lib/haxe/std/python/Boot.hx:283
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        # /usr/local/lib/haxe/std/python/Boot.hx:284
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        # /usr/local/lib/haxe/std/python/Boot.hx:288
        if (field is None):
            return None
        # /usr/local/lib/haxe/std/python/Boot.hx:290
        # /usr/local/lib/haxe/std/python/Boot.hx:290
        _hx_local_0 = len(field)
        # /usr/local/lib/haxe/std/python/Boot.hx:295
        if (_hx_local_0 == 10):
            if (field == "charCodeAt"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:295
                    s1 = o
                    def _hx_local_1(a11):
                        return HxString.charCodeAt(s1,a11)
                    return _hx_local_1
        elif (_hx_local_0 == 11):
            if (field == "lastIndexOf"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:297
                    s3 = o
                    def _hx_local_2(a15):
                        return HxString.lastIndexOf(s3,a15)
                    return _hx_local_2
                elif isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:315
                    a4 = o
                    def _hx_local_3(x4):
                        return python_internal_ArrayImpl.lastIndexOf(a4,x4)
                    return _hx_local_3
            elif (field == "toLowerCase"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:292
                    s7 = o
                    def _hx_local_4():
                        return HxString.toLowerCase(s7)
                    return _hx_local_4
            elif (field == "toUpperCase"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:293
                    s9 = o
                    def _hx_local_5():
                        return HxString.toUpperCase(s9)
                    return _hx_local_5
        elif (_hx_local_0 == 9):
            if (field == "substring"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:300
                    s6 = o
                    def _hx_local_6(a19):
                        return HxString.substring(s6,a19)
                    return _hx_local_6
        elif (_hx_local_0 == 4):
            if (field == "copy"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:306
                    def _hx_local_7():
                        # /usr/local/lib/haxe/std/python/Boot.hx:306
                        return list(o)
                    return _hx_local_7
            elif (field == "join"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:309
                    def _hx_local_8(sep):
                        # /usr/local/lib/haxe/std/python/Boot.hx:309
                        return sep.join([python_Boot.toString1(x1,'') for x1 in o])
                    return _hx_local_8
            elif (field == "push"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:312
                    x7 = o
                    def _hx_local_9(e):
                        return python_internal_ArrayImpl.push(x7,e)
                    return _hx_local_9
            elif (field == "sort"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:320
                    x11 = o
                    def _hx_local_10(f2):
                        python_internal_ArrayImpl.sort(x11,f2)
                    return _hx_local_10
        elif (_hx_local_0 == 5):
            if (field == "shift"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:318
                    x9 = o
                    def _hx_local_11():
                        return python_internal_ArrayImpl.shift(x9)
                    return _hx_local_11
            elif (field == "slice"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:319
                    x10 = o
                    def _hx_local_12(a16):
                        return python_internal_ArrayImpl.slice(x10,a16)
                    return _hx_local_12
            elif (field == "split"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:298
                    s4 = o
                    def _hx_local_13(d):
                        return HxString.split(s4,d)
                    return _hx_local_13
        elif (_hx_local_0 == 7):
            if (field == "indexOf"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:296
                    s2 = o
                    def _hx_local_14(a13):
                        return HxString.indexOf(s2,a13)
                    return _hx_local_14
                elif isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:314
                    a = o
                    def _hx_local_15(x1):
                        return python_internal_ArrayImpl.indexOf(a,x1)
                    return _hx_local_15
            elif (field == "reverse"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:317
                    a5 = o
                    def _hx_local_16():
                        python_internal_ArrayImpl.reverse(a5)
                    return _hx_local_16
            elif (field == "unshift"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:313
                    x14 = o
                    def _hx_local_17(e2):
                        python_internal_ArrayImpl.unshift(x14,e2)
                    return _hx_local_17
        elif (_hx_local_0 == 3):
            if (field == "map"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:303
                    x5 = o
                    def _hx_local_18(f1):
                        return python_internal_ArrayImpl.map(x5,f1)
                    return _hx_local_18
            elif (field == "pop"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:311
                    x6 = o
                    def _hx_local_19():
                        return python_internal_ArrayImpl.pop(x6)
                    return _hx_local_19
        elif (_hx_local_0 == 8):
            if (field == "iterator"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:307
                    x3 = o
                    def _hx_local_20():
                        return python_internal_ArrayImpl.iterator(x3)
                    return _hx_local_20
            elif (field == "toString"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:301
                    s8 = o
                    def _hx_local_21():
                        return HxString.toString(s8)
                    return _hx_local_21
                elif isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:310
                    x13 = o
                    def _hx_local_22():
                        return python_internal_ArrayImpl.toString(x13)
                    return _hx_local_22
        elif (_hx_local_0 == 6):
            if (field == "charAt"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:294
                    s = o
                    def _hx_local_23(a1):
                        return HxString.charAt(s,a1)
                    return _hx_local_23
            elif (field == "concat"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:305
                    a12 = o
                    def _hx_local_24(a2):
                        return python_internal_ArrayImpl.concat(a12,a2)
                    return _hx_local_24
            elif (field == "filter"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:304
                    x = o
                    def _hx_local_25(f):
                        return python_internal_ArrayImpl.filter(x,f)
                    return _hx_local_25
            elif (field == "insert"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:308
                    a3 = o
                    def _hx_local_26(a14,x2):
                        python_internal_ArrayImpl.insert(a3,a14,x2)
                    return _hx_local_26
            elif (field == "length"):
                if isinstance(o,str):
                    return len(o)
                elif isinstance(o,list):
                    return len(o)
            elif (field == "remove"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:316
                    x8 = o
                    def _hx_local_27(e1):
                        return python_internal_ArrayImpl.remove(x8,e1)
                    return _hx_local_27
            elif (field == "splice"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:321
                    x12 = o
                    def _hx_local_28(a17,a21):
                        return python_internal_ArrayImpl.splice(x12,a17,a21)
                    return _hx_local_28
            elif (field == "substr"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:299
                    s5 = o
                    def _hx_local_29(a18):
                        return HxString.substr(s5,a18)
                    return _hx_local_29
        else:
            pass
        # /usr/local/lib/haxe/std/python/Boot.hx:325
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        # /usr/local/lib/haxe/std/python/Boot.hx:326
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        # /usr/local/lib/haxe/std/python/Boot.hx:331
        f = (c._hx_fields if (hasattr(c,"_hx_fields")) else [])
        # /usr/local/lib/haxe/std/python/Boot.hx:332
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        # /usr/local/lib/haxe/std/python/Boot.hx:335
        sc = python_Boot.getSuperClass(c)
        # /usr/local/lib/haxe/std/python/Boot.hx:337
        if (sc is None):
            return f
        else:
            # /usr/local/lib/haxe/std/python/Boot.hx:341
            scArr = python_Boot.getInstanceFields(sc)
            # /usr/local/lib/haxe/std/python/Boot.hx:342
            scMap = set(scArr)
            # /usr/local/lib/haxe/std/python/Boot.hx:345
            # /usr/local/lib/haxe/std/python/Boot.hx:345
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                # /usr/local/lib/haxe/std/python/Boot.hx:346
                if (not (f1 in scMap)):
                    scArr.append(f1)
            # /usr/local/lib/haxe/std/python/Boot.hx:351
            return scArr

    @staticmethod
    def getSuperClass(c):
        # /usr/local/lib/haxe/std/python/Boot.hx:356
        if (c is None):
            return None
        # /usr/local/lib/haxe/std/python/Boot.hx:359
        try:
            # /usr/local/lib/haxe/std/python/Boot.hx:360
            if hasattr(c,"_hx_super"):
                return c._hx_super
            # /usr/local/lib/haxe/std/python/Boot.hx:363
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        # /usr/local/lib/haxe/std/python/Boot.hx:367
        return None

    @staticmethod
    def getClassFields(c):
        # /usr/local/lib/haxe/std/python/Boot.hx:372
        if hasattr(c,"_hx_statics"):
            # /usr/local/lib/haxe/std/python/Boot.hx:373
            x = c._hx_statics
            # /usr/local/lib/haxe/std/python/Boot.hx:374
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        # /usr/local/lib/haxe/std/python/Boot.hx:398
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            # /usr/local/lib/haxe/std/python/Boot.hx:399
            real = HxString.substr(name,python_Boot.prefixLength,None)
            # /usr/local/lib/haxe/std/python/Boot.hx:400
            if (real in python_Boot.keywords):
                return real
        # /usr/local/lib/haxe/std/python/Boot.hx:402
        return name
python_Boot._hx_class = python_Boot
_hx_classes["python.Boot"] = python_Boot


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "iterator", "indexOf", "lastIndexOf", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get", "_set"]

    @staticmethod
    def concat(a1,a2):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:35
        return (a1 + a2)

    @staticmethod
    def iterator(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:45
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:50
        _hx_len = len(a)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:51
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:55
        if (l < 0):
            l = 0
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:56
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:56
        _g1 = l
        while (_g1 < _hx_len):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:57
            if (a[i] == x):
                return i
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:59
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:64
        _hx_len = len(a)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:65
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:69
        if (l > _hx_len):
            l = _hx_len
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:70
        while True:
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:70
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:71
            if (a[l] == x):
                return l
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:73
        return -1

    @staticmethod
    def toString(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:84
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:89
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:94
        x.append(e)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:95
        return len(x)

    @staticmethod
    def unshift(x,e):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:100
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:105
        try:
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:106
            x.remove(e)
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:107
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:115
        if (len(x) == 0):
            return None
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:116
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:121
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:125
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:130
        if (pos < 0):
            pos = (len(x) + pos)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:131
        if (pos < 0):
            pos = 0
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:132
        res = x[pos:(pos + _hx_len)]
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:133
        del x[pos:(pos + _hx_len)]
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:134
        return res

    @staticmethod
    def map(x,f):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:139
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:144
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:149
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:153
        a.reverse()

    @staticmethod
    def _get(x,idx):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:158
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None

    @staticmethod
    def _set(x,idx,v):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:163
        l = len(x)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:164
        while (l < idx):
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:165
            x.append(None)
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:166
            l = (l + 1)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:168
        if (l == idx):
            x.append(v)
        else:
            x[idx] = v
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:173
        return v
python_internal_ArrayImpl._hx_class = python_internal_ArrayImpl
_hx_classes["python.internal.ArrayImpl"] = python_internal_ArrayImpl


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = Exception


    def __init__(self,val):
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:28
        self.val = None
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:32
        super().__init__(str(val))
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:33
        self.val = val

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.val = None
_HxException._hx_class = _HxException
_hx_classes["_HxException"] = _HxException


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "toLowerCase"]

    @staticmethod
    def eq(a,b):
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:46
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:49
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:53
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def toLowerCase(x):
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:114
        if isinstance(x,str):
            return x.lower()
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:117
        return x.toLowerCase()
HxOverrides._hx_class = HxOverrides
_hx_classes["HxOverrides"] = HxOverrides


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:31
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:37
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:43
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:48
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:52
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:53
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:54
            check = s.find(_hx_str, startLeft, len(s))
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:55
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:65
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:69
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:73
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:80
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:96
        if (startIndex < 0):
            startIndex = 0
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:97
        if (endIndex is None):
            return s[startIndex:]
        else:
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:100
            if (endIndex < 0):
                endIndex = 0
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:101
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:112
        if (_hx_len is None):
            return s[startIndex:]
        else:
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:115
            if (_hx_len == 0):
                return ""
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:116
            return s[startIndex:(startIndex + _hx_len)]
HxString._hx_class = HxString
_hx_classes["HxString"] = HxString


class sys_db_Connection:
    _hx_class_name = "sys.db.Connection"
    __slots__ = ()
    _hx_methods = ["request", "addValue", "lastInsertId", "dbName"]
sys_db_Connection._hx_class = sys_db_Connection
_hx_classes["sys.db.Connection"] = sys_db_Connection

class sys_db_RecordType(Enum):
    __slots__ = ()
    _hx_class_name = "sys.db.RecordType"
    _hx_constructs = ["DId", "DInt", "DUId", "DUInt", "DBigId", "DBigInt", "DSingle", "DFloat", "DBool", "DString", "DDate", "DDateTime", "DTimeStamp", "DTinyText", "DSmallText", "DText", "DSmallBinary", "DLongBinary", "DBinary", "DBytes", "DEncoded", "DSerialized", "DNekoSerialized", "DFlags", "DTinyInt", "DTinyUInt", "DSmallInt", "DSmallUInt", "DMediumInt", "DMediumUInt", "DData", "DEnum", "DInterval", "DNull"]

    @staticmethod
    def DString(n):
        return sys_db_RecordType("DString", 9, [n])

    @staticmethod
    def DBytes(n):
        return sys_db_RecordType("DBytes", 19, [n])

    @staticmethod
    def DFlags(flags,autoSize):
        return sys_db_RecordType("DFlags", 23, [flags,autoSize])

    @staticmethod
    def DEnum(name):
        return sys_db_RecordType("DEnum", 31, [name])
sys_db_RecordType.DId = sys_db_RecordType("DId", 0, list())
sys_db_RecordType.DInt = sys_db_RecordType("DInt", 1, list())
sys_db_RecordType.DUId = sys_db_RecordType("DUId", 2, list())
sys_db_RecordType.DUInt = sys_db_RecordType("DUInt", 3, list())
sys_db_RecordType.DBigId = sys_db_RecordType("DBigId", 4, list())
sys_db_RecordType.DBigInt = sys_db_RecordType("DBigInt", 5, list())
sys_db_RecordType.DSingle = sys_db_RecordType("DSingle", 6, list())
sys_db_RecordType.DFloat = sys_db_RecordType("DFloat", 7, list())
sys_db_RecordType.DBool = sys_db_RecordType("DBool", 8, list())
sys_db_RecordType.DDate = sys_db_RecordType("DDate", 10, list())
sys_db_RecordType.DDateTime = sys_db_RecordType("DDateTime", 11, list())
sys_db_RecordType.DTimeStamp = sys_db_RecordType("DTimeStamp", 12, list())
sys_db_RecordType.DTinyText = sys_db_RecordType("DTinyText", 13, list())
sys_db_RecordType.DSmallText = sys_db_RecordType("DSmallText", 14, list())
sys_db_RecordType.DText = sys_db_RecordType("DText", 15, list())
sys_db_RecordType.DSmallBinary = sys_db_RecordType("DSmallBinary", 16, list())
sys_db_RecordType.DLongBinary = sys_db_RecordType("DLongBinary", 17, list())
sys_db_RecordType.DBinary = sys_db_RecordType("DBinary", 18, list())
sys_db_RecordType.DEncoded = sys_db_RecordType("DEncoded", 20, list())
sys_db_RecordType.DSerialized = sys_db_RecordType("DSerialized", 21, list())
sys_db_RecordType.DNekoSerialized = sys_db_RecordType("DNekoSerialized", 22, list())
sys_db_RecordType.DTinyInt = sys_db_RecordType("DTinyInt", 24, list())
sys_db_RecordType.DTinyUInt = sys_db_RecordType("DTinyUInt", 25, list())
sys_db_RecordType.DSmallInt = sys_db_RecordType("DSmallInt", 26, list())
sys_db_RecordType.DSmallUInt = sys_db_RecordType("DSmallUInt", 27, list())
sys_db_RecordType.DMediumInt = sys_db_RecordType("DMediumInt", 28, list())
sys_db_RecordType.DMediumUInt = sys_db_RecordType("DMediumUInt", 29, list())
sys_db_RecordType.DData = sys_db_RecordType("DData", 30, list())
sys_db_RecordType.DInterval = sys_db_RecordType("DInterval", 32, list())
sys_db_RecordType.DNull = sys_db_RecordType("DNull", 33, list())
sys_db_RecordType._hx_class = sys_db_RecordType
_hx_classes["sys.db.RecordType"] = sys_db_RecordType


class sys_db_ResultSet:
    _hx_class_name = "sys.db.ResultSet"
    __slots__ = ()
    _hx_methods = ["hasNext", "next"]
sys_db_ResultSet._hx_class = sys_db_ResultSet
_hx_classes["sys.db.ResultSet"] = sys_db_ResultSet


class sys_db_Sqlite:
    _hx_class_name = "sys.db.Sqlite"
    __slots__ = ()
    _hx_statics = ["open"]

    @staticmethod
    def open(file):
        # /usr/local/lib/haxe/std/sys/db/Sqlite.hx:27
        raise _HxException("Not implemented for this platform")
sys_db_Sqlite._hx_class = sys_db_Sqlite
_hx_classes["sys.db.Sqlite"] = sys_db_Sqlite

# /usr/local/lib/haxe/std/python/_std/Math.hx:135
Math.NEGATIVE_INFINITY = float("-inf")
# /usr/local/lib/haxe/std/python/_std/Math.hx:136
Math.POSITIVE_INFINITY = float("inf")
# /usr/local/lib/haxe/std/python/_std/Math.hx:137
Math.NaN = float("nan")
# /usr/local/lib/haxe/std/python/_std/Math.hx:138
Math.PI = python_lib_Math.pi

Date.EPOCH_UTC = python_lib_datetime_Datetime.fromtimestamp(0,python_lib_datetime_Timezone.utc)
sys_db_Manager.object_cache = haxe_ds_StringMap()
def _hx_init_sys_db_Manager_KEYWORDS():
    # /usr/local/lib/haxe/std/sys/db/Manager.hx:43
    def _hx_local_0():
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:44
        h = haxe_ds_StringMap()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:45
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:45
        _g = 0
        _g1 = "ADD|ALL|ALTER|ANALYZE|AND|AS|ASC|ASENSITIVE|BEFORE|BETWEEN|BIGINT|BINARY|BLOB|BOTH|BY|CALL|CASCADE|CASE|CHANGE|CHAR|CHARACTER|CHECK|COLLATE|COLUMN|CONDITION|CONSTRAINT|CONTINUE|CONVERT|CREATE|CROSS|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DATABASES|DAY_HOUR|DAY_MICROSECOND|DAY_MINUTE|DAY_SECOND|DEC|DECIMAL|DECLARE|DEFAULT|DELAYED|DELETE|DESC|DESCRIBE|DETERMINISTIC|DISTINCT|DISTINCTROW|DIV|DOUBLE|DROP|DUAL|EACH|ELSE|ELSEIF|ENCLOSED|ESCAPED|EXISTS|EXIT|EXPLAIN|FALSE|FETCH|FLOAT|FLOAT4|FLOAT8|FOR|FORCE|FOREIGN|FROM|FULLTEXT|GRANT|GROUP|HAVING|HIGH_PRIORITY|HOUR_MICROSECOND|HOUR_MINUTE|HOUR_SECOND|IF|IGNORE|IN|INDEX|INFILE|INNER|INOUT|INSENSITIVE|INSERT|INT|INT1|INT2|INT3|INT4|INT8|INTEGER|INTERVAL|INTO|IS|ITERATE|JOIN|KEY|KEYS|KILL|LEADING|LEAVE|LEFT|LIKE|LIMIT|LINES|LOAD|LOCALTIME|LOCALTIMESTAMP|LOCK|LONG|LONGBLOB|LONGTEXT|LOOP|LOW_PRIORITY|MATCH|MEDIUMBLOB|MEDIUMINT|MEDIUMTEXT|MIDDLEINT|MINUTE_MICROSECOND|MINUTE_SECOND|MOD|MODIFIES|NATURAL|NOT|NO_WRITE_TO_BINLOG|NULL|NUMERIC|ON|OPTIMIZE|OPTION|OPTIONALLY|OR|ORDER|OUT|OUTER|OUTFILE|PRECISION|PRIMARY|PROCEDURE|PURGE|READ|READS|REAL|REFERENCES|REGEXP|RELEASE|RENAME|REPEAT|REPLACE|REQUIRE|RESTRICT|RETURN|REVOKE|RIGHT|RLIKE|SCHEMA|SCHEMAS|SECOND_MICROSECOND|SELECT|SENSITIVE|SEPARATOR|SET|SHOW|SMALLINT|SONAME|SPATIAL|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|SQL_BIG_RESULT|SQL_CALC_FOUND_ROWS|SQL_SMALL_RESULT|SSL|STARTING|STRAIGHT_JOIN|TABLE|TERMINATED|THEN|TINYBLOB|TINYINT|TINYTEXT|TO|TRAILING|TRIGGER|TRUE|UNDO|UNION|UNIQUE|UNLOCK|UNSIGNED|UPDATE|USAGE|USE|USING|UTC_DATE|UTC_TIME|UTC_TIMESTAMP|VALUES|VARBINARY|VARCHAR|VARCHARACTER|VARYING|WHEN|WHERE|WHILE|WITH|WRITE|XOR|YEAR_MONTH|ZEROFILL|ASENSITIVE|CALL|CONDITION|CONNECTION|CONTINUE|CURSOR|DECLARE|DETERMINISTIC|EACH|ELSEIF|EXIT|FETCH|GOTO|INOUT|INSENSITIVE|ITERATE|LABEL|LEAVE|LOOP|MODIFIES|OUT|READS|RELEASE|REPEAT|RETURN|SCHEMA|SCHEMAS|SENSITIVE|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|TRIGGER|UNDO|UPGRADE|WHILE".split("|")
        while (_g < len(_g1)):
            k = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:46
            h.h[k.lower()] = True
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:47
        return h
    return _hx_local_0()
sys_db_Manager.KEYWORDS = _hx_init_sys_db_Manager_KEYWORDS()
haxe_Unserializer.DEFAULT_RESOLVER = haxe__Unserializer_DefaultResolver()
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"
haxe_Unserializer.CODES = None
User.__meta__ = _hx_AnonObject({'obj': _hx_AnonObject({'rtti': ["oy4:namey4:Usery7:indexesahy9:relationsahy7:hfieldsby2:idoR0R5y6:isNullfy1:tjy17:sys.db.RecordType:0:0gR0oR0R0R6fR7jR8:9:1i32gy8:birthdayoR0R9R6fR7jR8:10:0gy11:phoneNumberoR0R10R6tR7jR8:15:0ghy3:keyaR5hy6:fieldsar4r6r8r10hg"]})})
User.manager = sys_db_Manager(User)
haxe_Serializer.USE_CACHE = False
haxe_Serializer.USE_ENUM_INDEX = False
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"
haxe_Serializer.BASE64_CODES = None
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

Main.main()