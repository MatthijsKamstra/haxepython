# Generated by Haxe 3.4.4
# coding: utf-8

from datetime import datetime as python_lib_datetime_Datetime
from datetime import timezone as python_lib_datetime_Timezone
import math as python_lib_Math
import math as Math
from os import path as python_lib_os_Path
import inspect as python_lib_Inspect
import functools as python_lib_Functools
import random as python_lib_Random
import sys as python_lib_Sys
import time as python_lib_Time
from io import StringIO as python_lib_io_StringIO
import urllib.parse as python_lib_urllib_Parse


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields


_hx_classes = {}


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:38
        self.tag = tag
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:39
        self.index = index
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:40
        self.params = params

    def __str__(self):
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:45
        if (self.params is None):
            return self.tag
        else:
            # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:48
            _this = self.params
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in _this]))) + ")")

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.tag = None
        _hx_o.index = None
        _hx_o.params = None
Enum._hx_class = Enum
_hx_classes["Enum"] = Enum


class Class:
    _hx_class_name = "Class"
Class._hx_class = Class
_hx_classes["Class"] = Class


class DBStart:
    _hx_class_name = "DBStart"
    __slots__ = ()
    _hx_methods = ["createRandomUser"]
    _hx_statics = ["FIRST_NAMES", "SUR_NAMES"]

    def __init__(self):
        # src/DBStart.hx:13
        cnx = sys_db_Sqlite.open("mybase.ddb")
        # src/DBStart.hx:16
        sys_db_Manager.set_cnx(cnx)
        # src/DBStart.hx:19
        sys_db_Manager.initialize()
        # src/DBStart.hx:22
        if (not sys_db_TableCreate.exists(User.manager)):
            sys_db_TableCreate.create(User.manager)
        # src/DBStart.hx:27
        # src/DBStart.hx:27
        _g = 0
        while (_g < 10):
            i = _g
            _g = (_g + 1)
            # src/DBStart.hx:28
            user = self.createRandomUser()
            # src/DBStart.hx:29
            user.insert()
        # src/DBStart.hx:33
        sys_db_Manager.cleanup()
        # src/DBStart.hx:36
        cnx.close()

    def createRandomUser(self):
        # src/DBStart.hx:45
        _name = DBStart.FIRST_NAMES
        x = len(DBStart.FIRST_NAMES)
        _name1 = None
        if (x <= 0):
            _name1 = 0
        else:
            x1 = (python_lib_Random.random() * x)
            try:
                _name1 = int(x1)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                _name1 = None
        _name2 = (HxOverrides.stringOrNull((_name[_name1] if _name1 >= 0 and _name1 < len(_name) else None)) + " ")
        _name3 = DBStart.SUR_NAMES
        x2 = len(DBStart.SUR_NAMES)
        _name4 = None
        if (x2 <= 0):
            _name4 = 0
        else:
            x3 = (python_lib_Random.random() * x2)
            try:
                _name4 = int(x3)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e1 = _hx_e1
                _name4 = None
        _name5 = (("null" if _name2 is None else _name2) + HxOverrides.stringOrNull((_name3[_name4] if _name4 >= 0 and _name4 < len(_name3) else None)))
        # src/DBStart.hx:46
        x4 = (python_lib_Random.random() * 10)
        _phone = None
        try:
            _phone = int(x4)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e2 = _hx_e1
            _phone = None
        _phone1 = ("020 - " + Std.string(_phone))
        x5 = (python_lib_Random.random() * 10)
        _phone2 = None
        try:
            _phone2 = int(x5)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e3 = _hx_e1
            _phone2 = None
        _phone3 = (("null" if _phone1 is None else _phone1) + Std.string(_phone2))
        x6 = (python_lib_Random.random() * 10)
        _phone4 = None
        try:
            _phone4 = int(x6)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e4 = _hx_e1
            _phone4 = None
        _phone5 = ((("null" if _phone3 is None else _phone3) + Std.string(_phone4)) + " ")
        x7 = (python_lib_Random.random() * 10)
        _phone6 = None
        try:
            _phone6 = int(x7)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e5 = _hx_e1
            _phone6 = None
        _phone7 = (("null" if _phone5 is None else _phone5) + Std.string(_phone6))
        x8 = (python_lib_Random.random() * 10)
        _phone8 = None
        try:
            _phone8 = int(x8)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e6 = _hx_e1
            _phone8 = None
        _phone9 = ((("null" if _phone7 is None else _phone7) + Std.string(_phone8)) + " ")
        x9 = (python_lib_Random.random() * 10)
        _phone10 = None
        try:
            _phone10 = int(x9)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e7 = _hx_e1
            _phone10 = None
        _phone11 = (("null" if _phone9 is None else _phone9) + Std.string(_phone10))
        x10 = (python_lib_Random.random() * 10)
        _phone12 = None
        try:
            _phone12 = int(x10)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e8 = _hx_e1
            _phone12 = None
        _phone13 = (("null" if _phone11 is None else _phone11) + Std.string(_phone12))
        # src/DBStart.hx:47
        x11 = (python_lib_Random.random() * 100)
        _birthday = None
        try:
            _birthday = int(x11)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e9 = _hx_e1
            _birthday = None
        _birthday1 = (_birthday + 1900)
        x12 = (python_lib_Random.random() * 12)
        _birthday2 = None
        try:
            _birthday2 = int(x12)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e10 = _hx_e1
            _birthday2 = None
        x13 = (python_lib_Random.random() * 30)
        _birthday3 = None
        try:
            _birthday3 = int(x13)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e11 = _hx_e1
            _birthday3 = None
        _birthday4 = Date(_birthday1,_birthday2,_birthday3,0,0,0)
        # src/DBStart.hx:48
        user = User()
        # src/DBStart.hx:49
        user.name = _name5
        # src/DBStart.hx:50
        user.phoneNumber = _phone13
        # src/DBStart.hx:51
        user.birthday = _birthday4
        # src/DBStart.hx:52
        return user

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
DBStart._hx_class = DBStart
_hx_classes["DBStart"] = DBStart


class Date:
    _hx_class_name = "Date"
    __slots__ = ("date",)
    _hx_fields = ["date"]
    _hx_methods = ["toString"]
    _hx_statics = ["EPOCH_UTC", "now", "fromTime", "UTC", "datetimeTimestamp", "fromString"]

    def __init__(self,year,month,day,hour,_hx_min,sec):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:34
        if (year < python_lib_datetime_Datetime.min.year):
            year = python_lib_datetime_Datetime.min.year
        # /usr/local/lib/haxe/std/python/_std/Date.hx:35
        if (day == 0):
            day = 1
        # /usr/local/lib/haxe/std/python/_std/Date.hx:36
        self.date = python_lib_datetime_Datetime(year,(month + 1),day,hour,_hx_min,sec,0)

    def toString(self):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:83
        m = ((self.date.month - 1) + 1)
        # /usr/local/lib/haxe/std/python/_std/Date.hx:84
        d = self.date.day
        # /usr/local/lib/haxe/std/python/_std/Date.hx:85
        h = self.date.hour
        # /usr/local/lib/haxe/std/python/_std/Date.hx:86
        mi = self.date.minute
        # /usr/local/lib/haxe/std/python/_std/Date.hx:87
        s = self.date.second
        # /usr/local/lib/haxe/std/python/_std/Date.hx:88
        return ((((((((((Std.string(self.date.year) + "-") + HxOverrides.stringOrNull(((("0" + Std.string(m)) if ((m < 10)) else ("" + Std.string(m)))))) + "-") + HxOverrides.stringOrNull(((("0" + Std.string(d)) if ((d < 10)) else ("" + Std.string(d)))))) + " ") + HxOverrides.stringOrNull(((("0" + Std.string(h)) if ((h < 10)) else ("" + Std.string(h)))))) + ":") + HxOverrides.stringOrNull(((("0" + Std.string(mi)) if ((mi < 10)) else ("" + Std.string(mi)))))) + ":") + HxOverrides.stringOrNull(((("0" + Std.string(s)) if ((s < 10)) else ("" + Std.string(s))))))

    @staticmethod
    def now():
        # /usr/local/lib/haxe/std/python/_std/Date.hx:98
        d = Date(1970,0,1,0,0,0)
        # /usr/local/lib/haxe/std/python/_std/Date.hx:99
        d.date = python_lib_datetime_Datetime.now()
        # /usr/local/lib/haxe/std/python/_std/Date.hx:100
        return d

    @staticmethod
    def fromTime(t):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:105
        d = Date(1970,0,1,0,0,0)
        # /usr/local/lib/haxe/std/python/_std/Date.hx:106
        d.date = python_lib_datetime_Datetime.fromtimestamp((t / 1000.0))
        # /usr/local/lib/haxe/std/python/_std/Date.hx:107
        return d

    @staticmethod
    def UTC(year,month,day,hour,_hx_min,sec):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:113
        dt = python_lib_datetime_Datetime(year,(month + 1),day,hour,_hx_min,sec,0,python_lib_datetime_Timezone.utc)
        # /usr/local/lib/haxe/std/python/_std/Date.hx:114
        return Date.datetimeTimestamp(dt,Date.EPOCH_UTC)

    @staticmethod
    def datetimeTimestamp(dt,epoch):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:119
        return ((dt - epoch).total_seconds() * 1000)

    @staticmethod
    def fromString(s):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:124
        _g = len(s)
        _g1 = _g
        # /usr/local/lib/haxe/std/python/_std/Date.hx:126
        if (_g1 == 8):
            # /usr/local/lib/haxe/std/python/_std/Date.hx:127
            k = s.split(":")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:128
            d = Date(0,0,0,Std.parseInt((k[0] if 0 < len(k) else None)),Std.parseInt((k[1] if 1 < len(k) else None)),Std.parseInt((k[2] if 2 < len(k) else None)))
            # /usr/local/lib/haxe/std/python/_std/Date.hx:129
            return d
        elif (_g1 == 10):
            # /usr/local/lib/haxe/std/python/_std/Date.hx:131
            k1 = s.split("-")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:132
            return Date(Std.parseInt((k1[0] if 0 < len(k1) else None)),(Std.parseInt((k1[1] if 1 < len(k1) else None)) - 1),Std.parseInt((k1[2] if 2 < len(k1) else None)),0,0,0)
        elif (_g1 == 19):
            # /usr/local/lib/haxe/std/python/_std/Date.hx:134
            k2 = s.split(" ")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:135
            _this = (k2[0] if 0 < len(k2) else None)
            y = _this.split("-")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:136
            _this1 = (k2[1] if 1 < len(k2) else None)
            t = _this1.split(":")
            # /usr/local/lib/haxe/std/python/_std/Date.hx:137
            return Date(Std.parseInt((y[0] if 0 < len(y) else None)),(Std.parseInt((y[1] if 1 < len(y) else None)) - 1),Std.parseInt((y[2] if 2 < len(y) else None)),Std.parseInt((t[0] if 0 < len(t) else None)),Std.parseInt((t[1] if 1 < len(t) else None)),Std.parseInt((t[2] if 2 < len(t) else None)))
        else:
            raise _HxException(("Invalid date format : " + ("null" if s is None else s)))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.date = None
Date._hx_class = Date
_hx_classes["Date"] = Date


class EnumValue:
    _hx_class_name = "EnumValue"
EnumValue._hx_class = EnumValue
_hx_classes["EnumValue"] = EnumValue


class Lambda:
    _hx_class_name = "Lambda"
    __slots__ = ()
    _hx_statics = ["map"]

    @staticmethod
    def map(it,f):
        # /usr/local/lib/haxe/std/Lambda.hx:71
        l = List()
        # /usr/local/lib/haxe/std/Lambda.hx:72
        # /usr/local/lib/haxe/std/Lambda.hx:72
        x = HxOverrides.iterator(it)
        while x.hasNext():
            x1 = x.next()
            # /usr/local/lib/haxe/std/Lambda.hx:73
            l.add(f(x1))
        # /usr/local/lib/haxe/std/Lambda.hx:74
        return l
Lambda._hx_class = Lambda
_hx_classes["Lambda"] = Lambda


class List:
    _hx_class_name = "List"
    __slots__ = ("h", "q", "length")
    _hx_fields = ["h", "q", "length"]
    _hx_methods = ["add", "iterator", "join"]

    def __init__(self):
        # /usr/local/lib/haxe/std/List.hx:33
        self.q = None
        # /usr/local/lib/haxe/std/List.hx:32
        self.h = None
        # /usr/local/lib/haxe/std/List.hx:44
        self.length = 0

    def add(self,item):
        # /usr/local/lib/haxe/std/List.hx:53
        x = _List_ListNode(item,None)
        # /usr/local/lib/haxe/std/List.hx:54
        if (self.h is None):
            self.h = x
        else:
            self.q.next = x
        # /usr/local/lib/haxe/std/List.hx:58
        self.q = x
        # /usr/local/lib/haxe/std/List.hx:59
        # /usr/local/lib/haxe/std/List.hx:59
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.length
        _hx_local_0.length = (_hx_local_1 + 1)
        _hx_local_1

    def iterator(self):
        # /usr/local/lib/haxe/std/List.hx:161
        return _List_ListIterator(self.h)

    def join(self,sep):
        # /usr/local/lib/haxe/std/List.hx:192
        s_b = python_lib_io_StringIO()
        # /usr/local/lib/haxe/std/List.hx:193
        first = True
        # /usr/local/lib/haxe/std/List.hx:194
        l = self.h
        # /usr/local/lib/haxe/std/List.hx:195
        while (l is not None):
            # /usr/local/lib/haxe/std/List.hx:196
            if first:
                first = False
            else:
                s_b.write(Std.string(sep))
            # /usr/local/lib/haxe/std/List.hx:200
            s_b.write(Std.string(l.item))
            # /usr/local/lib/haxe/std/List.hx:201
            l = l.next
        # /usr/local/lib/haxe/std/List.hx:203
        return s_b.getvalue()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.h = None
        _hx_o.q = None
        _hx_o.length = None
List._hx_class = List
_hx_classes["List"] = List


class _List_ListNode:
    _hx_class_name = "_List.ListNode"
    __slots__ = ("item", "next")
    _hx_fields = ["item", "next"]

    def __init__(self,item,next):
        # /usr/local/lib/haxe/std/List.hx:256
        self.item = item
        # /usr/local/lib/haxe/std/List.hx:257
        self.next = next

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.item = None
        _hx_o.next = None
_List_ListNode._hx_class = _List_ListNode
_hx_classes["_List.ListNode"] = _List_ListNode


class _List_ListIterator:
    _hx_class_name = "_List.ListIterator"
    __slots__ = ("head",)
    _hx_fields = ["head"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,head):
        # /usr/local/lib/haxe/std/List.hx:269
        self.head = head

    def hasNext(self):
        # /usr/local/lib/haxe/std/List.hx:273
        return (self.head is not None)

    def next(self):
        # /usr/local/lib/haxe/std/List.hx:277
        val = self.head.item
        # /usr/local/lib/haxe/std/List.hx:278
        self.head = self.head.next
        # /usr/local/lib/haxe/std/List.hx:279
        return val

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.head = None
_List_ListIterator._hx_class = _List_ListIterator
_hx_classes["_List.ListIterator"] = _List_ListIterator


class Main:
    _hx_class_name = "Main"
    __slots__ = ()
    _hx_methods = ["createList"]
    _hx_statics = ["main"]

    def __init__(self):
        # src/Main.hx:22
        html = ""
        # src/Main.hx:24
        if (not sys_FileSystem.exists("mybase.ddb")):
            DBStart()
        # src/Main.hx:29
        cnx = sys_db_Sqlite.open("mybase.ddb")
        # src/Main.hx:32
        sys_db_Manager.set_cnx(cnx)
        # src/Main.hx:35
        sys_db_Manager.initialize()
        # src/Main.hx:42
        self.createList()
        # src/Main.hx:45
        sys_db_Manager.cleanup()
        # src/Main.hx:48
        cnx.close()

    def createList(self):
        # src/Main.hx:54
        html = ""
        # src/Main.hx:55
        html = (("null" if html is None else html) + "id \t|\t name \t|\t birthday \t|\t phoneNumber\n")
        # src/Main.hx:56
        html = (("null" if html is None else html) + "---------------------------------------------\n")
        # src/Main.hx:57
        # src/Main.hx:57
        _g1 = 0
        _g = User.manager.all().length
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # src/Main.hx:59
            _user = User.manager.unsafeGet(i,True)
            # src/Main.hx:60
            if (_user is None):
                continue
            # src/Main.hx:61
            html = (("null" if html is None else html) + HxOverrides.stringOrNull(((("" + Std.string(_user.id)) + " \t|\t "))))
            # src/Main.hx:62
            html = (("null" if html is None else html) + HxOverrides.stringOrNull(((("" + HxOverrides.stringOrNull(_user.name)) + " \t|\t "))))
            # src/Main.hx:63
            html = (("null" if html is None else html) + ((("" + Std.string(_user.birthday)) + " \t|\t ")))
            # src/Main.hx:64
            html = (("null" if html is None else html) + HxOverrides.stringOrNull(((("" + HxOverrides.stringOrNull(_user.phoneNumber)) + " \n "))))
        # src/Main.hx:66
        html = (("null" if html is None else html) + "---------------------------------------------\n")
        # src/Main.hx:68
        python_Lib.print(html)

    @staticmethod
    def main():
        # src/Main.hx:74
        main = Main()

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
Main._hx_class = Main
_hx_classes["Main"] = Main


class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field", "setField", "callMethod", "isFunction", "deleteField"]

    @staticmethod
    def field(o,field):
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:44
        return python_Boot.field(o,field)

    @staticmethod
    def setField(o,field,value):
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:49
        setattr(o,(("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field)),value)

    @staticmethod
    def callMethod(o,func,args):
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:76
        if callable(func):
            return func(*args)
        else:
            return None

    @staticmethod
    def isFunction(f):
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:86
        if (not ((python_lib_Inspect.isfunction(f) or python_lib_Inspect.ismethod(f)))):
            return hasattr(f,"func_code")
        else:
            return True

    @staticmethod
    def deleteField(o,field):
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:117
        if (field in python_Boot.keywords):
            field = ("_hx_" + field)
        elif ((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95))):
            field = ("_hx_" + field)
        else:
            field = field
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:118
        if (not hasattr(o,(("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field)))):
            return False
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:119
        o.__delattr__(field)
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:120
        return True
Reflect._hx_class = Reflect
_hx_classes["Reflect"] = Reflect


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["is", "string", "parseInt", "shortenPossibleNumber", "parseFloat"]

    @staticmethod
    def _hx_is(v,t):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:51
        if ((v is None) and ((t is None))):
            return False
        # /usr/local/lib/haxe/std/python/_std/Std.hx:54
        if (t is None):
            return False
        # /usr/local/lib/haxe/std/python/_std/Std.hx:58
        if (t == Dynamic):
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:61
        isBool = isinstance(v,bool)
        # /usr/local/lib/haxe/std/python/_std/Std.hx:63
        if ((t == Bool) and isBool):
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:66
        if ((((not isBool) and (not (t == Bool))) and (t == Int)) and isinstance(v,int)):
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:69
        vIsFloat = isinstance(v,float)
        # /usr/local/lib/haxe/std/python/_std/Std.hx:71
        tmp = None
        tmp1 = None
        tmp2 = None
        tmp3 = None
        if (((not isBool) and vIsFloat) and (t == Int)):
            f = v
            if ((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))):
                tmp3 = (not python_lib_Math.isnan(f))
            else:
                tmp3 = False
        else:
            tmp3 = False
        if tmp3:
            tmp4 = None
            try:
                tmp4 = int(v)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                tmp4 = None
            tmp2 = (v == tmp4)
        else:
            tmp2 = False
        if tmp2:
            tmp1 = (v <= 2147483647)
        else:
            tmp1 = False
        if tmp1:
            tmp = (v >= -2147483648)
        else:
            tmp = False
        if tmp:
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:76
        if (((not isBool) and (t == Float)) and isinstance(v,(float, int))):
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:80
        if (t == str):
            return isinstance(v,str)
        # /usr/local/lib/haxe/std/python/_std/Std.hx:83
        isEnumType = (t == Enum)
        # /usr/local/lib/haxe/std/python/_std/Std.hx:84
        if ((isEnumType and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_constructs")):
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:86
        if isEnumType:
            return False
        # /usr/local/lib/haxe/std/python/_std/Std.hx:88
        isClassType = (t == Class)
        # /usr/local/lib/haxe/std/python/_std/Std.hx:89
        if ((((isClassType and (not isinstance(v,Enum))) and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_class_name")) and (not hasattr(v,"_hx_constructs"))):
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:91
        if isClassType:
            return False
        # /usr/local/lib/haxe/std/python/_std/Std.hx:93
        tmp5 = None
        try:
            tmp5 = isinstance(v,t)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            tmp5 = False
        if tmp5:
            return True
        # /usr/local/lib/haxe/std/python/_std/Std.hx:97
        if python_lib_Inspect.isclass(t):
            # /usr/local/lib/haxe/std/python/_std/Std.hx:99
            loop = None
            # /usr/local/lib/haxe/std/python/_std/Std.hx:100
            def _hx_local_1(intf):
                # /usr/local/lib/haxe/std/python/_std/Std.hx:101
                f1 = (intf._hx_interfaces if (hasattr(intf,"_hx_interfaces")) else [])
                # /usr/local/lib/haxe/std/python/_std/Std.hx:102
                if (f1 is not None):
                    # /usr/local/lib/haxe/std/python/_std/Std.hx:103
                    # /usr/local/lib/haxe/std/python/_std/Std.hx:103
                    _g = 0
                    while (_g < len(f1)):
                        i = (f1[_g] if _g >= 0 and _g < len(f1) else None)
                        _g = (_g + 1)
                        # /usr/local/lib/haxe/std/python/_std/Std.hx:104
                        if HxOverrides.eq(i,t):
                            return True
                        else:
                            # /usr/local/lib/haxe/std/python/_std/Std.hx:107
                            l = loop(i)
                            # /usr/local/lib/haxe/std/python/_std/Std.hx:108
                            if l:
                                return True
                    # /usr/local/lib/haxe/std/python/_std/Std.hx:113
                    return False
                else:
                    return False
            # /usr/local/lib/haxe/std/python/_std/Std.hx:99
            loop = _hx_local_1
            loop1 = loop
            # /usr/local/lib/haxe/std/python/_std/Std.hx:118
            currentClass = v.__class__
            # /usr/local/lib/haxe/std/python/_std/Std.hx:119
            while (currentClass is not None):
                # /usr/local/lib/haxe/std/python/_std/Std.hx:120
                if loop1(currentClass):
                    return True
                # /usr/local/lib/haxe/std/python/_std/Std.hx:123
                currentClass = python_Boot.getSuperClass(currentClass)
            # /usr/local/lib/haxe/std/python/_std/Std.hx:125
            return False
        else:
            return False

    @staticmethod
    def string(s):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:134
        return python_Boot.toString1(s,"")

    @staticmethod
    def parseInt(x):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:147
        if (x is None):
            return None
        # /usr/local/lib/haxe/std/python/_std/Std.hx:148
        try:
            return int(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            try:
                # /usr/local/lib/haxe/std/python/_std/Std.hx:152
                prefix = HxString.substr(x,0,2).lower()
                # /usr/local/lib/haxe/std/python/_std/Std.hx:154
                if (prefix == "0x"):
                    return int(x,16)
                # /usr/local/lib/haxe/std/python/_std/Std.hx:157
                raise _HxException("fail")
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e1 = _hx_e1
                # /usr/local/lib/haxe/std/python/_std/Std.hx:160
                x1 = Std.parseFloat(x)
                r = None
                try:
                    r = int(x1)
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    r = None
                # /usr/local/lib/haxe/std/python/_std/Std.hx:162
                if (r is None):
                    # /usr/local/lib/haxe/std/python/_std/Std.hx:163
                    r1 = Std.shortenPossibleNumber(x)
                    # /usr/local/lib/haxe/std/python/_std/Std.hx:164
                    if (r1 != x):
                        return Std.parseInt(r1)
                    else:
                        return None
                # /usr/local/lib/haxe/std/python/_std/Std.hx:170
                return r

    @staticmethod
    def shortenPossibleNumber(x):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:177
        r = ""
        # /usr/local/lib/haxe/std/python/_std/Std.hx:178
        # /usr/local/lib/haxe/std/python/_std/Std.hx:178
        _g1 = 0
        _g = len(x)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/python/_std/Std.hx:179
            c = ("" if (((i < 0) or ((i >= len(x))))) else x[i])
            # /usr/local/lib/haxe/std/python/_std/Std.hx:180
            # /usr/local/lib/haxe/std/python/_std/Std.hx:180
            _g2 = HxString.charCodeAt(c,0)
            if (_g2 is None):
                break
            else:
                _g21 = _g2
                # /usr/local/lib/haxe/std/python/_std/Std.hx:191
                if (((((((((((_g21 == 57) or ((_g21 == 56))) or ((_g21 == 55))) or ((_g21 == 54))) or ((_g21 == 53))) or ((_g21 == 52))) or ((_g21 == 51))) or ((_g21 == 50))) or ((_g21 == 49))) or ((_g21 == 48))) or ((_g21 == 46))):
                    r = (("null" if r is None else r) + ("null" if c is None else c))
                else:
                    break
        # /usr/local/lib/haxe/std/python/_std/Std.hx:195
        return r

    @staticmethod
    def parseFloat(x):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:200
        try:
            return float(x)
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            # /usr/local/lib/haxe/std/python/_std/Std.hx:204
            if (x is not None):
                # /usr/local/lib/haxe/std/python/_std/Std.hx:205
                r1 = Std.shortenPossibleNumber(x)
                # /usr/local/lib/haxe/std/python/_std/Std.hx:206
                if (r1 != x):
                    return Std.parseFloat(r1)
            # /usr/local/lib/haxe/std/python/_std/Std.hx:210
            return Math.NaN
Std._hx_class = Std
_hx_classes["Std"] = Std


class Float:
    _hx_class_name = "Float"
Float._hx_class = Float
_hx_classes["Float"] = Float


class Int:
    _hx_class_name = "Int"
Int._hx_class = Int
_hx_classes["Int"] = Int


class Bool:
    _hx_class_name = "Bool"
Bool._hx_class = Bool
_hx_classes["Bool"] = Bool


class Dynamic:
    _hx_class_name = "Dynamic"
Dynamic._hx_class = Dynamic
_hx_classes["Dynamic"] = Dynamic


class StringBuf:
    _hx_class_name = "StringBuf"
    __slots__ = ("b",)
    _hx_fields = ["b"]

    def __init__(self):
        # /usr/local/lib/haxe/std/python/_std/StringBuf.hx:32
        self.b = python_lib_io_StringIO()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.b = None
        _hx_o.length = None
StringBuf._hx_class = StringBuf
_hx_classes["StringBuf"] = StringBuf


class sys_FileSystem:
    _hx_class_name = "sys.FileSystem"
    __slots__ = ()
    _hx_statics = ["exists"]

    @staticmethod
    def exists(path):
        # /usr/local/lib/haxe/std/python/_std/sys/FileSystem.hx:31
        return python_lib_os_Path.exists(path)
sys_FileSystem._hx_class = sys_FileSystem
_hx_classes["sys.FileSystem"] = sys_FileSystem


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()
haxe_IMap._hx_class = haxe_IMap
_hx_classes["haxe.IMap"] = haxe_IMap


class haxe_ds_StringMap:
    _hx_class_name = "haxe.ds.StringMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["remove", "keys"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/StringMap.hx:32
        self.h = dict()

    def remove(self,key):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/StringMap.hx:48
        has = (key in self.h)
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/StringMap.hx:49
        if has:
            del self.h[key]
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/StringMap.hx:50
        return has

    def keys(self):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/StringMap.hx:54
        return python_HaxeIterator(iter(self.h.keys()))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.h = None
haxe_ds_StringMap._hx_class = haxe_ds_StringMap
_hx_classes["haxe.ds.StringMap"] = haxe_ds_StringMap


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:31
        self.checked = False
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:30
        self.has = False
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:29
        self.x = None
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:34
        self.it = it

    def next(self):
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:38
        if (not self.checked):
            self.hasNext()
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:39
        self.checked = False
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:40
        return self.x

    def hasNext(self):
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:44
        if (not self.checked):
            # /usr/local/lib/haxe/std/python/HaxeIterator.hx:45
            try:
                # /usr/local/lib/haxe/std/python/HaxeIterator.hx:46
                self.x = self.it.__next__()
                # /usr/local/lib/haxe/std/python/HaxeIterator.hx:47
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    # /usr/local/lib/haxe/std/python/HaxeIterator.hx:49
                    self.has = False
                    # /usr/local/lib/haxe/std/python/HaxeIterator.hx:50
                    self.x = None
                else:
                    raise _hx_e
            # /usr/local/lib/haxe/std/python/HaxeIterator.hx:52
            self.checked = True
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:54
        return self.has

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.it = None
        _hx_o.x = None
        _hx_o.has = None
        _hx_o.checked = None
python_HaxeIterator._hx_class = python_HaxeIterator
_hx_classes["python.HaxeIterator"] = python_HaxeIterator

class ValueType(Enum):
    __slots__ = ()
    _hx_class_name = "ValueType"
    _hx_constructs = ["TNull", "TInt", "TFloat", "TBool", "TObject", "TFunction", "TClass", "TEnum", "TUnknown"]

    @staticmethod
    def TClass(c):
        return ValueType("TClass", 6, [c])

    @staticmethod
    def TEnum(e):
        return ValueType("TEnum", 7, [e])
ValueType.TNull = ValueType("TNull", 0, list())
ValueType.TInt = ValueType("TInt", 1, list())
ValueType.TFloat = ValueType("TFloat", 2, list())
ValueType.TBool = ValueType("TBool", 3, list())
ValueType.TObject = ValueType("TObject", 4, list())
ValueType.TFunction = ValueType("TFunction", 5, list())
ValueType.TUnknown = ValueType("TUnknown", 8, list())
ValueType._hx_class = ValueType
_hx_classes["ValueType"] = ValueType


class Type:
    _hx_class_name = "Type"
    __slots__ = ()
    _hx_statics = ["getClass", "getSuperClass", "getClassName", "getEnumName", "resolveClass", "resolveEnum", "createEmptyInstance", "createEnum", "getEnumConstructs", "typeof"]

    @staticmethod
    def getClass(o):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:46
        if (o is None):
            return None
        # /usr/local/lib/haxe/std/python/_std/Type.hx:49
        if ((o is not None) and (((o == str) or python_lib_Inspect.isclass(o)))):
            return None
        # /usr/local/lib/haxe/std/python/_std/Type.hx:51
        if isinstance(o,_hx_AnonObject):
            return None
        # /usr/local/lib/haxe/std/python/_std/Type.hx:53
        if hasattr(o,"_hx_class"):
            return o._hx_class
        # /usr/local/lib/haxe/std/python/_std/Type.hx:56
        if hasattr(o,"__class__"):
            return o.__class__
        else:
            return None

    @staticmethod
    def getSuperClass(c):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:70
        return python_Boot.getSuperClass(c)

    @staticmethod
    def getClassName(c):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:75
        if hasattr(c,"_hx_class_name"):
            return c._hx_class_name
        else:
            # /usr/local/lib/haxe/std/python/_std/Type.hx:79
            if (c == list):
                return "Array"
            # /usr/local/lib/haxe/std/python/_std/Type.hx:80
            if (c == Math):
                return "Math"
            # /usr/local/lib/haxe/std/python/_std/Type.hx:81
            if (c == str):
                return "String"
            # /usr/local/lib/haxe/std/python/_std/Type.hx:83
            try:
                return c.__name__
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return None

    @staticmethod
    def getEnumName(e):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:92
        return e._hx_class_name

    @staticmethod
    def resolveClass(name):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:97
        if (name == "Array"):
            return list
        # /usr/local/lib/haxe/std/python/_std/Type.hx:98
        if (name == "Math"):
            return Math
        # /usr/local/lib/haxe/std/python/_std/Type.hx:99
        if (name == "String"):
            return str
        # /usr/local/lib/haxe/std/python/_std/Type.hx:101
        cl = _hx_classes.get(name,None)
        # /usr/local/lib/haxe/std/python/_std/Type.hx:103
        if ((cl is None) or (not (((cl is not None) and (((cl == str) or python_lib_Inspect.isclass(cl))))))):
            return None
        # /usr/local/lib/haxe/std/python/_std/Type.hx:105
        return cl

    @staticmethod
    def resolveEnum(name):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:109
        if (name == "Bool"):
            return Bool
        # /usr/local/lib/haxe/std/python/_std/Type.hx:110
        o = Type.resolveClass(name)
        # /usr/local/lib/haxe/std/python/_std/Type.hx:111
        if hasattr(o,"_hx_constructs"):
            return o
        else:
            return None

    @staticmethod
    def createEmptyInstance(cl):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:121
        i = cl.__new__(cl)
        # /usr/local/lib/haxe/std/python/_std/Type.hx:123
        callInit = None
        def _hx_local_0(cl1):
            # /usr/local/lib/haxe/std/python/_std/Type.hx:124
            sc = Type.getSuperClass(cl1)
            # /usr/local/lib/haxe/std/python/_std/Type.hx:125
            if (sc is not None):
                callInit(sc)
            # /usr/local/lib/haxe/std/python/_std/Type.hx:128
            if hasattr(cl1,"_hx_empty_init"):
                cl1._hx_empty_init(i)
        callInit = _hx_local_0
        callInit1 = callInit
        # /usr/local/lib/haxe/std/python/_std/Type.hx:132
        callInit1(cl)
        # /usr/local/lib/haxe/std/python/_std/Type.hx:134
        return i

    @staticmethod
    def createEnum(e,constr,params = None):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:139
        f = Reflect.field(e,constr)
        # /usr/local/lib/haxe/std/python/_std/Type.hx:140
        if (f is None):
            raise _HxException(("No such constructor " + ("null" if constr is None else constr)))
        # /usr/local/lib/haxe/std/python/_std/Type.hx:141
        if Reflect.isFunction(f):
            # /usr/local/lib/haxe/std/python/_std/Type.hx:142
            if (params is None):
                raise _HxException((("Constructor " + ("null" if constr is None else constr)) + " need parameters"))
            # /usr/local/lib/haxe/std/python/_std/Type.hx:144
            return Reflect.callMethod(e,f,params)
        # /usr/local/lib/haxe/std/python/_std/Type.hx:146
        if ((params is not None) and ((len(params) != 0))):
            raise _HxException((("Constructor " + ("null" if constr is None else constr)) + " does not need parameters"))
        # /usr/local/lib/haxe/std/python/_std/Type.hx:148
        return f

    @staticmethod
    def getEnumConstructs(e):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:167
        if hasattr(e,"_hx_constructs"):
            # /usr/local/lib/haxe/std/python/_std/Type.hx:168
            x = e._hx_constructs
            # /usr/local/lib/haxe/std/python/_std/Type.hx:169
            return list(x)
        else:
            return []

    @staticmethod
    def typeof(v):
        # /usr/local/lib/haxe/std/python/_std/Type.hx:178
        if (v is None):
            return ValueType.TNull
        elif isinstance(v,bool):
            return ValueType.TBool
        elif isinstance(v,int):
            return ValueType.TInt
        elif isinstance(v,float):
            return ValueType.TFloat
        elif isinstance(v,str):
            return ValueType.TClass(str)
        elif isinstance(v,list):
            return ValueType.TClass(list)
        elif (isinstance(v,_hx_AnonObject) or python_lib_Inspect.isclass(v)):
            return ValueType.TObject
        elif isinstance(v,Enum):
            return ValueType.TEnum(v.__class__)
        elif (isinstance(v,type) or hasattr(v,"_hx_class")):
            return ValueType.TClass(v.__class__)
        elif callable(v):
            return ValueType.TFunction
        else:
            return ValueType.TUnknown
Type._hx_class = Type
_hx_classes["Type"] = Type


class sys_db_Object:
    _hx_class_name = "sys.db.Object"
    __slots__ = ("_lock", "_manager", "__cache__")
    _hx_fields = ["_lock", "_manager", "__cache__"]
    _hx_methods = ["__getManager", "insert", "update", "lock", "delete", "isLocked", "toString"]

    def __init__(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:36
        self.__cache__ = None
        # /usr/local/lib/haxe/std/sys/db/Object.hx:34
        self._manager = None
        # /usr/local/lib/haxe/std/sys/db/Object.hx:33
        self._lock = None
        # /usr/local/lib/haxe/std/sys/db/Object.hx:41
        if (self._manager is None):
            self._manager = self._hx___getManager()

    def _hx___getManager(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:48
        cls = Type.getClass(self)
        # /usr/local/lib/haxe/std/sys/db/Object.hx:49
        return Reflect.field(cls,"manager")

    def insert(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:54
        self._manager.doInsert(self)

    def update(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:58
        self._manager.doUpdate(self)

    def lock(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:62
        self._manager.doLock(self)

    def delete(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:66
        self._manager.doDelete(self)

    def isLocked(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:70
        return self._lock

    def toString(self):
        # /usr/local/lib/haxe/std/sys/db/Object.hx:74
        return self._manager.objectToString(self)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o._lock = None
        _hx_o._manager = None
        _hx_o.__cache__ = None
sys_db_Object._hx_class = sys_db_Object
_hx_classes["sys.db.Object"] = sys_db_Object


class sys_db_Manager:
    _hx_class_name = "sys.db.Manager"
    __slots__ = ("table_infos", "table_name", "table_keys", "class_proto")
    _hx_fields = ["table_infos", "table_name", "table_keys", "class_proto"]
    _hx_methods = ["all", "doUpdateCache", "doInsert", "doUpdate", "getUpdateStatement", "doDelete", "doLock", "objectToString", "doSerialize", "normalizeCache", "cacheObject", "make", "unmake", "quoteField", "addKeys", "unsafeExecute", "unsafeObject", "unsafeObjects", "unsafeGet", "dbInfos", "getCnx", "getLockMode", "initRelation", "makeCacheKey", "addToCache", "removeFromCache", "getFromCacheKey", "getFromCache"]
    _hx_statics = ["cnx", "lockMode", "object_cache", "init_list", "KEYWORDS", "set_cnx", "getFieldName", "initialize", "cleanup", "__depends"]

    def __init__(self,classval):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:62
        self.class_proto = None
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:61
        self.table_keys = None
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:60
        self.table_name = None
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:65
        m = Reflect.field(haxe_rtti_Meta.getType(classval),"rtti")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:66
        if (m is None):
            raise _HxException(("Missing @rtti for class " + HxOverrides.stringOrNull(Type.getClassName(classval))))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:67
        self.table_infos = haxe_Unserializer.run((m[0] if 0 < len(m) else None))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:68
        self.table_name = self.quoteField(self.table_infos.name)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:69
        self.table_keys = self.table_infos.key
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:71
        self.class_proto = classval

    def all(self,lock = None):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:79
        return self.unsafeObjects(("SELECT * FROM " + HxOverrides.stringOrNull(self.table_name)),lock)

    def doUpdateCache(self,x,name,v):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:118
        cache = Reflect.field(x,("cache_" + ("null" if name is None else name)))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:121
        if (cache is None):
            return v
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:123
        v1 = self.doSerialize(name,cache.v)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:126
        return v1

    def doInsert(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:140
        self.unmake(x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:141
        s = StringBuf()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:142
        fields = List()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:143
        values = List()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:144
        cache = Reflect.field(x,"__cache__")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:145
        if (cache is None):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:147
            cache = _hx_AnonObject({})
            setattr(x,(("_hx_" + "__cache__") if (("__cache__" in python_Boot.keywords)) else (("_hx_" + "__cache__") if (((((len("__cache__") > 2) and ((ord("__cache__"[0]) == 95))) and ((ord("__cache__"[1]) == 95))) and ((ord("__cache__"[(len("__cache__") - 1)]) != 95)))) else "__cache__")),cache)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:150
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:150
        _g = 0
        _g1 = self.table_infos.fields
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:151
            name = f.name
            fieldName = sys_db_Manager.getFieldName(f)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:153
            v = Reflect.field(x,fieldName)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:154
            if (v is not None):
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:155
                fields.add(self.quoteField(name))
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:156
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:156
                _g2 = f.t
                if (_g2.index == 30):
                    v = self.doUpdateCache(x,name,v)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:160
                values.add(v)
            elif (not f.isNull):
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:163
                _g21 = f.t
                _g22 = _g21.index
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:174
                if (((((((_g22 == 33) or ((_g22 == 32))) or ((_g22 == 30))) or ((_g22 == 20))) or ((_g22 == 4))) or ((_g22 == 2))) or ((_g22 == 0))):
                    pass
                elif (_g22 == 8):
                    setattr(x,(("_hx_" + fieldName) if ((fieldName in python_Boot.keywords)) else (("_hx_" + fieldName) if (((((len(fieldName) > 2) and ((ord(fieldName[0]) == 95))) and ((ord(fieldName[1]) == 95))) and ((ord(fieldName[(len(fieldName) - 1)]) != 95)))) else fieldName)),False)
                elif (((_g22 == 12) or ((_g22 == 11))) or ((_g22 == 10))):
                    pass
                elif (((((_g22 == 21) or ((_g22 == 15))) or ((_g22 == 14))) or ((_g22 == 13))) or ((_g22 == 9))):
                    setattr(x,(("_hx_" + fieldName) if ((fieldName in python_Boot.keywords)) else (("_hx_" + fieldName) if (((((len(fieldName) > 2) and ((ord(fieldName[0]) == 95))) and ((ord(fieldName[1]) == 95))) and ((ord(fieldName[(len(fieldName) - 1)]) != 95)))) else fieldName)),"")
                elif (((((_g22 == 22) or ((_g22 == 19))) or ((_g22 == 18))) or ((_g22 == 17))) or ((_g22 == 16))):
                    # /usr/local/lib/haxe/std/sys/db/Manager.hx:171
                    value = haxe_io_Bytes.alloc(0)
                    setattr(x,(("_hx_" + fieldName) if ((fieldName in python_Boot.keywords)) else (("_hx_" + fieldName) if (((((len(fieldName) > 2) and ((ord(fieldName[0]) == 95))) and ((ord(fieldName[1]) == 95))) and ((ord(fieldName[(len(fieldName) - 1)]) != 95)))) else fieldName)),value)
                elif (((((((((((((_g22 == 31) or ((_g22 == 29))) or ((_g22 == 28))) or ((_g22 == 27))) or ((_g22 == 26))) or ((_g22 == 25))) or ((_g22 == 24))) or ((_g22 == 23))) or ((_g22 == 7))) or ((_g22 == 6))) or ((_g22 == 5))) or ((_g22 == 3))) or ((_g22 == 1))):
                    setattr(x,(("_hx_" + fieldName) if ((fieldName in python_Boot.keywords)) else (("_hx_" + fieldName) if (((((len(fieldName) > 2) and ((ord(fieldName[0]) == 95))) and ((ord(fieldName[1]) == 95))) and ((ord(fieldName[(len(fieldName) - 1)]) != 95)))) else fieldName)),0)
                else:
                    pass
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:179
            setattr(cache,(("_hx_" + name) if ((name in python_Boot.keywords)) else (("_hx_" + name) if (((((len(name) > 2) and ((ord(name[0]) == 95))) and ((ord(name[1]) == 95))) and ((ord(name[(len(name) - 1)]) != 95)))) else name)),v)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:181
        s.b.write("INSERT INTO ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:182
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:182
        s1 = Std.string(self.table_name)
        s.b.write(s1)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:183
        if ((fields.length > 0) or ((sys_db_Manager.cnx.dbName() != "SQLite"))):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:185
            s.b.write(" (")
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:186
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:186
            s2 = Std.string(fields.join(","))
            s.b.write(s2)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:187
            s.b.write(") VALUES (")
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:188
            first = True
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:189
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:189
            _g_head = values.h
            while (_g_head is not None):
                val = _g_head.item
                _g_head = _g_head.next
                v1 = val
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:190
                if first:
                    first = False
                else:
                    s.b.write(", ")
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:194
                self.getCnx().addValue(s,v1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:196
            s.b.write(")")
        else:
            s.b.write(" DEFAULT VALUES")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:200
        self.unsafeExecute(s.b.getvalue())
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:201
        x._lock = True
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:203
        if ((len(self.table_keys) == 1) and ((Reflect.field(x,(self.table_keys[0] if 0 < len(self.table_keys) else None)) is None))):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:204
            field = (self.table_keys[0] if 0 < len(self.table_keys) else None)
            value1 = self.getCnx().lastInsertId()
            setattr(x,(("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field)),value1)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:205
        self.addToCache(x)

    def doUpdate(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:221
        if (not x._lock):
            raise _HxException("Cannot update a not locked object")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:223
        upd = self.getUpdateStatement(x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:224
        if (upd is None):
            return
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:225
        self.unsafeExecute(upd)

    def getUpdateStatement(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:230
        self.unmake(x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:231
        s = StringBuf()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:232
        s.b.write("UPDATE ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:233
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:233
        s1 = Std.string(self.table_name)
        s.b.write(s1)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:234
        s.b.write(" SET ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:235
        cache = Reflect.field(x,"__cache__")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:236
        mod = False
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:237
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:237
        _g = 0
        _g1 = self.table_infos.fields
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:238
            if (python_internal_ArrayImpl.indexOf(self.table_keys,f.name,None) >= 0):
                continue
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:240
            name = f.name
            fieldName = sys_db_Manager.getFieldName(f)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:242
            v = Reflect.field(x,fieldName)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:243
            vc = Reflect.field(cache,name)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:244
            if ((cache is None) or (not HxOverrides.eq(v,vc))):
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:245
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:245
                _g2 = f.t
                _g21 = _g2.index
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:247
                if (((((_g21 == 22) or ((_g21 == 19))) or ((_g21 == 18))) or ((_g21 == 17))) or ((_g21 == 16))):
                    # /usr/local/lib/haxe/std/sys/db/Manager.hx:247
                    a = v
                    b = vc
                    if (not (((a != b) and ((((a is None) or ((b is None))) or ((a.compare(b) != 0))))))):
                        continue
                elif (_g21 == 30):
                    # /usr/local/lib/haxe/std/sys/db/Manager.hx:250
                    v = self.doUpdateCache(x,name,v)
                    # /usr/local/lib/haxe/std/sys/db/Manager.hx:251
                    a1 = v
                    b1 = vc
                    if (not (((a1 != b1) and ((((a1 is None) or ((b1 is None))) or ((a1.compare(b1) != 0))))))):
                        continue
                else:
                    pass
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:255
                if mod:
                    s.b.write(", ")
                else:
                    mod = True
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:259
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:259
                s2 = Std.string(self.quoteField(name))
                s.b.write(s2)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:260
                s.b.write(" = ")
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:261
                self.getCnx().addValue(s,v)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:262
                if (cache is not None):
                    setattr(cache,(("_hx_" + name) if ((name in python_Boot.keywords)) else (("_hx_" + name) if (((((len(name) > 2) and ((ord(name[0]) == 95))) and ((ord(name[1]) == 95))) and ((ord(name[(len(name) - 1)]) != 95)))) else name)),v)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:266
        if (not mod):
            return None
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:268
        s.b.write(" WHERE ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:269
        self.addKeys(s,x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:270
        return s.b.getvalue()

    def doDelete(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:274
        s = StringBuf()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:275
        s.b.write("DELETE FROM ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:276
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:276
        s1 = Std.string(self.table_name)
        s.b.write(s1)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:277
        s.b.write(" WHERE ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:278
        self.addKeys(s,x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:279
        self.unsafeExecute(s.b.getvalue())
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:280
        self.removeFromCache(x)

    def doLock(self,i):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:284
        if i._lock:
            return
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:286
        s = StringBuf()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:287
        s.b.write("SELECT * FROM ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:288
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:288
        s1 = Std.string(self.table_name)
        s.b.write(s1)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:289
        s.b.write(" WHERE ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:290
        self.addKeys(s,i)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:292
        if (self.unsafeObject(s.b.getvalue(),True) != i):
            raise _HxException("Could not lock object (was deleted ?); try restarting transaction")

    def objectToString(self,it):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:297
        s_b = python_lib_io_StringIO()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:298
        s_b.write(Std.string(self.table_name))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:299
        if (len(self.table_keys) == 1):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:300
            s_b.write("#")
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:301
            s_b.write(Std.string(Reflect.field(it,(self.table_keys[0] if 0 < len(self.table_keys) else None))))
        else:
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:303
            s_b.write("(")
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:304
            first = True
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:305
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:305
            _g = 0
            _g1 = self.table_keys
            while (_g < len(_g1)):
                f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:306
                if first:
                    first = False
                else:
                    s_b.write(",")
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:310
                s_b.write(Std.string(self.quoteField(f)))
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:311
                s_b.write(":")
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:312
                s_b.write(Std.string(Reflect.field(it,f)))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:314
            s_b.write(")")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:316
        return s_b.getvalue()

    def doSerialize(self,field,v):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:320
        s = haxe_Serializer()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:321
        s.useEnumIndex = True
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:322
        s.serialize(v)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:323
        _hx_str = s.toString()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:327
        return haxe_io_Bytes.ofString(_hx_str)

    def normalizeCache(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:349
        _g = 0
        _g1 = python_Boot.fields(x)
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:351
            val = Reflect.field(x,f)
            info = self.table_infos.hfields.h.get(f,None)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:352
            if (info is not None):
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:354
                if (val is not None):
                    # /usr/local/lib/haxe/std/sys/db/Manager.hx:354
                    _g2 = info.t
                    _g21 = _g2.index
                    # /usr/local/lib/haxe/std/sys/db/Manager.hx:382
                    if (_g21 == 7):
                        if Std._hx_is(val,str):
                            val = Std.parseFloat(val)
                    elif (_g21 == 8):
                        if (not Std._hx_is(val,Bool)):
                            if Std._hx_is(val,Int):
                                val = (val != 0)
                            elif Std._hx_is(val,str):
                                # /usr/local/lib/haxe/std/sys/db/Manager.hx:378
                                _g22 = Reflect.field(val,"toLowerCase")()
                                _g23 = _g22
                                _hx_local_1 = len(_g23)
                                # /usr/local/lib/haxe/std/sys/db/Manager.hx:379
                                if (_hx_local_1 == 1):
                                    if (_g23 == "1"):
                                        val = True
                                    elif (_g23 == "0"):
                                        val = False
                                elif (_hx_local_1 == 4):
                                    if (_g23 == "true"):
                                        val = True
                                elif (_hx_local_1 == 5):
                                    if (_g23 == "false"):
                                        val = False
                                else:
                                    pass
                    elif ((_g21 == 11) or ((_g21 == 10))):
                        if (not Std._hx_is(val,Date)):
                            if Std._hx_is(val,Float):
                                val = Date.fromTime(val)
                            else:
                                # /usr/local/lib/haxe/std/sys/db/Manager.hx:360
                                v = (Std.string(val) + "")
                                # /usr/local/lib/haxe/std/sys/db/Manager.hx:361
                                index = v.find(".")
                                # /usr/local/lib/haxe/std/sys/db/Manager.hx:362
                                if (index >= 0):
                                    v = HxString.substr(v,0,index)
                                # /usr/local/lib/haxe/std/sys/db/Manager.hx:364
                                val = Date.fromString(v)
                    elif ((((_g21 == 15) or ((_g21 == 14))) or ((_g21 == 13))) or ((_g21 == 9))):
                        if (not Std._hx_is(val,str)):
                            val = (Std.string(val) + "")
                    elif (((((_g21 == 30) or ((_g21 == 19))) or ((_g21 == 18))) or ((_g21 == 17))) or ((_g21 == 16))):
                        if Std._hx_is(val,str):
                            val = haxe_io_Bytes.ofString(val)
                    else:
                        pass
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:386
                setattr(x,(("_hx_" + f) if ((f in python_Boot.keywords)) else (("_hx_" + f) if (((((len(f) > 2) and ((ord(f[0]) == 95))) and ((ord(f[1]) == 95))) and ((ord(f[(len(f) - 1)]) != 95)))) else f)),val)

    def cacheObject(self,x,lock):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:396
        o = Type.createEmptyInstance(self.class_proto)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:397
        o._manager = self
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:399
        self.normalizeCache(x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:400
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:400
        _g = 0
        _g1 = python_Boot.fields(x)
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:402
            val = Reflect.field(x,f)
            info = self.table_infos.hfields.h.get(f,None)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:403
            if (info is not None):
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:405
                fieldName = sys_db_Manager.getFieldName(info)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:406
                setattr(o,(("_hx_" + fieldName) if ((fieldName in python_Boot.keywords)) else (("_hx_" + fieldName) if (((((len(fieldName) > 2) and ((ord(fieldName[0]) == 95))) and ((ord(fieldName[1]) == 95))) and ((ord(fieldName[(len(fieldName) - 1)]) != 95)))) else fieldName)),val)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:409
        setattr(o,(("_hx_" + "__cache__") if (("__cache__" in python_Boot.keywords)) else (("_hx_" + "__cache__") if (((((len("__cache__") > 2) and ((ord("__cache__"[0]) == 95))) and ((ord("__cache__"[1]) == 95))) and ((ord("__cache__"[(len("__cache__") - 1)]) != 95)))) else "__cache__")),x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:410
        self.addToCache(o)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:411
        o._lock = lock
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:412
        return o

    def make(self,x):
        pass

    def unmake(self,x):
        pass

    def quoteField(self,f):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:422
        _this = sys_db_Manager.KEYWORDS
        if (f.lower() in _this.h):
            return (("`" + ("null" if f is None else f)) + "`")
        else:
            return f

    def addKeys(self,s,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:426
        first = True
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:427
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:427
        _g = 0
        _g1 = self.table_keys
        while (_g < len(_g1)):
            k = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:428
            if first:
                first = False
            else:
                s.b.write(" AND ")
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:432
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:432
            s1 = Std.string(self.quoteField(k))
            s.b.write(s1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:433
            s.b.write(" = ")
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:434
            f = Reflect.field(x,k)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:435
            if (f is None):
                raise _HxException(("Missing key " + ("null" if k is None else k)))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:437
            self.getCnx().addValue(s,f)

    def unsafeExecute(self,sql):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:442
        return self.getCnx().request(sql)

    def unsafeObject(self,sql,lock):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:446
        if (lock != False):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:447
            lock = True
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:448
            sql = (("null" if sql is None else sql) + HxOverrides.stringOrNull(self.getLockMode()))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:450
        r = self.unsafeExecute(sql)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:451
        r1 = (r.next() if (r.hasNext()) else None)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:452
        if (r1 is None):
            return None
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:454
        self.normalizeCache(r1)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:455
        c = self.getFromCache(r1,lock)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:456
        if (c is not None):
            return c
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:458
        r1 = self.cacheObject(r1,lock)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:459
        self.make(r1)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:460
        return r1

    def unsafeObjects(self,sql,lock):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:464
        if (lock != False):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:465
            lock = True
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:466
            sql = (("null" if sql is None else sql) + HxOverrides.stringOrNull(self.getLockMode()))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:468
        l = self.unsafeExecute(sql).results()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:469
        l2 = List()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:470
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:470
        _g_head = l.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            x = val
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:471
            self.normalizeCache(x)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:472
            c = self.getFromCache(x,lock)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:473
            if (c is not None):
                l2.add(c)
            else:
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:476
                x = self.cacheObject(x,lock)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:477
                self.make(x)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:478
                l2.add(x)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:481
        return l2

    def unsafeGet(self,id,lock = None):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:493
        if (lock is None):
            lock = True
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:494
        if (len(self.table_keys) != 1):
            raise _HxException("Invalid number of keys")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:496
        if (id is None):
            return None
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:498
        x = self.getFromCacheKey((Std.string(id) + HxOverrides.stringOrNull(self.table_name)))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:499
        if ((x is not None) and (((not lock) or Reflect.field(x,"_lock")))):
            return x
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:501
        s = StringBuf()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:502
        s.b.write("SELECT * FROM ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:503
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:503
        s1 = Std.string(self.table_name)
        s.b.write(s1)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:504
        s.b.write(" WHERE ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:505
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:505
        s2 = Std.string(self.quoteField((self.table_keys[0] if 0 < len(self.table_keys) else None)))
        s.b.write(s2)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:506
        s.b.write(" = ")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:507
        self.getCnx().addValue(s,id)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:508
        return self.unsafeObject(s.b.getvalue(),lock)

    def dbInfos(self):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:570
        return self.table_infos

    def getCnx(self):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:574
        return sys_db_Manager.cnx

    def getLockMode(self):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:578
        return sys_db_Manager.lockMode

    def initRelation(self,r):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:608
        spod = Type.resolveClass(r.type)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:609
        if (spod is None):
            raise _HxException(("Missing spod type " + HxOverrides.stringOrNull(r.type)))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:610
        manager = Reflect.field(spod,"manager")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:611
        hprop = ("__" + HxOverrides.stringOrNull(r.prop))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:612
        hkey = r.key
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:613
        lock = r.lock
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:614
        if ((manager is None) or ((manager.table_keys is None))):
            raise _HxException(((("Invalid manager for relation " + HxOverrides.stringOrNull(self.table_name)) + ":") + HxOverrides.stringOrNull(r.prop)))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:615
        if (len(manager.table_keys) != 1):
            raise _HxException((((("Relation " + HxOverrides.stringOrNull(r.prop)) + "(") + HxOverrides.stringOrNull(r.key)) + ") on a multiple key table"))

    def makeCacheKey(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:668
        if (len(self.table_keys) == 1):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:669
            k = Reflect.field(x,(self.table_keys[0] if 0 < len(self.table_keys) else None))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:670
            if (k is None):
                raise _HxException(("Missing key " + HxOverrides.stringOrNull((self.table_keys[0] if 0 < len(self.table_keys) else None))))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:672
            return (Std.string(k) + HxOverrides.stringOrNull(self.table_name))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:674
        s_b = python_lib_io_StringIO()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:675
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:675
        _g = 0
        _g1 = self.table_keys
        while (_g < len(_g1)):
            k1 = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:676
            v = Reflect.field(x,k1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:677
            if (k1 is None):
                raise _HxException(("Missing key " + ("null" if k1 is None else k1)))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:679
            s_b.write(Std.string(v))
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:680
            s_b.write("#")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:682
        s_b.write(Std.string(self.table_name))
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:683
        return s_b.getvalue()

    def addToCache(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:687
        _this = sys_db_Manager.object_cache
        key = self.makeCacheKey(x)
        _this.h[key] = x

    def removeFromCache(self,x):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:691
        sys_db_Manager.object_cache.remove(self.makeCacheKey(x))

    def getFromCacheKey(self,key):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:695
        return sys_db_Manager.object_cache.h.get(key,None)

    def getFromCache(self,x,lock):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:699
        _this = sys_db_Manager.object_cache
        key = self.makeCacheKey(x)
        c = _this.h.get(key,None)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:700
        if (((c is not None) and lock) and (not Reflect.field(c,"_lock"))):
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:702
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:702
            _g = 0
            _g1 = python_Boot.fields(c)
            while (_g < len(_g1)):
                f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:703
                Reflect.deleteField(c,f)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:704
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:704
            _g2 = 0
            _g11 = self.table_infos.fields
            while (_g2 < len(_g11)):
                f1 = (_g11[_g2] if _g2 >= 0 and _g2 < len(_g11) else None)
                _g2 = (_g2 + 1)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:706
                name = f1.name
                fieldName = sys_db_Manager.getFieldName(f1)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:708
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:708
                value = Reflect.field(x,name)
                setattr(c,(("_hx_" + fieldName) if ((fieldName in python_Boot.keywords)) else (("_hx_" + fieldName) if (((((len(fieldName) > 2) and ((ord(fieldName[0]) == 95))) and ((ord(fieldName[1]) == 95))) and ((ord(fieldName[(len(fieldName) - 1)]) != 95)))) else fieldName)),value)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:711
            Reflect.setField(c,"_lock",True)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:714
            Reflect.setField(c,"_manager",self)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:717
            setattr(c,(("_hx_" + "__cache__") if (("__cache__" in python_Boot.keywords)) else (("_hx_" + "__cache__") if (((((len("__cache__") > 2) and ((ord("__cache__"[0]) == 95))) and ((ord("__cache__"[1]) == 95))) and ((ord("__cache__"[(len("__cache__") - 1)]) != 95)))) else "__cache__")),x)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:719
            self.make(c)
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:721
        return c
    cnx = None
    lockMode = None

    @staticmethod
    def set_cnx(c):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:52
        sys_db_Manager.cnx = c
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:53
        sys_db_Manager.lockMode = (" FOR UPDATE" if (((c is not None) and ((c.dbName() == "MySQL")))) else "")
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:54
        return c

    @staticmethod
    def getFieldName(field):
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:131
        _g = field.t
        _g1 = _g.index
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:133
        if ((_g1 == 31) or ((_g1 == 30))):
            return ("data_" + HxOverrides.stringOrNull(field.name))
        else:
            return field.name

    @staticmethod
    def initialize():
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:595
        l = sys_db_Manager.init_list
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:596
        sys_db_Manager.init_list = List()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:597
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:597
        _g_head = l.h
        while (_g_head is not None):
            val = _g_head.item
            _g_head = _g_head.next
            m = val
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:598
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:598
            _g = 0
            _g1 = m.table_infos.relations
            while (_g < len(_g1)):
                r = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
                _g = (_g + 1)
                # /usr/local/lib/haxe/std/sys/db/Manager.hx:599
                m.initRelation(r)

    @staticmethod
    def cleanup():
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:603
        sys_db_Manager.object_cache = haxe_ds_StringMap()

    @staticmethod
    def _hx___depends():
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:750
        return haxe_io_Bytes.alloc(0).toString()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.table_infos = None
        _hx_o.table_name = None
        _hx_o.table_keys = None
        _hx_o.class_proto = None
sys_db_Manager._hx_class = sys_db_Manager
_hx_classes["sys.db.Manager"] = sys_db_Manager


class haxe_rtti_Meta:
    _hx_class_name = "haxe.rtti.Meta"
    __slots__ = ()
    _hx_statics = ["getType", "getMeta"]

    @staticmethod
    def getType(t):
        # /usr/local/lib/haxe/std/haxe/rtti/Meta.hx:41
        meta = haxe_rtti_Meta.getMeta(t)
        # /usr/local/lib/haxe/std/haxe/rtti/Meta.hx:42
        if ((meta is None) or ((Reflect.field(meta,"obj") is None))):
            return _hx_AnonObject({})
        else:
            return Reflect.field(meta,"obj")

    @staticmethod
    def getMeta(t):
        # /usr/local/lib/haxe/std/haxe/rtti/Meta.hx:84
        return Reflect.field(t,"__meta__")
haxe_rtti_Meta._hx_class = haxe_rtti_Meta
_hx_classes["haxe.rtti.Meta"] = haxe_rtti_Meta


class haxe__Unserializer_DefaultResolver:
    _hx_class_name = "haxe._Unserializer.DefaultResolver"
    __slots__ = ()
    _hx_methods = ["resolveClass", "resolveEnum"]

    def __init__(self):
        pass

    def resolveClass(self,name):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:477
        return Type.resolveClass(name)

    def resolveEnum(self,name):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:478
        return Type.resolveEnum(name)

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
haxe__Unserializer_DefaultResolver._hx_class = haxe__Unserializer_DefaultResolver
_hx_classes["haxe._Unserializer.DefaultResolver"] = haxe__Unserializer_DefaultResolver


class haxe_Unserializer:
    _hx_class_name = "haxe.Unserializer"
    __slots__ = ("buf", "pos", "length", "cache", "scache", "resolver")
    _hx_fields = ["buf", "pos", "length", "cache", "scache", "resolver"]
    _hx_methods = ["readDigits", "readFloat", "unserializeObject", "unserializeEnum", "unserialize"]
    _hx_statics = ["DEFAULT_RESOLVER", "BASE64", "CODES", "initCodes", "run"]

    def __init__(self,buf):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:103
        self.buf = buf
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:104
        self.length = len(buf)
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:105
        self.pos = 0
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:109
        self.scache = list()
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:110
        self.cache = list()
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:111
        r = haxe_Unserializer.DEFAULT_RESOLVER
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:112
        if (r is None):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:113
            r = haxe__Unserializer_DefaultResolver()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:114
            haxe_Unserializer.DEFAULT_RESOLVER = r
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:116
        self.resolver = r

    def readDigits(self):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:148
        k = 0
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:149
        s = False
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:150
        fpos = self.pos
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:151
        while True:
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:152
            p = self.pos
            s1 = self.buf
            c = (-1 if ((p >= len(s1))) else ord(s1[p]))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:153
            if (c == -1):
                break
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:155
            if (c == 45):
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:156
                if (self.pos != fpos):
                    break
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:158
                s = True
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:159
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:159
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.pos
                _hx_local_0.pos = (_hx_local_1 + 1)
                _hx_local_1
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:160
                continue
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:162
            if ((c < 48) or ((c > 57))):
                break
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:164
            k = ((k * 10) + ((c - 48)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:165
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:165
            _hx_local_2 = self
            _hx_local_3 = _hx_local_2.pos
            _hx_local_2.pos = (_hx_local_3 + 1)
            _hx_local_3
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:167
        if s:
            k = (k * -1)
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:169
        return k

    def readFloat(self):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:173
        p1 = self.pos
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:174
        while True:
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:175
            p = self.pos
            s = self.buf
            c = (-1 if ((p >= len(s))) else ord(s[p]))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:176
            if (c == -1):
                break
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:178
            if ((((c >= 43) and ((c < 58))) or ((c == 101))) or ((c == 69))):
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:179
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.pos
                _hx_local_0.pos = (_hx_local_1 + 1)
                _hx_local_1
            else:
                break
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:183
        return Std.parseFloat(HxString.substr(self.buf,p1,(self.pos - p1)))

    def unserializeObject(self,o):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:187
        while True:
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:188
            if (self.pos >= self.length):
                raise _HxException("Invalid object")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:190
            p = self.pos
            s = self.buf
            if (((-1 if ((p >= len(s))) else ord(s[p]))) == 103):
                break
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:192
            k = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:193
            if (not Std._hx_is(k,str)):
                raise _HxException("Invalid object key")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:195
            v = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:196
            setattr(o,(("_hx_" + k) if ((k in python_Boot.keywords)) else (("_hx_" + k) if (((((len(k) > 2) and ((ord(k[0]) == 95))) and ((ord(k[1]) == 95))) and ((ord(k[(len(k) - 1)]) != 95)))) else k)),v)
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:198
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:198
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.pos
        _hx_local_0.pos = (_hx_local_1 + 1)
        _hx_local_1

    def unserializeEnum(self,edecl,tag):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:202
        p = self.pos
        self.pos = (self.pos + 1)
        s = self.buf
        if (((-1 if ((p >= len(s))) else ord(s[p]))) != 58):
            raise _HxException("Invalid enum format")
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:204
        nargs = self.readDigits()
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:205
        if (nargs == 0):
            return Type.createEnum(edecl,tag)
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:207
        args = list()
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:208
        while True:
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:208
            tmp = nargs
            nargs = (nargs - 1)
            if (not ((tmp > 0))):
                break
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:209
            x = self.unserialize()
            args.append(x)
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:210
        return Type.createEnum(edecl,tag,args)

    def unserialize(self):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:234
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:234
        p = self.pos
        self.pos = (self.pos + 1)
        s = self.buf
        _g = (-1 if ((p >= len(s))) else ord(s[p]))
        _g1 = _g
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:440
        if (_g1 == 65):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:441
            name = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:442
            cl = self.resolver.resolveClass(name)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:443
            if (cl is None):
                raise _HxException(("Class not found " + ("null" if name is None else name)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:445
            return cl
        elif (_g1 == 66):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:447
            name1 = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:448
            e = self.resolver.resolveEnum(name1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:449
            if (e is None):
                raise _HxException(("Enum not found " + ("null" if name1 is None else name1)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:451
            return e
        elif (_g1 == 67):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:430
            name2 = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:431
            cl1 = self.resolver.resolveClass(name2)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:432
            if (cl1 is None):
                raise _HxException(("Class not found " + ("null" if name2 is None else name2)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:434
            o = Type.createEmptyInstance(cl1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:435
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:435
            _this = self.cache
            _this.append(o)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:436
            Reflect.field(o,"hxUnserialize")(self)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:437
            p1 = self.pos
            self.pos = (self.pos + 1)
            s1 = self.buf
            if (((-1 if ((p1 >= len(s1))) else ord(s1[p1]))) != 103):
                raise _HxException("Invalid custom data")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:439
            return o
        elif (_g1 == 77):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:364
            h = haxe_ds_ObjectMap()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:365
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:365
            _this1 = self.cache
            _this1.append(h)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:366
            buf = self.buf
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:367
            while True:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:367
                p2 = self.pos
                s2 = self.buf
                if (not ((((-1 if ((p2 >= len(s2))) else ord(s2[p2]))) != 104))):
                    break
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:368
                s3 = self.unserialize()
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:369
                h.set(s3,self.unserialize())
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:371
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:371
            _hx_local_0 = self
            _hx_local_1 = _hx_local_0.pos
            _hx_local_0.pos = (_hx_local_1 + 1)
            _hx_local_1
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:372
            return h
        elif (_g1 == 82):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:296
            n = self.readDigits()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:297
            if ((n < 0) or ((n >= len(self.scache)))):
                raise _HxException("Invalid string reference")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:299
            return (self.scache[n] if n >= 0 and n < len(self.scache) else None)
        elif (_g1 == 97):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:263
            buf1 = self.buf
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:264
            a = list()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:266
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:266
            _this2 = self.cache
            _this2.append(a)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:267
            while True:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:268
                p3 = self.pos
                s4 = self.buf
                c = (-1 if ((p3 >= len(s4))) else ord(s4[p3]))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:269
                if (c == 104):
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:270
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:270
                    _hx_local_2 = self
                    _hx_local_3 = _hx_local_2.pos
                    _hx_local_2.pos = (_hx_local_3 + 1)
                    _hx_local_3
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:271
                    break
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:273
                if (c == 117):
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:274
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:274
                    _hx_local_4 = self
                    _hx_local_5 = _hx_local_4.pos
                    _hx_local_4.pos = (_hx_local_5 + 1)
                    _hx_local_5
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:275
                    n1 = self.readDigits()
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:276
                    python_internal_ArrayImpl._set(a, ((len(a) + n1) - 1), None)
                else:
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:278
                    x = self.unserialize()
                    a.append(x)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:283
            return a
        elif (_g1 == 98):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:341
            h1 = haxe_ds_StringMap()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:342
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:342
            _this3 = self.cache
            _this3.append(h1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:343
            buf2 = self.buf
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:344
            while True:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:344
                p4 = self.pos
                s5 = self.buf
                if (not ((((-1 if ((p4 >= len(s5))) else ord(s5[p4]))) != 104))):
                    break
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:345
                s6 = self.unserialize()
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:346
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:346
                value = self.unserialize()
                h1.h[s6] = value
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:348
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:348
            _hx_local_6 = self
            _hx_local_7 = _hx_local_6.pos
            _hx_local_6.pos = (_hx_local_7 + 1)
            _hx_local_7
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:349
            return h1
        elif (_g1 == 99):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:303
            name3 = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:304
            cl2 = self.resolver.resolveClass(name3)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:305
            if (cl2 is None):
                raise _HxException(("Class not found " + ("null" if name3 is None else name3)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:307
            o1 = Type.createEmptyInstance(cl2)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:308
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:308
            _this4 = self.cache
            _this4.append(o1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:309
            self.unserializeObject(o1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:310
            return o1
        elif (_g1 == 100):
            return self.readFloat()
        elif (_g1 == 102):
            return False
        elif (_g1 == 105):
            return self.readDigits()
        elif (_g1 == 106):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:320
            name4 = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:321
            edecl = self.resolver.resolveEnum(name4)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:322
            if (edecl is None):
                raise _HxException(("Enum not found " + ("null" if name4 is None else name4)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:324
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:324
            _hx_local_8 = self
            _hx_local_9 = _hx_local_8.pos
            _hx_local_8.pos = (_hx_local_9 + 1)
            _hx_local_9
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:325
            index = self.readDigits()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:326
            tag = python_internal_ArrayImpl._get(Type.getEnumConstructs(edecl), index)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:327
            if (tag is None):
                raise _HxException(((("Unknown enum index " + ("null" if name4 is None else name4)) + "@") + Std.string(index)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:329
            e1 = self.unserializeEnum(edecl,tag)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:330
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:330
            _this5 = self.cache
            _this5.append(e1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:331
            return e1
        elif (_g1 == 107):
            return Math.NaN
        elif (_g1 == 108):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:333
            l = List()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:334
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:334
            _this6 = self.cache
            _this6.append(l)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:335
            buf3 = self.buf
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:336
            while True:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:336
                p5 = self.pos
                s7 = self.buf
                if (not ((((-1 if ((p5 >= len(s7))) else ord(s7[p5]))) != 104))):
                    break
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:337
                l.add(self.unserialize())
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:338
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:338
            _hx_local_10 = self
            _hx_local_11 = _hx_local_10.pos
            _hx_local_10.pos = (_hx_local_11 + 1)
            _hx_local_11
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:339
            return l
        elif (_g1 == 109):
            return Math.NEGATIVE_INFINITY
        elif (_g1 == 110):
            return None
        elif (_g1 == 111):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:286
            o2 = _hx_AnonObject({})
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:287
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:287
            _this7 = self.cache
            _this7.append(o2)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:288
            self.unserializeObject(o2)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:289
            return o2
        elif (_g1 == 112):
            return Math.POSITIVE_INFINITY
        elif (_g1 == 113):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:351
            h2 = haxe_ds_IntMap()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:352
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:352
            _this8 = self.cache
            _this8.append(h2)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:353
            buf4 = self.buf
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:354
            p6 = self.pos
            self.pos = (self.pos + 1)
            s8 = self.buf
            c1 = (-1 if ((p6 >= len(s8))) else ord(s8[p6]))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:355
            while (c1 == 58):
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:356
                i = self.readDigits()
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:357
                h2.set(i,self.unserialize())
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:358
                p7 = self.pos
                self.pos = (self.pos + 1)
                s9 = self.buf
                if (p7 >= len(s9)):
                    c1 = -1
                else:
                    c1 = ord(s9[p7])
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:360
            if (c1 != 104):
                raise _HxException("Invalid IntMap format")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:362
            return h2
        elif (_g1 == 114):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:291
            n2 = self.readDigits()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:292
            if ((n2 < 0) or ((n2 >= len(self.cache)))):
                raise _HxException("Invalid reference")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:294
            return (self.cache[n2] if n2 >= 0 and n2 < len(self.cache) else None)
        elif (_g1 == 115):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:389
            _hx_len = self.readDigits()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:390
            buf5 = self.buf
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:391
            tmp = None
            p8 = self.pos
            self.pos = (self.pos + 1)
            s10 = self.buf
            if (((-1 if ((p8 >= len(s10))) else ord(s10[p8]))) == 58):
                tmp = ((self.length - self.pos) < _hx_len)
            else:
                tmp = True
            if tmp:
                raise _HxException("Invalid bytes length")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:396
            codes = haxe_Unserializer.CODES
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:397
            if (codes is None):
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:398
                codes = haxe_Unserializer.initCodes()
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:399
                haxe_Unserializer.CODES = codes
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:401
            i1 = self.pos
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:402
            rest = (_hx_len & 3)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:403
            size = ((((_hx_len >> 2)) * 3) + (((rest - 1) if ((rest >= 2)) else 0)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:404
            _hx_max = (i1 + ((_hx_len - rest)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:405
            _hx_bytes = haxe_io_Bytes.alloc(size)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:406
            bpos = 0
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:407
            while (i1 < _hx_max):
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:408
                index1 = i1
                i1 = (i1 + 1)
                c11 = python_internal_ArrayImpl._get(codes, (-1 if ((index1 >= len(buf5))) else ord(buf5[index1])))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:409
                index2 = i1
                i1 = (i1 + 1)
                c2 = python_internal_ArrayImpl._get(codes, (-1 if ((index2 >= len(buf5))) else ord(buf5[index2])))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:410
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:410
                pos = bpos
                bpos = (bpos + 1)
                _hx_bytes.b[pos] = ((((c11 << 2) | ((c2 >> 4)))) & 255)
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:411
                index3 = i1
                i1 = (i1 + 1)
                c3 = python_internal_ArrayImpl._get(codes, (-1 if ((index3 >= len(buf5))) else ord(buf5[index3])))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:412
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:412
                pos1 = bpos
                bpos = (bpos + 1)
                _hx_bytes.b[pos1] = ((((c2 << 4) | ((c3 >> 2)))) & 255)
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:413
                index4 = i1
                i1 = (i1 + 1)
                c4 = python_internal_ArrayImpl._get(codes, (-1 if ((index4 >= len(buf5))) else ord(buf5[index4])))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:414
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:414
                pos2 = bpos
                bpos = (bpos + 1)
                _hx_bytes.b[pos2] = ((((c3 << 6) | c4)) & 255)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:416
            if (rest >= 2):
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:417
                index5 = i1
                i1 = (i1 + 1)
                c12 = python_internal_ArrayImpl._get(codes, (-1 if ((index5 >= len(buf5))) else ord(buf5[index5])))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:418
                index6 = i1
                i1 = (i1 + 1)
                c21 = python_internal_ArrayImpl._get(codes, (-1 if ((index6 >= len(buf5))) else ord(buf5[index6])))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:419
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:419
                pos3 = bpos
                bpos = (bpos + 1)
                _hx_bytes.b[pos3] = ((((c12 << 2) | ((c21 >> 4)))) & 255)
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:420
                if (rest == 3):
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:421
                    index7 = i1
                    i1 = (i1 + 1)
                    c31 = python_internal_ArrayImpl._get(codes, (-1 if ((index7 >= len(buf5))) else ord(buf5[index7])))
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:422
                    # /usr/local/lib/haxe/std/haxe/Unserializer.hx:422
                    pos4 = bpos
                    bpos = (bpos + 1)
                    _hx_bytes.b[pos4] = ((((c21 << 4) | ((c31 >> 2)))) & 255)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:426
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:426
            _hx_local_12 = self
            _hx_local_13 = _hx_local_12.pos
            _hx_local_12.pos = (_hx_local_13 + _hx_len)
            _hx_local_12.pos
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:427
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:427
            _this9 = self.cache
            _this9.append(_hx_bytes)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:428
            return _hx_bytes
        elif (_g1 == 116):
            return True
        elif (_g1 == 118):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:374
            d = None
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:375
            tmp1 = None
            tmp2 = None
            tmp3 = None
            tmp4 = None
            tmp5 = None
            tmp6 = None
            tmp7 = None
            tmp8 = None
            p9 = self.pos
            s11 = self.buf
            if (((-1 if ((p9 >= len(s11))) else ord(s11[p9]))) >= 48):
                p10 = self.pos
                s12 = self.buf
                tmp8 = (((-1 if ((p10 >= len(s12))) else ord(s12[p10]))) <= 57)
            else:
                tmp8 = False
            if tmp8:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:376
                p11 = (self.pos + 1)
                s13 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:375
                tmp7 = (((-1 if ((p11 >= len(s13))) else ord(s13[p11]))) >= 48)
            else:
                tmp7 = False
            if tmp7:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:376
                p12 = (self.pos + 1)
                s14 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:375
                tmp6 = (((-1 if ((p12 >= len(s14))) else ord(s14[p12]))) <= 57)
            else:
                tmp6 = False
            if tmp6:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:377
                p13 = (self.pos + 2)
                s15 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:375
                tmp5 = (((-1 if ((p13 >= len(s15))) else ord(s15[p13]))) >= 48)
            else:
                tmp5 = False
            if tmp5:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:377
                p14 = (self.pos + 2)
                s16 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:375
                tmp4 = (((-1 if ((p14 >= len(s16))) else ord(s16[p14]))) <= 57)
            else:
                tmp4 = False
            if tmp4:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:378
                p15 = (self.pos + 3)
                s17 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:375
                tmp3 = (((-1 if ((p15 >= len(s17))) else ord(s17[p15]))) >= 48)
            else:
                tmp3 = False
            if tmp3:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:378
                p16 = (self.pos + 3)
                s18 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:375
                tmp2 = (((-1 if ((p16 >= len(s18))) else ord(s18[p16]))) <= 57)
            else:
                tmp2 = False
            if tmp2:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:379
                p17 = (self.pos + 4)
                s19 = self.buf
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:375
                tmp1 = (((-1 if ((p17 >= len(s19))) else ord(s19[p17]))) == 45)
            else:
                tmp1 = False
            if tmp1:
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:382
                d = Date.fromString(HxString.substr(self.buf,self.pos,19))
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:383
                # /usr/local/lib/haxe/std/haxe/Unserializer.hx:383
                _hx_local_14 = self
                _hx_local_15 = _hx_local_14.pos
                _hx_local_14.pos = (_hx_local_15 + 19)
                _hx_local_14.pos
            else:
                d = Date.fromTime(self.readFloat())
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:386
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:386
            _this10 = self.cache
            _this10.append(d)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:387
            return d
        elif (_g1 == 119):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:312
            name5 = self.unserialize()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:313
            edecl1 = self.resolver.resolveEnum(name5)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:314
            if (edecl1 is None):
                raise _HxException(("Enum not found " + ("null" if name5 is None else name5)))
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:316
            e2 = self.unserializeEnum(edecl1,self.unserialize())
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:317
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:317
            _this11 = self.cache
            _this11.append(e2)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:318
            return e2
        elif (_g1 == 120):
            raise _HxException(self.unserialize())
        elif (_g1 == 121):
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:248
            len1 = self.readDigits()
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:249
            tmp9 = None
            p18 = self.pos
            self.pos = (self.pos + 1)
            s20 = self.buf
            if (((-1 if ((p18 >= len(s20))) else ord(s20[p18]))) == 58):
                tmp9 = ((self.length - self.pos) < len1)
            else:
                tmp9 = True
            if tmp9:
                raise _HxException("Invalid string length")
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:251
            s21 = HxString.substr(self.buf,self.pos,len1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:252
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:252
            _hx_local_16 = self
            _hx_local_17 = _hx_local_16.pos
            _hx_local_16.pos = (_hx_local_17 + len1)
            _hx_local_16.pos
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:253
            s21 = python_lib_urllib_Parse.unquote(s21)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:254
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:254
            _this12 = self.scache
            _this12.append(s21)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:255
            return s21
        elif (_g1 == 122):
            return 0
        else:
            pass
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:454
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:454
        _hx_local_18 = self
        _hx_local_19 = _hx_local_18.pos
        _hx_local_18.pos = (_hx_local_19 - 1)
        _hx_local_19
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:455
        _this13 = self.buf
        index8 = self.pos
        raise _HxException(((("Invalid char " + HxOverrides.stringOrNull((("" if (((index8 < 0) or ((index8 >= len(_this13))))) else _this13[index8])))) + " at position ") + Std.string(self.pos)))

    @staticmethod
    def initCodes():
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:71
        codes = list()
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:77
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:77
        _g1 = 0
        _g = len(haxe_Unserializer.BASE64)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/haxe/Unserializer.hx:78
            s = haxe_Unserializer.BASE64
            python_internal_ArrayImpl._set(codes, (-1 if ((i >= len(s))) else ord(s[i])), i)
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:79
        return codes

    @staticmethod
    def run(v):
        # /usr/local/lib/haxe/std/haxe/Unserializer.hx:466
        return haxe_Unserializer(v).unserialize()

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.buf = None
        _hx_o.pos = None
        _hx_o.length = None
        _hx_o.cache = None
        _hx_o.scache = None
        _hx_o.resolver = None
haxe_Unserializer._hx_class = haxe_Unserializer
_hx_classes["haxe.Unserializer"] = haxe_Unserializer


class User(sys_db_Object):
    _hx_class_name = "User"
    __slots__ = ("id", "name", "birthday", "phoneNumber")
    _hx_fields = ["id", "name", "birthday", "phoneNumber"]
    _hx_methods = ["__getManager"]
    _hx_statics = ["__meta__", "manager"]
    _hx_interfaces = []
    _hx_super = sys_db_Object


    def __init__(self):
        # src/User.hx:7
        self.phoneNumber = None
        # src/User.hx:6
        self.birthday = None
        # src/User.hx:5
        self.name = None
        # src/User.hx:4
        self.id = None
        # src/User.hx:3
        super().__init__()

    def _hx___getManager(self):
        # /usr/local/lib/haxe/std/sys/db/RecordMacros.hx:1413
        return User.manager

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.id = None
        _hx_o.name = None
        _hx_o.birthday = None
        _hx_o.phoneNumber = None
User._hx_class = User
_hx_classes["User"] = User


class haxe_Serializer:
    _hx_class_name = "haxe.Serializer"
    __slots__ = ("buf", "cache", "shash", "scount", "useCache", "useEnumIndex")
    _hx_fields = ["buf", "cache", "shash", "scount", "useCache", "useEnumIndex"]
    _hx_methods = ["toString", "serializeString", "serializeRef", "serializeFields", "serialize"]
    _hx_statics = ["USE_CACHE", "USE_ENUM_INDEX", "BASE64", "BASE64_CODES"]

    def __init__(self):
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:102
        self.buf = StringBuf()
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:103
        self.cache = list()
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:104
        self.useCache = haxe_Serializer.USE_CACHE
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:105
        self.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:106
        self.shash = haxe_ds_StringMap()
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:107
        self.scount = 0

    def toString(self):
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:117
        return self.buf.b.getvalue()

    def serializeString(self,s):
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:154
        x = self.shash.h.get(s,None)
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:155
        if (x is not None):
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:156
            self.buf.b.write("R")
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:157
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:157
            _this = self.buf
            s1 = Std.string(x)
            _this.b.write(s1)
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:158
            return
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:160
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:160
        value = self.scount
        self.scount = (self.scount + 1)
        self.shash.h[s] = value
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:165
        self.buf.b.write("y")
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:166
        s = python_lib_urllib_Parse.quote(s,"")
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:167
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:167
        _this1 = self.buf
        s2 = Std.string(len(s))
        _this1.b.write(s2)
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:168
        self.buf.b.write(":")
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:169
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:169
        _this2 = self.buf
        s3 = Std.string(s)
        _this2.b.write(s3)

    def serializeRef(self,v):
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:176
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:176
        _g1 = 0
        _g = len(self.cache)
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:181
            if ((self.cache[i] if i >= 0 and i < len(self.cache) else None) == v):
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:183
                self.buf.b.write("r")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:184
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:184
                _this = self.buf
                s = Std.string(i)
                _this.b.write(s)
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:185
                return True
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:188
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:188
        _this1 = self.cache
        _this1.append(v)
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:189
        return False

    def serializeFields(self,v):
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:210
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:210
        _g = 0
        _g1 = python_Boot.fields(v)
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:211
            self.serializeString(f)
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:212
            self.serialize(Reflect.field(v,f))
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:214
        self.buf.b.write("g")

    def serialize(self,v):
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:228
        _g = Type.typeof(v)
        _g1 = _g.index
        # /usr/local/lib/haxe/std/haxe/Serializer.hx:230
        if (_g1 == 0):
            self.buf.b.write("n")
        elif (_g1 == 1):
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:232
            v1 = v
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:233
            if (v1 == 0):
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:234
                self.buf.b.write("z")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:235
                return
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:237
            self.buf.b.write("i")
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:238
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:238
            _this = self.buf
            s = Std.string(v1)
            _this.b.write(s)
        elif (_g1 == 2):
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:240
            v2 = v
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:241
            if python_lib_Math.isnan(v2):
                self.buf.b.write("k")
            elif (not ((((v2 != Math.POSITIVE_INFINITY) and ((v2 != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(v2))))):
                self.buf.b.write(("m" if ((v2 < 0)) else "p"))
            else:
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:246
                self.buf.b.write("d")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:247
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:247
                _this1 = self.buf
                s1 = Std.string(v2)
                _this1.b.write(s1)
        elif (_g1 == 3):
            self.buf.b.write(("t" if v else "f"))
        elif (_g1 == 4):
            if Std._hx_is(v,Class):
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:399
                className = Type.getClassName(v)
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:405
                self.buf.b.write("A")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:406
                self.serializeString(className)
            elif Std._hx_is(v,Enum):
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:408
                self.buf.b.write("B")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:409
                self.serializeString(Type.getEnumName(v))
            else:
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:411
                if (self.useCache and self.serializeRef(v)):
                    return
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:413
                self.buf.b.write("o")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:414
                self.serializeFields(v)
        elif (_g1 == 5):
            raise _HxException("Cannot serialize function")
        elif (_g1 == 6):
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:251
            c = _g.params[0]
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:252
            if (c == str):
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:253
                self.serializeString(v)
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:254
                return
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:256
            if (self.useCache and self.serializeRef(v)):
                return
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:258
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:258
            _g2 = Type.getClassName(c)
            _g3 = _g2
            _hx_local_0 = len(_g3)
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:318
            if (_hx_local_0 == 17):
                if (_g3 == "haxe.ds.ObjectMap"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:319
                    self.buf.b.write("M")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:320
                    v6 = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:321
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:321
                    k2 = v6.keys()
                    while k2.hasNext():
                        k3 = k2.next()
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:328
                        self.serialize(k3)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:330
                        self.serialize(v6.h.get(k3,None))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:332
                    self.buf.b.write("h")
                elif (_g3 == "haxe.ds.StringMap"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:302
                    self.buf.b.write("b")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:303
                    v7 = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:304
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:304
                    k4 = v7.keys()
                    while k4.hasNext():
                        k5 = k4.next()
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:305
                        self.serializeString(k5)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:306
                        self.serialize(v7.h.get(k5,None))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:308
                    self.buf.b.write("h")
                else:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                    if self.useCache:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                        _this16 = self.cache
                        if (len(_this16) != 0):
                            _this16.pop()
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:380
                    if hasattr(v,(("_hx_" + "hxSerialize") if (("hxSerialize" in python_Boot.keywords)) else (("_hx_" + "hxSerialize") if (((((len("hxSerialize") > 2) and ((ord("hxSerialize"[0]) == 95))) and ((ord("hxSerialize"[1]) == 95))) and ((ord("hxSerialize"[(len("hxSerialize") - 1)]) != 95)))) else "hxSerialize"))):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:381
                        self.buf.b.write("C")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:382
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                        if self.useCache:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                            _this17 = self.cache
                            _this17.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:384
                        Reflect.field(v,"hxSerialize")(self)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:385
                        self.buf.b.write("g")
                    else:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:387
                        self.buf.b.write("c")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:388
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                        if self.useCache:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                            _this18 = self.cache
                            _this18.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:393
                        self.serializeFields(v)
            elif (_hx_local_0 == 5):
                if (_g3 == "Array"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:260
                    ucount = 0
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:261
                    self.buf.b.write("a")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:263
                    v3 = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:265
                    l = len(v3)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:266
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:266
                    _g11 = 0
                    _g4 = l
                    while (_g11 < _g4):
                        i = _g11
                        _g11 = (_g11 + 1)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:267
                        if ((v3[i] if i >= 0 and i < len(v3) else None) is None):
                            ucount = (ucount + 1)
                        else:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:270
                            if (ucount > 0):
                                # /usr/local/lib/haxe/std/haxe/Serializer.hx:271
                                if (ucount == 1):
                                    self.buf.b.write("n")
                                else:
                                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:274
                                    self.buf.b.write("u")
                                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:275
                                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:275
                                    _this2 = self.buf
                                    s2 = Std.string(ucount)
                                    _this2.b.write(s2)
                                # /usr/local/lib/haxe/std/haxe/Serializer.hx:277
                                ucount = 0
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:279
                            self.serialize((v3[i] if i >= 0 and i < len(v3) else None))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:282
                    if (ucount > 0):
                        if (ucount == 1):
                            self.buf.b.write("n")
                        else:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:286
                            self.buf.b.write("u")
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:287
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:287
                            _this3 = self.buf
                            s3 = Std.string(ucount)
                            _this3.b.write(s3)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:290
                    self.buf.b.write("h")
                else:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                    if self.useCache:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                        _this16 = self.cache
                        if (len(_this16) != 0):
                            _this16.pop()
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:380
                    if hasattr(v,(("_hx_" + "hxSerialize") if (("hxSerialize" in python_Boot.keywords)) else (("_hx_" + "hxSerialize") if (((((len("hxSerialize") > 2) and ((ord("hxSerialize"[0]) == 95))) and ((ord("hxSerialize"[1]) == 95))) and ((ord("hxSerialize"[(len("hxSerialize") - 1)]) != 95)))) else "hxSerialize"))):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:381
                        self.buf.b.write("C")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:382
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                        if self.useCache:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                            _this17 = self.cache
                            _this17.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:384
                        Reflect.field(v,"hxSerialize")(self)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:385
                        self.buf.b.write("g")
                    else:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:387
                        self.buf.b.write("c")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:388
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                        if self.useCache:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                            _this18 = self.cache
                            _this18.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:393
                        self.serializeFields(v)
            elif (_hx_local_0 == 4):
                if (_g3 == "Date"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:298
                    d = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:299
                    self.buf.b.write("v")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:300
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:300
                    _this4 = self.buf
                    s4 = Std.string((python_lib_Time.mktime(d.date.timetuple()) * 1000))
                    _this4.b.write(s4)
                elif (_g3 == "List"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:292
                    self.buf.b.write("l")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:293
                    v4 = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:294
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:294
                    _g_head = v4.h
                    while (_g_head is not None):
                        val = _g_head.item
                        _g_head = _g_head.next
                        i1 = val
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:295
                        self.serialize(i1)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:296
                    self.buf.b.write("h")
                else:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                    if self.useCache:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                        _this16 = self.cache
                        if (len(_this16) != 0):
                            _this16.pop()
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:380
                    if hasattr(v,(("_hx_" + "hxSerialize") if (("hxSerialize" in python_Boot.keywords)) else (("_hx_" + "hxSerialize") if (((((len("hxSerialize") > 2) and ((ord("hxSerialize"[0]) == 95))) and ((ord("hxSerialize"[1]) == 95))) and ((ord("hxSerialize"[(len("hxSerialize") - 1)]) != 95)))) else "hxSerialize"))):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:381
                        self.buf.b.write("C")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:382
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                        if self.useCache:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                            _this17 = self.cache
                            _this17.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:384
                        Reflect.field(v,"hxSerialize")(self)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:385
                        self.buf.b.write("g")
                    else:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:387
                        self.buf.b.write("c")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:388
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                        if self.useCache:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                            _this18 = self.cache
                            _this18.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:393
                        self.serializeFields(v)
            elif (_hx_local_0 == 13):
                if (_g3 == "haxe.io.Bytes"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:334
                    v8 = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:343
                    self.buf.b.write("s")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:344
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:344
                    _this6 = self.buf
                    s6 = Std.string(Math.ceil(((v8.length * 8) / 6)))
                    _this6.b.write(s6)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:345
                    self.buf.b.write(":")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:347
                    i2 = 0
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:348
                    _hx_max = (v8.length - 2)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:349
                    b64 = haxe_Serializer.BASE64_CODES
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:350
                    if (b64 is None):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:351
                        this1 = [None]*len(haxe_Serializer.BASE64)
                        b64 = this1
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:352
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:352
                        _g12 = 0
                        _g5 = len(haxe_Serializer.BASE64)
                        while (_g12 < _g5):
                            i3 = _g12
                            _g12 = (_g12 + 1)
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:353
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:353
                            val1 = HxString.charCodeAt(haxe_Serializer.BASE64,i3)
                            b64[i3] = val1
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:354
                        haxe_Serializer.BASE64_CODES = b64
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:356
                    while (i2 < _hx_max):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:357
                        pos = i2
                        i2 = (i2 + 1)
                        b1 = v8.b[pos]
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:358
                        pos1 = i2
                        i2 = (i2 + 1)
                        b2 = v8.b[pos1]
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:359
                        pos2 = i2
                        i2 = (i2 + 1)
                        b3 = v8.b[pos2]
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:361
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:361
                        _this7 = self.buf
                        c1 = b64[(b1 >> 2)]
                        s7 = "".join(map(chr,[c1]))
                        _this7.b.write(s7)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:362
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:362
                        _this8 = self.buf
                        c2 = b64[((((b1 << 4) | ((b2 >> 4)))) & 63)]
                        s8 = "".join(map(chr,[c2]))
                        _this8.b.write(s8)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:363
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:363
                        _this9 = self.buf
                        c3 = b64[((((b2 << 2) | ((b3 >> 6)))) & 63)]
                        s9 = "".join(map(chr,[c3]))
                        _this9.b.write(s9)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:364
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:364
                        _this10 = self.buf
                        c4 = b64[(b3 & 63)]
                        s10 = "".join(map(chr,[c4]))
                        _this10.b.write(s10)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:366
                    if (i2 == _hx_max):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:367
                        pos3 = i2
                        i2 = (i2 + 1)
                        b11 = v8.b[pos3]
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:368
                        pos4 = i2
                        i2 = (i2 + 1)
                        b21 = v8.b[pos4]
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:369
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:369
                        _this11 = self.buf
                        c5 = b64[(b11 >> 2)]
                        s11 = "".join(map(chr,[c5]))
                        _this11.b.write(s11)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:370
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:370
                        _this12 = self.buf
                        c6 = b64[((((b11 << 4) | ((b21 >> 4)))) & 63)]
                        s12 = "".join(map(chr,[c6]))
                        _this12.b.write(s12)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:371
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:371
                        _this13 = self.buf
                        c7 = b64[((b21 << 2) & 63)]
                        s13 = "".join(map(chr,[c7]))
                        _this13.b.write(s13)
                    elif (i2 == ((_hx_max + 1))):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:373
                        pos5 = i2
                        i2 = (i2 + 1)
                        b12 = v8.b[pos5]
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:374
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:374
                        _this14 = self.buf
                        c8 = b64[(b12 >> 2)]
                        s14 = "".join(map(chr,[c8]))
                        _this14.b.write(s14)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:375
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:375
                        _this15 = self.buf
                        c9 = b64[((b12 << 4) & 63)]
                        s15 = "".join(map(chr,[c9]))
                        _this15.b.write(s15)
                else:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                    if self.useCache:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                        _this16 = self.cache
                        if (len(_this16) != 0):
                            _this16.pop()
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:380
                    if hasattr(v,(("_hx_" + "hxSerialize") if (("hxSerialize" in python_Boot.keywords)) else (("_hx_" + "hxSerialize") if (((((len("hxSerialize") > 2) and ((ord("hxSerialize"[0]) == 95))) and ((ord("hxSerialize"[1]) == 95))) and ((ord("hxSerialize"[(len("hxSerialize") - 1)]) != 95)))) else "hxSerialize"))):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:381
                        self.buf.b.write("C")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:382
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                        if self.useCache:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                            _this17 = self.cache
                            _this17.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:384
                        Reflect.field(v,"hxSerialize")(self)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:385
                        self.buf.b.write("g")
                    else:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:387
                        self.buf.b.write("c")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:388
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                        if self.useCache:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                            _this18 = self.cache
                            _this18.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:393
                        self.serializeFields(v)
            elif (_hx_local_0 == 14):
                if (_g3 == "haxe.ds.IntMap"):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:310
                    self.buf.b.write("q")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:311
                    v5 = v
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:312
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:312
                    k = v5.keys()
                    while k.hasNext():
                        k1 = k.next()
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:313
                        self.buf.b.write(":")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:314
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:314
                        _this5 = self.buf
                        s5 = Std.string(k1)
                        _this5.b.write(s5)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:315
                        self.serialize(v5.h.get(k1,None))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:317
                    self.buf.b.write("h")
                else:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                    if self.useCache:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                        _this16 = self.cache
                        if (len(_this16) != 0):
                            _this16.pop()
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:380
                    if hasattr(v,(("_hx_" + "hxSerialize") if (("hxSerialize" in python_Boot.keywords)) else (("_hx_" + "hxSerialize") if (((((len("hxSerialize") > 2) and ((ord("hxSerialize"[0]) == 95))) and ((ord("hxSerialize"[1]) == 95))) and ((ord("hxSerialize"[(len("hxSerialize") - 1)]) != 95)))) else "hxSerialize"))):
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:381
                        self.buf.b.write("C")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:382
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                        if self.useCache:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                            _this17 = self.cache
                            _this17.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:384
                        Reflect.field(v,"hxSerialize")(self)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:385
                        self.buf.b.write("g")
                    else:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:387
                        self.buf.b.write("c")
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:388
                        self.serializeString(Type.getClassName(c))
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                        if self.useCache:
                            # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                            _this18 = self.cache
                            _this18.append(v)
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:393
                        self.serializeFields(v)
            else:
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                if self.useCache:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:379
                    _this16 = self.cache
                    if (len(_this16) != 0):
                        _this16.pop()
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:380
                if hasattr(v,(("_hx_" + "hxSerialize") if (("hxSerialize" in python_Boot.keywords)) else (("_hx_" + "hxSerialize") if (((((len("hxSerialize") > 2) and ((ord("hxSerialize"[0]) == 95))) and ((ord("hxSerialize"[1]) == 95))) and ((ord("hxSerialize"[(len("hxSerialize") - 1)]) != 95)))) else "hxSerialize"))):
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:381
                    self.buf.b.write("C")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:382
                    self.serializeString(Type.getClassName(c))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                    if self.useCache:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:383
                        _this17 = self.cache
                        _this17.append(v)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:384
                    Reflect.field(v,"hxSerialize")(self)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:385
                    self.buf.b.write("g")
                else:
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:387
                    self.buf.b.write("c")
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:388
                    self.serializeString(Type.getClassName(c))
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                    if self.useCache:
                        # /usr/local/lib/haxe/std/haxe/Serializer.hx:389
                        _this18 = self.cache
                        _this18.append(v)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:393
                    self.serializeFields(v)
        elif (_g1 == 7):
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:416
            e = _g.params[0]
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:417
            if self.useCache:
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:418
                if self.serializeRef(v):
                    return
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:420
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:420
                _this19 = self.cache
                if (len(_this19) != 0):
                    _this19.pop()
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:422
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:422
            _this20 = self.buf
            s16 = Std.string(("j" if (self.useEnumIndex) else "w"))
            _this20.b.write(s16)
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:423
            self.serializeString(Type.getEnumName(e))
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:488
            if self.useEnumIndex:
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:489
                self.buf.b.write(":")
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:490
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:490
                _this21 = self.buf
                s17 = Std.string(v.index)
                _this21.b.write(s17)
            else:
                self.serializeString(v.tag)
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:493
            self.buf.b.write(":")
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:494
            arr = v.params
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:495
            if (arr is not None):
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:497
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:497
                _this22 = self.buf
                s18 = Std.string(len(arr))
                _this22.b.write(s18)
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:498
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:498
                _g6 = 0
                while (_g6 < len(arr)):
                    v9 = (arr[_g6] if _g6 >= 0 and _g6 < len(arr) else None)
                    _g6 = (_g6 + 1)
                    # /usr/local/lib/haxe/std/haxe/Serializer.hx:499
                    self.serialize(v9)
            else:
                self.buf.b.write("0")
            # /usr/local/lib/haxe/std/haxe/Serializer.hx:516
            if self.useCache:
                # /usr/local/lib/haxe/std/haxe/Serializer.hx:516
                _this23 = self.cache
                _this23.append(v)
        else:
            raise _HxException(("Cannot serialize " + Std.string(v)))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.buf = None
        _hx_o.cache = None
        _hx_o.shash = None
        _hx_o.scount = None
        _hx_o.useCache = None
        _hx_o.useEnumIndex = None
haxe_Serializer._hx_class = haxe_Serializer
_hx_classes["haxe.Serializer"] = haxe_Serializer


class haxe_ds_IntMap:
    _hx_class_name = "haxe.ds.IntMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["set", "keys"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/IntMap.hx:31
        self.h = dict()

    def set(self,key,value):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/IntMap.hx:35
        self.h[key] = value

    def keys(self):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/IntMap.hx:54
        return python_HaxeIterator(iter(self.h.keys()))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.h = None
haxe_ds_IntMap._hx_class = haxe_ds_IntMap
_hx_classes["haxe.ds.IntMap"] = haxe_ds_IntMap


class haxe_ds_ObjectMap:
    _hx_class_name = "haxe.ds.ObjectMap"
    __slots__ = ("h",)
    _hx_fields = ["h"]
    _hx_methods = ["set", "keys"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/ObjectMap.hx:32
        self.h = dict()

    def set(self,key,value):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/ObjectMap.hx:36
        self.h[key] = value

    def keys(self):
        # /usr/local/lib/haxe/std/python/_std/haxe/ds/ObjectMap.hx:55
        return python_HaxeIterator(iter(self.h.keys()))

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.h = None
haxe_ds_ObjectMap._hx_class = haxe_ds_ObjectMap
_hx_classes["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap


class haxe_io_Bytes:
    _hx_class_name = "haxe.io.Bytes"
    __slots__ = ("length", "b")
    _hx_fields = ["length", "b"]
    _hx_methods = ["compare", "getString", "toString"]
    _hx_statics = ["alloc", "ofString"]

    def __init__(self,length,b):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:34
        self.length = length
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:35
        self.b = b

    def compare(self,other):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:197
        b1 = self.b
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:198
        b2 = other.b
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:199
        _hx_len = (self.length if ((self.length < other.length)) else other.length)
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:200
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:200
        _g1 = 0
        _g = _hx_len
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:201
            if (b1[i] != b2[i]):
                return (b1[i] - b2[i])
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:203
        return (self.length - other.length)

    def getString(self,pos,_hx_len):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:362
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > self.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:382
        return self.b[pos:pos+_hx_len].decode('UTF-8','replace')

    def toString(self):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:440
        return self.getString(0,self.length)

    @staticmethod
    def alloc(length):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:480
        return haxe_io_Bytes(length,bytearray(length))

    @staticmethod
    def ofString(s):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:516
        b = bytearray(s,"UTF-8")
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:517
        return haxe_io_Bytes(len(b),b)

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.length = None
        _hx_o.b = None
haxe_io_Bytes._hx_class = haxe_io_Bytes
_hx_classes["haxe.io.Bytes"] = haxe_io_Bytes


class haxe_io_Eof:
    _hx_class_name = "haxe.io.Eof"
    __slots__ = ()
    _hx_methods = ["toString"]

    def toString(self):
        # /usr/local/lib/haxe/std/haxe/io/Eof.hx:31
        return "Eof"

    @staticmethod
    def _hx_empty_init(_hx_o):        pass
haxe_io_Eof._hx_class = haxe_io_Eof
_hx_classes["haxe.io.Eof"] = haxe_io_Eof

class haxe_io_Error(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Error"
    _hx_constructs = ["Blocked", "Overflow", "OutsideBounds", "Custom"]

    @staticmethod
    def Custom(e):
        return haxe_io_Error("Custom", 3, [e])
haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, list())
haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, list())
haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, list())
haxe_io_Error._hx_class = haxe_io_Error
_hx_classes["haxe.io.Error"] = haxe_io_Error


class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        # /usr/local/lib/haxe/std/python/Boot.hx:94
        if (o is None):
            return "null"
        # /usr/local/lib/haxe/std/python/Boot.hx:96
        if isinstance(o,str):
            return o
        # /usr/local/lib/haxe/std/python/Boot.hx:98
        if (s is None):
            s = ""
        # /usr/local/lib/haxe/std/python/Boot.hx:99
        if (len(s) >= 5):
            return "<...>"
        # /usr/local/lib/haxe/std/python/Boot.hx:101
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        # /usr/local/lib/haxe/std/python/Boot.hx:104
        if isinstance(o,int):
            return str(o)
        # /usr/local/lib/haxe/std/python/Boot.hx:108
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        # /usr/local/lib/haxe/std/python/Boot.hx:120
        if isinstance(o,list):
            # /usr/local/lib/haxe/std/python/Boot.hx:122
            o1 = o
            # /usr/local/lib/haxe/std/python/Boot.hx:124
            l = len(o1)
            # /usr/local/lib/haxe/std/python/Boot.hx:126
            st = "["
            # /usr/local/lib/haxe/std/python/Boot.hx:127
            s = (("null" if s is None else s) + "\t")
            # /usr/local/lib/haxe/std/python/Boot.hx:128
            # /usr/local/lib/haxe/std/python/Boot.hx:128
            _g1 = 0
            _g = l
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                # /usr/local/lib/haxe/std/python/Boot.hx:129
                prefix = ""
                # /usr/local/lib/haxe/std/python/Boot.hx:130
                if (i > 0):
                    prefix = ","
                # /usr/local/lib/haxe/std/python/Boot.hx:133
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            # /usr/local/lib/haxe/std/python/Boot.hx:135
            st = (("null" if st is None else st) + "]")
            # /usr/local/lib/haxe/std/python/Boot.hx:136
            return st
        # /usr/local/lib/haxe/std/python/Boot.hx:139
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        # /usr/local/lib/haxe/std/python/Boot.hx:145
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        # /usr/local/lib/haxe/std/python/Boot.hx:147
        if hasattr(o,"__class__"):
            # /usr/local/lib/haxe/std/python/Boot.hx:150
            if isinstance(o,_hx_AnonObject):
                # /usr/local/lib/haxe/std/python/Boot.hx:152
                toStr = None
                # /usr/local/lib/haxe/std/python/Boot.hx:153
                try:
                    # /usr/local/lib/haxe/std/python/Boot.hx:155
                    fields = python_Boot.fields(o)
                    # /usr/local/lib/haxe/std/python/Boot.hx:156
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g2.append(x)
                    fieldsStr = _g2
                    # /usr/local/lib/haxe/std/python/Boot.hx:157
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                # /usr/local/lib/haxe/std/python/Boot.hx:163
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            # /usr/local/lib/haxe/std/python/Boot.hx:173
            if isinstance(o,Enum):
                # /usr/local/lib/haxe/std/python/Boot.hx:175
                o2 = o
                # /usr/local/lib/haxe/std/python/Boot.hx:177
                l1 = len(o2.params)
                # /usr/local/lib/haxe/std/python/Boot.hx:178
                hasParams = (l1 > 0)
                # /usr/local/lib/haxe/std/python/Boot.hx:179
                if hasParams:
                    # /usr/local/lib/haxe/std/python/Boot.hx:180
                    paramsStr = ""
                    # /usr/local/lib/haxe/std/python/Boot.hx:181
                    # /usr/local/lib/haxe/std/python/Boot.hx:181
                    _g12 = 0
                    _g3 = l1
                    while (_g12 < _g3):
                        i1 = _g12
                        _g12 = (_g12 + 1)
                        # /usr/local/lib/haxe/std/python/Boot.hx:182
                        prefix1 = ""
                        # /usr/local/lib/haxe/std/python/Boot.hx:183
                        if (i1 > 0):
                            prefix1 = ","
                        # /usr/local/lib/haxe/std/python/Boot.hx:186
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    # /usr/local/lib/haxe/std/python/Boot.hx:188
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            # /usr/local/lib/haxe/std/python/Boot.hx:194
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    # /usr/local/lib/haxe/std/python/Boot.hx:196
                    fields1 = python_Boot.getInstanceFields(o)
                    # /usr/local/lib/haxe/std/python/Boot.hx:197
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        x1 = ((("" + ("null" if f1 is None else f1)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))))
                        _g4.append(x1)
                    fieldsStr1 = _g4
                    # /usr/local/lib/haxe/std/python/Boot.hx:199
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    # /usr/local/lib/haxe/std/python/Boot.hx:200
                    return toStr1
                else:
                    # /usr/local/lib/haxe/std/python/Boot.hx:202
                    fields2 = python_Boot.getClassFields(o)
                    # /usr/local/lib/haxe/std/python/Boot.hx:203
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        x2 = ((("" + ("null" if f2 is None else f2)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))))
                        _g5.append(x2)
                    fieldsStr2 = _g5
                    # /usr/local/lib/haxe/std/python/Boot.hx:204
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    # /usr/local/lib/haxe/std/python/Boot.hx:205
                    return toStr2
            # /usr/local/lib/haxe/std/python/Boot.hx:209
            if (o == str):
                return "#String"
            # /usr/local/lib/haxe/std/python/Boot.hx:213
            if (o == list):
                return "#Array"
            # /usr/local/lib/haxe/std/python/Boot.hx:217
            if callable(o):
                return "function"
            # /usr/local/lib/haxe/std/python/Boot.hx:220
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            # /usr/local/lib/haxe/std/python/Boot.hx:226
            if hasattr(o,"__str__"):
                return o.__str__([])
            # /usr/local/lib/haxe/std/python/Boot.hx:230
            if hasattr(o,"__name__"):
                return o.__name__
            # /usr/local/lib/haxe/std/python/Boot.hx:233
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        # /usr/local/lib/haxe/std/python/Boot.hx:245
        a = []
        # /usr/local/lib/haxe/std/python/Boot.hx:246
        if (o is not None):
            # /usr/local/lib/haxe/std/python/Boot.hx:247
            if hasattr(o,"_hx_fields"):
                # /usr/local/lib/haxe/std/python/Boot.hx:248
                fields = o._hx_fields
                # /usr/local/lib/haxe/std/python/Boot.hx:249
                return list(fields)
            # /usr/local/lib/haxe/std/python/Boot.hx:251
            if isinstance(o,_hx_AnonObject):
                # /usr/local/lib/haxe/std/python/Boot.hx:253
                d = o.__dict__
                # /usr/local/lib/haxe/std/python/Boot.hx:254
                keys = d.keys()
                # /usr/local/lib/haxe/std/python/Boot.hx:255
                handler = python_Boot.unhandleKeywords
                # /usr/local/lib/haxe/std/python/Boot.hx:257
                for k in keys:
                # /usr/local/lib/haxe/std/python/Boot.hx:258
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                # /usr/local/lib/haxe/std/python/Boot.hx:262
                d1 = o.__dict__
                # /usr/local/lib/haxe/std/python/Boot.hx:263
                keys1 = d1.keys()
                # /usr/local/lib/haxe/std/python/Boot.hx:264
                for k in keys1:
                # /usr/local/lib/haxe/std/python/Boot.hx:265
                    a.append(k)
        # /usr/local/lib/haxe/std/python/Boot.hx:269
        return a

    @staticmethod
    def simpleField(o,field):
        # /usr/local/lib/haxe/std/python/Boot.hx:281
        if (field is None):
            return None
        # /usr/local/lib/haxe/std/python/Boot.hx:283
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        # /usr/local/lib/haxe/std/python/Boot.hx:284
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        # /usr/local/lib/haxe/std/python/Boot.hx:288
        if (field is None):
            return None
        # /usr/local/lib/haxe/std/python/Boot.hx:290
        field1 = field
        _hx_local_0 = len(field1)
        # /usr/local/lib/haxe/std/python/Boot.hx:295
        if (_hx_local_0 == 10):
            if (field1 == "charCodeAt"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:295
                    s1 = o
                    def _hx_local_1(a11):
                        return HxString.charCodeAt(s1,a11)
                    return _hx_local_1
        elif (_hx_local_0 == 11):
            if (field1 == "lastIndexOf"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:297
                    s3 = o
                    def _hx_local_2(a15):
                        return HxString.lastIndexOf(s3,a15)
                    return _hx_local_2
                elif isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:315
                    a4 = o
                    def _hx_local_3(x4):
                        return python_internal_ArrayImpl.lastIndexOf(a4,x4)
                    return _hx_local_3
            elif (field1 == "toLowerCase"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:292
                    s7 = o
                    def _hx_local_4():
                        return HxString.toLowerCase(s7)
                    return _hx_local_4
            elif (field1 == "toUpperCase"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:293
                    s9 = o
                    def _hx_local_5():
                        return HxString.toUpperCase(s9)
                    return _hx_local_5
        elif (_hx_local_0 == 9):
            if (field1 == "substring"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:300
                    s6 = o
                    def _hx_local_6(a19):
                        return HxString.substring(s6,a19)
                    return _hx_local_6
        elif (_hx_local_0 == 4):
            if (field1 == "copy"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:306
                    def _hx_local_7():
                        # /usr/local/lib/haxe/std/python/Boot.hx:306
                        return list(o)
                    return _hx_local_7
            elif (field1 == "join"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:309
                    def _hx_local_8(sep):
                        # /usr/local/lib/haxe/std/python/Boot.hx:309
                        return sep.join([python_Boot.toString1(x1,'') for x1 in o])
                    return _hx_local_8
            elif (field1 == "push"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:312
                    x7 = o
                    def _hx_local_9(e):
                        return python_internal_ArrayImpl.push(x7,e)
                    return _hx_local_9
            elif (field1 == "sort"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:320
                    x11 = o
                    def _hx_local_10(f2):
                        python_internal_ArrayImpl.sort(x11,f2)
                    return _hx_local_10
        elif (_hx_local_0 == 5):
            if (field1 == "shift"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:318
                    x9 = o
                    def _hx_local_11():
                        return python_internal_ArrayImpl.shift(x9)
                    return _hx_local_11
            elif (field1 == "slice"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:319
                    x10 = o
                    def _hx_local_12(a16):
                        return python_internal_ArrayImpl.slice(x10,a16)
                    return _hx_local_12
            elif (field1 == "split"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:298
                    s4 = o
                    def _hx_local_13(d):
                        return HxString.split(s4,d)
                    return _hx_local_13
        elif (_hx_local_0 == 7):
            if (field1 == "indexOf"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:296
                    s2 = o
                    def _hx_local_14(a13):
                        return HxString.indexOf(s2,a13)
                    return _hx_local_14
                elif isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:314
                    a = o
                    def _hx_local_15(x1):
                        return python_internal_ArrayImpl.indexOf(a,x1)
                    return _hx_local_15
            elif (field1 == "reverse"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:317
                    a5 = o
                    def _hx_local_16():
                        python_internal_ArrayImpl.reverse(a5)
                    return _hx_local_16
            elif (field1 == "unshift"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:313
                    x14 = o
                    def _hx_local_17(e2):
                        python_internal_ArrayImpl.unshift(x14,e2)
                    return _hx_local_17
        elif (_hx_local_0 == 3):
            if (field1 == "map"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:303
                    x5 = o
                    def _hx_local_18(f1):
                        return python_internal_ArrayImpl.map(x5,f1)
                    return _hx_local_18
            elif (field1 == "pop"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:311
                    x6 = o
                    def _hx_local_19():
                        return python_internal_ArrayImpl.pop(x6)
                    return _hx_local_19
        elif (_hx_local_0 == 8):
            if (field1 == "iterator"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:307
                    x3 = o
                    def _hx_local_20():
                        return python_internal_ArrayImpl.iterator(x3)
                    return _hx_local_20
            elif (field1 == "toString"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:301
                    s8 = o
                    def _hx_local_21():
                        return HxString.toString(s8)
                    return _hx_local_21
                elif isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:310
                    x13 = o
                    def _hx_local_22():
                        return python_internal_ArrayImpl.toString(x13)
                    return _hx_local_22
        elif (_hx_local_0 == 6):
            if (field1 == "charAt"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:294
                    s = o
                    def _hx_local_23(a1):
                        return HxString.charAt(s,a1)
                    return _hx_local_23
            elif (field1 == "concat"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:305
                    a12 = o
                    def _hx_local_24(a2):
                        return python_internal_ArrayImpl.concat(a12,a2)
                    return _hx_local_24
            elif (field1 == "filter"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:304
                    x = o
                    def _hx_local_25(f):
                        return python_internal_ArrayImpl.filter(x,f)
                    return _hx_local_25
            elif (field1 == "insert"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:308
                    a3 = o
                    def _hx_local_26(a14,x2):
                        python_internal_ArrayImpl.insert(a3,a14,x2)
                    return _hx_local_26
            elif (field1 == "length"):
                if isinstance(o,str):
                    return len(o)
                elif isinstance(o,list):
                    return len(o)
            elif (field1 == "remove"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:316
                    x8 = o
                    def _hx_local_27(e1):
                        return python_internal_ArrayImpl.remove(x8,e1)
                    return _hx_local_27
            elif (field1 == "splice"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:321
                    x12 = o
                    def _hx_local_28(a17,a21):
                        return python_internal_ArrayImpl.splice(x12,a17,a21)
                    return _hx_local_28
            elif (field1 == "substr"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:299
                    s5 = o
                    def _hx_local_29(a18):
                        return HxString.substr(s5,a18)
                    return _hx_local_29
        else:
            pass
        # /usr/local/lib/haxe/std/python/Boot.hx:325
        field2 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        # /usr/local/lib/haxe/std/python/Boot.hx:326
        if hasattr(o,field2):
            return getattr(o,field2)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        # /usr/local/lib/haxe/std/python/Boot.hx:331
        f = (c._hx_fields if (hasattr(c,"_hx_fields")) else [])
        # /usr/local/lib/haxe/std/python/Boot.hx:332
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        # /usr/local/lib/haxe/std/python/Boot.hx:335
        sc = python_Boot.getSuperClass(c)
        # /usr/local/lib/haxe/std/python/Boot.hx:337
        if (sc is None):
            return f
        else:
            # /usr/local/lib/haxe/std/python/Boot.hx:341
            scArr = python_Boot.getInstanceFields(sc)
            # /usr/local/lib/haxe/std/python/Boot.hx:342
            scMap = set(scArr)
            # /usr/local/lib/haxe/std/python/Boot.hx:345
            # /usr/local/lib/haxe/std/python/Boot.hx:345
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                # /usr/local/lib/haxe/std/python/Boot.hx:346
                if (not (f1 in scMap)):
                    scArr.append(f1)
            # /usr/local/lib/haxe/std/python/Boot.hx:351
            return scArr

    @staticmethod
    def getSuperClass(c):
        # /usr/local/lib/haxe/std/python/Boot.hx:356
        if (c is None):
            return None
        # /usr/local/lib/haxe/std/python/Boot.hx:359
        try:
            # /usr/local/lib/haxe/std/python/Boot.hx:360
            if hasattr(c,"_hx_super"):
                return c._hx_super
            # /usr/local/lib/haxe/std/python/Boot.hx:363
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        # /usr/local/lib/haxe/std/python/Boot.hx:367
        return None

    @staticmethod
    def getClassFields(c):
        # /usr/local/lib/haxe/std/python/Boot.hx:372
        if hasattr(c,"_hx_statics"):
            # /usr/local/lib/haxe/std/python/Boot.hx:373
            x = c._hx_statics
            # /usr/local/lib/haxe/std/python/Boot.hx:374
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        # /usr/local/lib/haxe/std/python/Boot.hx:398
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            # /usr/local/lib/haxe/std/python/Boot.hx:399
            real = HxString.substr(name,python_Boot.prefixLength,None)
            # /usr/local/lib/haxe/std/python/Boot.hx:400
            if (real in python_Boot.keywords):
                return real
        # /usr/local/lib/haxe/std/python/Boot.hx:402
        return name
python_Boot._hx_class = python_Boot
_hx_classes["python.Boot"] = python_Boot


class python_Lib:
    _hx_class_name = "python.Lib"
    __slots__ = ()
    _hx_statics = ["print"]

    @staticmethod
    def print(v):
        # /usr/local/lib/haxe/std/python/Lib.hx:40
        _hx_str = Std.string(v)
        # /usr/local/lib/haxe/std/python/Lib.hx:42
        python_lib_Sys.stdout.buffer.write(_hx_str.encode("utf-8", "strict"))
        # /usr/local/lib/haxe/std/python/Lib.hx:43
        python_lib_Sys.stdout.flush()
python_Lib._hx_class = python_Lib
_hx_classes["python.Lib"] = python_Lib


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "iterator", "indexOf", "lastIndexOf", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get", "_set"]

    @staticmethod
    def concat(a1,a2):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:35
        return (a1 + a2)

    @staticmethod
    def iterator(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:45
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:50
        _hx_len = len(a)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:51
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:55
        if (l < 0):
            l = 0
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:56
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:56
        _g1 = l
        _g = _hx_len
        while (_g1 < _g):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:57
            if (a[i] == x):
                return i
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:59
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:64
        _hx_len = len(a)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:65
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:69
        if (l > _hx_len):
            l = _hx_len
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:70
        while True:
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:70
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:71
            if (a[l] == x):
                return l
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:73
        return -1

    @staticmethod
    def toString(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:84
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:89
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:94
        x.append(e)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:95
        return len(x)

    @staticmethod
    def unshift(x,e):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:100
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:105
        try:
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:106
            x.remove(e)
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:107
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:115
        if (len(x) == 0):
            return None
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:116
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:121
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:125
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:130
        if (pos < 0):
            pos = (len(x) + pos)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:131
        if (pos < 0):
            pos = 0
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:132
        res = x[pos:(pos + _hx_len)]
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:133
        del x[pos:(pos + _hx_len)]
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:134
        return res

    @staticmethod
    def map(x,f):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:139
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:144
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:149
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:153
        a.reverse()

    @staticmethod
    def _get(x,idx):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:158
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None

    @staticmethod
    def _set(x,idx,v):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:163
        l = len(x)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:164
        while (l < idx):
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:165
            x.append(None)
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:166
            l = (l + 1)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:168
        if (l == idx):
            x.append(v)
        else:
            x[idx] = v
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:173
        return v
python_internal_ArrayImpl._hx_class = python_internal_ArrayImpl
_hx_classes["python.internal.ArrayImpl"] = python_internal_ArrayImpl


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = Exception


    def __init__(self,val):
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:28
        self.val = None
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:31
        message = str(val)
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:32
        super().__init__(message)
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:33
        self.val = val

    @staticmethod
    def _hx_empty_init(_hx_o):
        _hx_o.val = None
_HxException._hx_class = _HxException
_hx_classes["_HxException"] = _HxException


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["iterator", "eq", "stringOrNull", "toLowerCase"]

    @staticmethod
    def iterator(x):
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:39
        if isinstance(x,list):
            return python_HaxeIterator(x.__iter__())
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:42
        return x.iterator()

    @staticmethod
    def eq(a,b):
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:46
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:49
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:53
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def toLowerCase(x):
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:114
        if isinstance(x,str):
            return x.lower()
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:117
        return x.toLowerCase()
HxOverrides._hx_class = HxOverrides
_hx_classes["HxOverrides"] = HxOverrides


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:31
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:37
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:43
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:48
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:52
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:53
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:54
            check = s.find(_hx_str, startLeft, len(s))
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:55
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:66
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:70
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:74
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:81
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:97
        if (startIndex < 0):
            startIndex = 0
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:98
        if (endIndex is None):
            return s[startIndex:]
        else:
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:101
            if (endIndex < 0):
                endIndex = 0
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:102
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:113
        if (_hx_len is None):
            return s[startIndex:]
        else:
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:116
            if (_hx_len == 0):
                return ""
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:117
            return s[startIndex:(startIndex + _hx_len)]
HxString._hx_class = HxString
_hx_classes["HxString"] = HxString


class sys_db_Connection:
    _hx_class_name = "sys.db.Connection"
    __slots__ = ()
    _hx_methods = ["request", "close", "addValue", "lastInsertId", "dbName"]
sys_db_Connection._hx_class = sys_db_Connection
_hx_classes["sys.db.Connection"] = sys_db_Connection

class sys_db_RecordType(Enum):
    __slots__ = ()
    _hx_class_name = "sys.db.RecordType"
    _hx_constructs = ["DId", "DInt", "DUId", "DUInt", "DBigId", "DBigInt", "DSingle", "DFloat", "DBool", "DString", "DDate", "DDateTime", "DTimeStamp", "DTinyText", "DSmallText", "DText", "DSmallBinary", "DLongBinary", "DBinary", "DBytes", "DEncoded", "DSerialized", "DNekoSerialized", "DFlags", "DTinyInt", "DTinyUInt", "DSmallInt", "DSmallUInt", "DMediumInt", "DMediumUInt", "DData", "DEnum", "DInterval", "DNull"]

    @staticmethod
    def DString(n):
        return sys_db_RecordType("DString", 9, [n])

    @staticmethod
    def DBytes(n):
        return sys_db_RecordType("DBytes", 19, [n])

    @staticmethod
    def DFlags(flags,autoSize):
        return sys_db_RecordType("DFlags", 23, [flags,autoSize])

    @staticmethod
    def DEnum(name):
        return sys_db_RecordType("DEnum", 31, [name])
sys_db_RecordType.DId = sys_db_RecordType("DId", 0, list())
sys_db_RecordType.DInt = sys_db_RecordType("DInt", 1, list())
sys_db_RecordType.DUId = sys_db_RecordType("DUId", 2, list())
sys_db_RecordType.DUInt = sys_db_RecordType("DUInt", 3, list())
sys_db_RecordType.DBigId = sys_db_RecordType("DBigId", 4, list())
sys_db_RecordType.DBigInt = sys_db_RecordType("DBigInt", 5, list())
sys_db_RecordType.DSingle = sys_db_RecordType("DSingle", 6, list())
sys_db_RecordType.DFloat = sys_db_RecordType("DFloat", 7, list())
sys_db_RecordType.DBool = sys_db_RecordType("DBool", 8, list())
sys_db_RecordType.DDate = sys_db_RecordType("DDate", 10, list())
sys_db_RecordType.DDateTime = sys_db_RecordType("DDateTime", 11, list())
sys_db_RecordType.DTimeStamp = sys_db_RecordType("DTimeStamp", 12, list())
sys_db_RecordType.DTinyText = sys_db_RecordType("DTinyText", 13, list())
sys_db_RecordType.DSmallText = sys_db_RecordType("DSmallText", 14, list())
sys_db_RecordType.DText = sys_db_RecordType("DText", 15, list())
sys_db_RecordType.DSmallBinary = sys_db_RecordType("DSmallBinary", 16, list())
sys_db_RecordType.DLongBinary = sys_db_RecordType("DLongBinary", 17, list())
sys_db_RecordType.DBinary = sys_db_RecordType("DBinary", 18, list())
sys_db_RecordType.DEncoded = sys_db_RecordType("DEncoded", 20, list())
sys_db_RecordType.DSerialized = sys_db_RecordType("DSerialized", 21, list())
sys_db_RecordType.DNekoSerialized = sys_db_RecordType("DNekoSerialized", 22, list())
sys_db_RecordType.DTinyInt = sys_db_RecordType("DTinyInt", 24, list())
sys_db_RecordType.DTinyUInt = sys_db_RecordType("DTinyUInt", 25, list())
sys_db_RecordType.DSmallInt = sys_db_RecordType("DSmallInt", 26, list())
sys_db_RecordType.DSmallUInt = sys_db_RecordType("DSmallUInt", 27, list())
sys_db_RecordType.DMediumInt = sys_db_RecordType("DMediumInt", 28, list())
sys_db_RecordType.DMediumUInt = sys_db_RecordType("DMediumUInt", 29, list())
sys_db_RecordType.DData = sys_db_RecordType("DData", 30, list())
sys_db_RecordType.DInterval = sys_db_RecordType("DInterval", 32, list())
sys_db_RecordType.DNull = sys_db_RecordType("DNull", 33, list())
sys_db_RecordType._hx_class = sys_db_RecordType
_hx_classes["sys.db.RecordType"] = sys_db_RecordType


class sys_db_ResultSet:
    _hx_class_name = "sys.db.ResultSet"
    __slots__ = ()
    _hx_methods = ["hasNext", "next", "results"]
sys_db_ResultSet._hx_class = sys_db_ResultSet
_hx_classes["sys.db.ResultSet"] = sys_db_ResultSet


class sys_db_Sqlite:
    _hx_class_name = "sys.db.Sqlite"
    __slots__ = ()
    _hx_statics = ["open"]

    @staticmethod
    def open(file):
        # /usr/local/lib/haxe/std/sys/db/Sqlite.hx:27
        raise _HxException("Not implemented for this platform")
sys_db_Sqlite._hx_class = sys_db_Sqlite
_hx_classes["sys.db.Sqlite"] = sys_db_Sqlite


class sys_db_TableCreate:
    _hx_class_name = "sys.db.TableCreate"
    __slots__ = ()
    _hx_statics = ["autoInc", "getTypeSQL", "create", "exists"]

    @staticmethod
    def autoInc(dbName):
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:30
        if (dbName == "SQLite"):
            return "PRIMARY KEY AUTOINCREMENT"
        else:
            return "AUTO_INCREMENT"

    @staticmethod
    def getTypeSQL(t,dbName):
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:34
        t1 = t.index
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:35
        if (t1 == 0):
            return ("INTEGER " + HxOverrides.stringOrNull(sys_db_TableCreate.autoInc(dbName)))
        elif ((t1 == 20) or ((t1 == 1))):
            return "INTEGER"
        elif (t1 == 2):
            return ("INTEGER UNSIGNED " + HxOverrides.stringOrNull(sys_db_TableCreate.autoInc(dbName)))
        elif (t1 == 3):
            return "INTEGER UNSIGNED"
        elif (t1 == 4):
            return ("BIGINT " + HxOverrides.stringOrNull(sys_db_TableCreate.autoInc(dbName)))
        elif (t1 == 5):
            return "BIGINT"
        elif (t1 == 6):
            return "FLOAT"
        elif (t1 == 7):
            return "DOUBLE"
        elif (t1 == 8):
            return "TINYINT(1)"
        elif (t1 == 9):
            # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:48
            n = t.params[0]
            return (("VARCHAR(" + Std.string(n)) + ")")
        elif (t1 == 10):
            return "DATE"
        elif (t1 == 11):
            return "DATETIME"
        elif (t1 == 12):
            return "TIMESTAMP DEFAULT 0"
        elif (t1 == 13):
            return "TINYTEXT"
        elif (t1 == 14):
            return "TEXT"
        elif ((t1 == 21) or ((t1 == 15))):
            return "MEDIUMTEXT"
        elif (t1 == 16):
            return "BLOB"
        elif (t1 == 17):
            return "LONGBLOB"
        elif (((t1 == 30) or ((t1 == 22))) or ((t1 == 18))):
            return "MEDIUMBLOB"
        elif (t1 == 19):
            # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:60
            n1 = t.params[0]
            return (("BINARY(" + Std.string(n1)) + ")")
        elif (t1 == 23):
            # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:61
            auto = t.params[1]
            fl = t.params[0]
            return sys_db_TableCreate.getTypeSQL(((sys_db_RecordType.DTinyUInt if ((len(fl) <= 8)) else (sys_db_RecordType.DSmallUInt if ((len(fl) <= 16)) else (sys_db_RecordType.DMediumUInt if ((len(fl) <= 24)) else sys_db_RecordType.DInt))) if auto else sys_db_RecordType.DInt),dbName)
        elif (t1 == 24):
            return "TINYINT"
        elif ((t1 == 31) or ((t1 == 25))):
            return "TINYINT UNSIGNED"
        elif (t1 == 26):
            return "SMALLINT"
        elif (t1 == 27):
            return "SMALLINT UNSIGNED"
        elif (t1 == 28):
            return "MEDIUMINT"
        elif (t1 == 29):
            return "MEDIUMINT UNSIGNED"
        elif ((t1 == 33) or ((t1 == 32))):
            raise _HxException("assert")
        else:
            pass

    @staticmethod
    def create(manager,engine = None):
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:68
        def _hx_local_0(v):
            # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:68
            return manager.quoteField(v)
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:67
        quote = _hx_local_0
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:70
        cnx = manager.getCnx()
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:71
        if (cnx is None):
            raise _HxException("SQL Connection not initialized on Manager")
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:73
        dbName = cnx.dbName()
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:74
        infos = manager.dbInfos()
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:75
        sql = (("CREATE TABLE " + HxOverrides.stringOrNull(quote(infos.name))) + " (")
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:76
        decls = []
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:77
        hasID = False
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:78
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:78
        _g = 0
        _g1 = infos.fields
        while (_g < len(_g1)):
            f = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:79
            # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:79
            _g2 = f.t
            _g21 = _g2.index
            # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:81
            if (_g21 == 0):
                hasID = True
            elif ((_g21 == 4) or ((_g21 == 2))):
                # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:83
                hasID = True
                # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:84
                if (dbName == "SQLite"):
                    raise _HxException((((("S" + HxOverrides.stringOrNull(HxString.substr(Std.string(f.t),1,None))) + " is not supported by ") + ("null" if dbName is None else dbName)) + " : use SId instead"))
            else:
                pass
            # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:88
            # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:88
            x = ((HxOverrides.stringOrNull(quote(f.name)) + " ") + HxOverrides.stringOrNull(sys_db_TableCreate.getTypeSQL(f.t,dbName)))
            x1 = ("" if (f.isNull) else " NOT NULL")
            decls.append((("null" if x is None else x) + ("null" if x1 is None else x1)))
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:90
        if ((dbName != "SQLite") or (not hasID)):
            # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:91
            x2 = (("PRIMARY KEY (" + HxOverrides.stringOrNull(Lambda.map(infos.key,quote).join(","))) + ")")
            decls.append(x2)
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:92
        sql = (("null" if sql is None else sql) + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in decls])))
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:93
        sql = (("null" if sql is None else sql) + ")")
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:94
        if (engine is not None):
            sql = (("null" if sql is None else sql) + HxOverrides.stringOrNull((("ENGINE=" + ("null" if engine is None else engine)))))
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:96
        cnx.request(sql)

    @staticmethod
    def exists(manager):
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:100
        cnx = manager.getCnx()
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:101
        if (cnx is None):
            raise _HxException("SQL Connection not initialized on Manager")
        # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:103
        try:
            # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:104
            cnx.request((("SELECT * FROM `" + HxOverrides.stringOrNull(manager.dbInfos().name)) + "` LIMIT 1"))
            # /usr/local/lib/haxe/std/sys/db/TableCreate.hx:105
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e = _hx_e1
            return False
sys_db_TableCreate._hx_class = sys_db_TableCreate
_hx_classes["sys.db.TableCreate"] = sys_db_TableCreate

# /usr/local/lib/haxe/std/python/_std/Math.hx:135
Math.NEGATIVE_INFINITY = float("-inf")
# /usr/local/lib/haxe/std/python/_std/Math.hx:136
Math.POSITIVE_INFINITY = float("inf")
# /usr/local/lib/haxe/std/python/_std/Math.hx:137
Math.NaN = float("nan")
# /usr/local/lib/haxe/std/python/_std/Math.hx:138
Math.PI = python_lib_Math.pi

DBStart.FIRST_NAMES = ["Elina", "Martin", "Lowell", "Corazon", "Diedre", "Slyvia", "Latrice", "Chantell", "Jeff", "Zulma", "Deonna", "Kortney", "Sunshine", "Alysa", "Zane", "Shaina", "Queenie", "Ingeborg", "Jarrod", "Angle"]
DBStart.SUR_NAMES = ["De Jong", "Jansen", "De Vries", "Van den Berg ", "Van Dijk", "Bakker", "Janssen", "Visser", "Smit", "Meijer", "De Boer", "Mulder", "De Groot", "Bos", "Vos", "Peters", "Hendriks", "Van Leeuwen", "Dekker", "Brouwer", "De Wit", "Dijkstra", "Smits", "De Graaf", "Van der Meer"]
Date.EPOCH_UTC = python_lib_datetime_Datetime.fromtimestamp(0,python_lib_datetime_Timezone.utc)
sys_db_Manager.object_cache = haxe_ds_StringMap()
sys_db_Manager.init_list = List()
def _hx_init_sys_db_Manager_KEYWORDS():
    # /usr/local/lib/haxe/std/sys/db/Manager.hx:44
    def _hx_local_0():
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:45
        h = haxe_ds_StringMap()
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:46
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:46
        _g = 0
        _g1 = "ADD|ALL|ALTER|ANALYZE|AND|AS|ASC|ASENSITIVE|BEFORE|BETWEEN|BIGINT|BINARY|BLOB|BOTH|BY|CALL|CASCADE|CASE|CHANGE|CHAR|CHARACTER|CHECK|COLLATE|COLUMN|CONDITION|CONSTRAINT|CONTINUE|CONVERT|CREATE|CROSS|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DATABASES|DAY_HOUR|DAY_MICROSECOND|DAY_MINUTE|DAY_SECOND|DEC|DECIMAL|DECLARE|DEFAULT|DELAYED|DELETE|DESC|DESCRIBE|DETERMINISTIC|DISTINCT|DISTINCTROW|DIV|DOUBLE|DROP|DUAL|EACH|ELSE|ELSEIF|ENCLOSED|ESCAPED|EXISTS|EXIT|EXPLAIN|FALSE|FETCH|FLOAT|FLOAT4|FLOAT8|FOR|FORCE|FOREIGN|FROM|FULLTEXT|GRANT|GROUP|HAVING|HIGH_PRIORITY|HOUR_MICROSECOND|HOUR_MINUTE|HOUR_SECOND|IF|IGNORE|IN|INDEX|INFILE|INNER|INOUT|INSENSITIVE|INSERT|INT|INT1|INT2|INT3|INT4|INT8|INTEGER|INTERVAL|INTO|IS|ITERATE|JOIN|KEY|KEYS|KILL|LEADING|LEAVE|LEFT|LIKE|LIMIT|LINES|LOAD|LOCALTIME|LOCALTIMESTAMP|LOCK|LONG|LONGBLOB|LONGTEXT|LOOP|LOW_PRIORITY|MATCH|MEDIUMBLOB|MEDIUMINT|MEDIUMTEXT|MIDDLEINT|MINUTE_MICROSECOND|MINUTE_SECOND|MOD|MODIFIES|NATURAL|NOT|NO_WRITE_TO_BINLOG|NULL|NUMERIC|ON|OPTIMIZE|OPTION|OPTIONALLY|OR|ORDER|OUT|OUTER|OUTFILE|PRECISION|PRIMARY|PROCEDURE|PURGE|READ|READS|REAL|REFERENCES|REGEXP|RELEASE|RENAME|REPEAT|REPLACE|REQUIRE|RESTRICT|RETURN|REVOKE|RIGHT|RLIKE|SCHEMA|SCHEMAS|SECOND_MICROSECOND|SELECT|SENSITIVE|SEPARATOR|SET|SHOW|SMALLINT|SONAME|SPATIAL|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|SQL_BIG_RESULT|SQL_CALC_FOUND_ROWS|SQL_SMALL_RESULT|SSL|STARTING|STRAIGHT_JOIN|TABLE|TERMINATED|THEN|TINYBLOB|TINYINT|TINYTEXT|TO|TRAILING|TRIGGER|TRUE|UNDO|UNION|UNIQUE|UNLOCK|UNSIGNED|UPDATE|USAGE|USE|USING|UTC_DATE|UTC_TIME|UTC_TIMESTAMP|VALUES|VARBINARY|VARCHAR|VARCHARACTER|VARYING|WHEN|WHERE|WHILE|WITH|WRITE|XOR|YEAR_MONTH|ZEROFILL|ASENSITIVE|CALL|CONDITION|CONNECTION|CONTINUE|CURSOR|DECLARE|DETERMINISTIC|EACH|ELSEIF|EXIT|FETCH|GOTO|INOUT|INSENSITIVE|ITERATE|LABEL|LEAVE|LOOP|MODIFIES|OUT|READS|RELEASE|REPEAT|RETURN|SCHEMA|SCHEMAS|SENSITIVE|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|TRIGGER|UNDO|UPGRADE|WHILE".split("|")
        while (_g < len(_g1)):
            k = (_g1[_g] if _g >= 0 and _g < len(_g1) else None)
            _g = (_g + 1)
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:47
            # /usr/local/lib/haxe/std/sys/db/Manager.hx:47
            key = k.lower()
            h.h[key] = True
        # /usr/local/lib/haxe/std/sys/db/Manager.hx:48
        return h
    return _hx_local_0()
sys_db_Manager.KEYWORDS = _hx_init_sys_db_Manager_KEYWORDS()
haxe_Unserializer.DEFAULT_RESOLVER = haxe__Unserializer_DefaultResolver()
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"
haxe_Unserializer.CODES = None
User.__meta__ = _hx_AnonObject({'obj': _hx_AnonObject({'rtti': ["oy4:namey4:Usery7:indexesahy9:relationsahy7:hfieldsby2:idoR0R5y6:isNullfy1:tjy17:sys.db.RecordType:0:0gR0oR0R0R6fR7jR8:9:1i32gy8:birthdayoR0R9R6fR7jR8:10:0gy11:phoneNumberoR0R10R6tR7jR8:15:0ghy3:keyaR5hy6:fieldsar4r6r8r10hg"]})})
User.manager = sys_db_Manager(User)
haxe_Serializer.USE_CACHE = False
haxe_Serializer.USE_ENUM_INDEX = False
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:"
haxe_Serializer.BASE64_CODES = None
python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

Main.main()