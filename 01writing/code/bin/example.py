# Generated by Haxe 3.3.0

from datetime import datetime as python_lib_datetime_Datetime
import math as python_lib_Math
import math as Math
import builtins as python_lib_Builtins
import functools as python_lib_Functools
import inspect as python_lib_Inspect
import random as python_lib_Random


class _hx_AnonObject:
    def __init__(self, fields):
        self.__dict__ = fields


class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:38
        self.tag = tag
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:39
        self.index = index
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:40
        self.params = params

    def __str__(self):
        # /usr/local/lib/haxe/std/python/internal/EnumImpl.hx:45
        if (self.params is None):
            return self.tag
        else:
            return (((HxOverrides.stringOrNull(self.tag) + "(") + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in self.params]))) + ")")



class Date:
    _hx_class_name = "Date"
    __slots__ = ("date",)
    _hx_fields = ["date"]
    _hx_methods = ["toString"]
    _hx_statics = ["now"]

    def __init__(self,year,month,day,hour,_hx_min,sec):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:34
        if (year < python_lib_datetime_Datetime.min.year):
            year = python_lib_datetime_Datetime.min.year
        # /usr/local/lib/haxe/std/python/_std/Date.hx:35
        if (day == 0):
            day = 1
        # /usr/local/lib/haxe/std/python/_std/Date.hx:36
        self.date = python_lib_datetime_Datetime(year, (month + 1), day, hour, _hx_min, sec, 0)

    def toString(self):
        # /usr/local/lib/haxe/std/python/_std/Date.hx:83
        m = ((self.date.month - 1) + 1)
        # /usr/local/lib/haxe/std/python/_std/Date.hx:84
        d = self.date.day
        # /usr/local/lib/haxe/std/python/_std/Date.hx:85
        h = self.date.hour
        # /usr/local/lib/haxe/std/python/_std/Date.hx:86
        mi = self.date.minute
        # /usr/local/lib/haxe/std/python/_std/Date.hx:87
        s = self.date.second
        # /usr/local/lib/haxe/std/python/_std/Date.hx:88
        return ((((((((((Std.string(self.date.year) + "-") + HxOverrides.stringOrNull(((("0" + Std.string(m)) if ((m < 10)) else ("" + Std.string(m)))))) + "-") + HxOverrides.stringOrNull(((("0" + Std.string(d)) if ((d < 10)) else ("" + Std.string(d)))))) + " ") + HxOverrides.stringOrNull(((("0" + Std.string(h)) if ((h < 10)) else ("" + Std.string(h)))))) + ":") + HxOverrides.stringOrNull(((("0" + Std.string(mi)) if ((mi < 10)) else ("" + Std.string(mi)))))) + ":") + HxOverrides.stringOrNull(((("0" + Std.string(s)) if ((s < 10)) else ("" + Std.string(s))))))

    @staticmethod
    def now():
        # /usr/local/lib/haxe/std/python/_std/Date.hx:98
        d = Date(1970, 0, 1, 0, 0, 0)
        # /usr/local/lib/haxe/std/python/_std/Date.hx:99
        d.date = python_lib_datetime_Datetime.now()
        # /usr/local/lib/haxe/std/python/_std/Date.hx:100
        return d



class EnumValue:
    _hx_class_name = "EnumValue"


class Main:
    _hx_class_name = "Main"
    __slots__ = ()
    _hx_statics = ["main"]

    def __init__(self):
        # 01writing/code/src/Main.hx:13
        print("Python writing Example")
        # 01writing/code/src/Main.hx:16
        _hx_str = ("Hello World!\nWritten on: " + HxOverrides.stringOrNull(Date.now().toString()))
        # 01writing/code/src/Main.hx:18
        f = sys_io_File.write("hello.txt",False)
        # 01writing/code/src/Main.hx:19
        f.writeString(_hx_str)
        # 01writing/code/src/Main.hx:20
        f.close()

    @staticmethod
    def main():
        # 01writing/code/src/Main.hx:25
        Main()


class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["field"]

    @staticmethod
    def field(o,field):
        # /usr/local/lib/haxe/std/python/_std/Reflect.hx:44
        return python_Boot.field(o,field)


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["string"]

    @staticmethod
    def string(s):
        # /usr/local/lib/haxe/std/python/_std/Std.hx:134
        return python_Boot.toString1(s,"")


class haxe_io_Bytes:
    _hx_class_name = "haxe.io.Bytes"
    __slots__ = ("length", "b")
    _hx_fields = ["length", "b"]
    _hx_statics = ["ofString"]

    def __init__(self,length,b):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:34
        self.length = length
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:35
        self.b = b

    @staticmethod
    def ofString(s):
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:516
        b = bytearray(s, "UTF-8")
        # /usr/local/lib/haxe/std/haxe/io/Bytes.hx:517
        return haxe_io_Bytes(len(b), b)



class haxe_io_Eof:
    _hx_class_name = "haxe.io.Eof"
    __slots__ = ()
    _hx_methods = ["toString"]

    def toString(self):
        # /usr/local/lib/haxe/std/haxe/io/Eof.hx:31
        return "Eof"


class haxe_io_Error(Enum):
    __slots__ = ()
    _hx_class_name = "haxe.io.Error"

    @staticmethod
    def Custom(e):
        return haxe_io_Error("Custom", 3, [e])
haxe_io_Error.Blocked = haxe_io_Error("Blocked", 0, list())
haxe_io_Error.Overflow = haxe_io_Error("Overflow", 1, list())
haxe_io_Error.OutsideBounds = haxe_io_Error("OutsideBounds", 2, list())


class haxe_io_Output:
    _hx_class_name = "haxe.io.Output"
    __slots__ = ("bigEndian",)
    _hx_fields = ["bigEndian"]
    _hx_methods = ["writeByte", "writeBytes", "set_bigEndian", "writeFullBytes", "writeString"]

    def writeByte(self,c):
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:47
        raise _HxException("Not implemented")

    def writeBytes(self,s,pos,_hx_len):
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:59
        if (((pos < 0) or ((_hx_len < 0))) or (((pos + _hx_len) > s.length))):
            raise _HxException(haxe_io_Error.OutsideBounds)
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:62
        b = s.b
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:63
        k = _hx_len
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:64
        while (k > 0):
            # /usr/local/lib/haxe/std/haxe/io/Output.hx:74
            self.writeByte(b[pos])
            # /usr/local/lib/haxe/std/haxe/io/Output.hx:76
            pos = (pos + 1)
            # /usr/local/lib/haxe/std/haxe/io/Output.hx:77
            k = (k - 1)
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:79
        return _hx_len

    def set_bigEndian(self,b):
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:97
        self.bigEndian = b
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:98
        return b

    def writeFullBytes(self,s,pos,_hx_len):
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:123
        while (_hx_len > 0):
            # /usr/local/lib/haxe/std/haxe/io/Output.hx:124
            k = self.writeBytes(s,pos,_hx_len)
            # /usr/local/lib/haxe/std/haxe/io/Output.hx:125
            pos = (pos + k)
            # /usr/local/lib/haxe/std/haxe/io/Output.hx:126
            _hx_len = (_hx_len - k)

    def writeString(self,s):
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:282
        b = haxe_io_Bytes.ofString(s)
        # /usr/local/lib/haxe/std/haxe/io/Output.hx:284
        self.writeFullBytes(b,0,b.length)



class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "field", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        # /usr/local/lib/haxe/std/python/Boot.hx:94
        if (o is None):
            return "null"
        # /usr/local/lib/haxe/std/python/Boot.hx:96
        if isinstance(o,str):
            return o
        # /usr/local/lib/haxe/std/python/Boot.hx:98
        if (s is None):
            s = ""
        # /usr/local/lib/haxe/std/python/Boot.hx:99
        if (len(s) >= 5):
            return "<...>"
        # /usr/local/lib/haxe/std/python/Boot.hx:101
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        # /usr/local/lib/haxe/std/python/Boot.hx:104
        if isinstance(o,int):
            return str(o)
        # /usr/local/lib/haxe/std/python/Boot.hx:108
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                e = _hx_e1
                return str(o)
        # /usr/local/lib/haxe/std/python/Boot.hx:120
        if isinstance(o,list):
            # /usr/local/lib/haxe/std/python/Boot.hx:122
            o1 = o
            # /usr/local/lib/haxe/std/python/Boot.hx:124
            l = len(o1)
            # /usr/local/lib/haxe/std/python/Boot.hx:126
            st = "["
            # /usr/local/lib/haxe/std/python/Boot.hx:127
            s = (("null" if s is None else s) + "\t")
            # /usr/local/lib/haxe/std/python/Boot.hx:128
            # /usr/local/lib/haxe/std/python/Boot.hx:128
            _g1 = 0
            _g = l
            while (_g1 < _g):
                i = _g1
                _g1 = (_g1 + 1)
                # /usr/local/lib/haxe/std/python/Boot.hx:129
                prefix = ""
                # /usr/local/lib/haxe/std/python/Boot.hx:130
                if (i > 0):
                    prefix = ","
                # /usr/local/lib/haxe/std/python/Boot.hx:133
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            # /usr/local/lib/haxe/std/python/Boot.hx:135
            st = (("null" if st is None else st) + "]")
            # /usr/local/lib/haxe/std/python/Boot.hx:136
            return st
        # /usr/local/lib/haxe/std/python/Boot.hx:139
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        # /usr/local/lib/haxe/std/python/Boot.hx:145
        if (python_lib_Inspect.isfunction(o) or python_lib_Inspect.ismethod(o)):
            return "<function>"
        # /usr/local/lib/haxe/std/python/Boot.hx:147
        if hasattr(o,"__class__"):
            # /usr/local/lib/haxe/std/python/Boot.hx:150
            if isinstance(o,_hx_AnonObject):
                # /usr/local/lib/haxe/std/python/Boot.hx:152
                toStr = None
                # /usr/local/lib/haxe/std/python/Boot.hx:153
                try:
                    # /usr/local/lib/haxe/std/python/Boot.hx:155
                    fields = python_Boot.fields(o)
                    # /usr/local/lib/haxe/std/python/Boot.hx:156
                    _g2 = []
                    _g11 = 0
                    while (_g11 < len(fields)):
                        f = (fields[_g11] if _g11 >= 0 and _g11 < len(fields) else None)
                        _g11 = (_g11 + 1)
                        tmp = (("" + ("null" if f is None else f)) + " : ")
                        tmp1 = python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))
                        _g2.append((("null" if tmp is None else tmp) + ("null" if tmp1 is None else tmp1)))
                    fieldsStr = _g2
                    # /usr/local/lib/haxe/std/python/Boot.hx:157
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except Exception as _hx_e:
                    _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                    e2 = _hx_e1
                    return "{ ... }"
                # /usr/local/lib/haxe/std/python/Boot.hx:163
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            # /usr/local/lib/haxe/std/python/Boot.hx:173
            if isinstance(o,Enum):
                # /usr/local/lib/haxe/std/python/Boot.hx:175
                o2 = o
                # /usr/local/lib/haxe/std/python/Boot.hx:177
                l1 = len(o2.params)
                # /usr/local/lib/haxe/std/python/Boot.hx:178
                hasParams = (l1 > 0)
                # /usr/local/lib/haxe/std/python/Boot.hx:179
                if hasParams:
                    # /usr/local/lib/haxe/std/python/Boot.hx:180
                    paramsStr = ""
                    # /usr/local/lib/haxe/std/python/Boot.hx:181
                    # /usr/local/lib/haxe/std/python/Boot.hx:181
                    _g12 = 0
                    _g3 = l1
                    while (_g12 < _g3):
                        i1 = _g12
                        _g12 = (_g12 + 1)
                        # /usr/local/lib/haxe/std/python/Boot.hx:182
                        prefix1 = ""
                        # /usr/local/lib/haxe/std/python/Boot.hx:183
                        if (i1 > 0):
                            prefix1 = ","
                        # /usr/local/lib/haxe/std/python/Boot.hx:186
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix1 is None else prefix1) + HxOverrides.stringOrNull(python_Boot.toString1((o2.params[i1] if i1 >= 0 and i1 < len(o2.params) else None),s))))))
                    # /usr/local/lib/haxe/std/python/Boot.hx:188
                    return (((HxOverrides.stringOrNull(o2.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o2.tag
            # /usr/local/lib/haxe/std/python/Boot.hx:194
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    # /usr/local/lib/haxe/std/python/Boot.hx:196
                    fields1 = python_Boot.getInstanceFields(o)
                    # /usr/local/lib/haxe/std/python/Boot.hx:197
                    _g4 = []
                    _g13 = 0
                    while (_g13 < len(fields1)):
                        f1 = (fields1[_g13] if _g13 >= 0 and _g13 < len(fields1) else None)
                        _g13 = (_g13 + 1)
                        tmp2 = (("" + ("null" if f1 is None else f1)) + " : ")
                        tmp3 = python_Boot.toString1(python_Boot.simpleField(o,f1),(("null" if s is None else s) + "\t"))
                        _g4.append((("null" if tmp2 is None else tmp2) + ("null" if tmp3 is None else tmp3)))
                    fieldsStr1 = _g4
                    # /usr/local/lib/haxe/std/python/Boot.hx:199
                    toStr1 = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr1]))) + " )")
                    # /usr/local/lib/haxe/std/python/Boot.hx:200
                    return toStr1
                else:
                    # /usr/local/lib/haxe/std/python/Boot.hx:202
                    fields2 = python_Boot.getClassFields(o)
                    # /usr/local/lib/haxe/std/python/Boot.hx:203
                    _g5 = []
                    _g14 = 0
                    while (_g14 < len(fields2)):
                        f2 = (fields2[_g14] if _g14 >= 0 and _g14 < len(fields2) else None)
                        _g14 = (_g14 + 1)
                        tmp4 = (("" + ("null" if f2 is None else f2)) + " : ")
                        tmp5 = python_Boot.toString1(python_Boot.simpleField(o,f2),(("null" if s is None else s) + "\t"))
                        _g5.append((("null" if tmp4 is None else tmp4) + ("null" if tmp5 is None else tmp5)))
                    fieldsStr2 = _g5
                    # /usr/local/lib/haxe/std/python/Boot.hx:204
                    toStr2 = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr2]))) + " )")
                    # /usr/local/lib/haxe/std/python/Boot.hx:205
                    return toStr2
            # /usr/local/lib/haxe/std/python/Boot.hx:209
            if (o == str):
                return "#String"
            # /usr/local/lib/haxe/std/python/Boot.hx:213
            if (o == list):
                return "#Array"
            # /usr/local/lib/haxe/std/python/Boot.hx:217
            if callable(o):
                return "function"
            # /usr/local/lib/haxe/std/python/Boot.hx:220
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                pass
            # /usr/local/lib/haxe/std/python/Boot.hx:226
            if hasattr(o,"__str__"):
                return o.__str__([])
            # /usr/local/lib/haxe/std/python/Boot.hx:230
            if hasattr(o,"__name__"):
                return o.__name__
            # /usr/local/lib/haxe/std/python/Boot.hx:233
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        # /usr/local/lib/haxe/std/python/Boot.hx:245
        a = []
        # /usr/local/lib/haxe/std/python/Boot.hx:246
        if (o is not None):
            # /usr/local/lib/haxe/std/python/Boot.hx:247
            if hasattr(o,"_hx_fields"):
                # /usr/local/lib/haxe/std/python/Boot.hx:248
                fields = o._hx_fields
                # /usr/local/lib/haxe/std/python/Boot.hx:249
                return list(fields)
            # /usr/local/lib/haxe/std/python/Boot.hx:251
            if isinstance(o,_hx_AnonObject):
                # /usr/local/lib/haxe/std/python/Boot.hx:253
                d = o.__dict__
                # /usr/local/lib/haxe/std/python/Boot.hx:254
                keys = d.keys()
                # /usr/local/lib/haxe/std/python/Boot.hx:255
                handler = python_Boot.unhandleKeywords
                # /usr/local/lib/haxe/std/python/Boot.hx:257
                for k in keys:
                # /usr/local/lib/haxe/std/python/Boot.hx:258
                    a.append(handler(k))
            elif hasattr(o,"__dict__"):
                # /usr/local/lib/haxe/std/python/Boot.hx:262
                d1 = o.__dict__
                # /usr/local/lib/haxe/std/python/Boot.hx:263
                keys1 = d1.keys()
                # /usr/local/lib/haxe/std/python/Boot.hx:264
                for k in keys1:
                # /usr/local/lib/haxe/std/python/Boot.hx:265
                    a.append(k)
        # /usr/local/lib/haxe/std/python/Boot.hx:269
        return a

    @staticmethod
    def simpleField(o,field):
        # /usr/local/lib/haxe/std/python/Boot.hx:281
        if (field is None):
            return None
        # /usr/local/lib/haxe/std/python/Boot.hx:283
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        # /usr/local/lib/haxe/std/python/Boot.hx:284
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def field(o,field):
        # /usr/local/lib/haxe/std/python/Boot.hx:288
        if (field is None):
            return None
        # /usr/local/lib/haxe/std/python/Boot.hx:290
        # /usr/local/lib/haxe/std/python/Boot.hx:290
        _hx_local_0 = len(field)
        # /usr/local/lib/haxe/std/python/Boot.hx:295
        if (_hx_local_0 == 10):
            if (field == "charCodeAt"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:295
                    s1 = o
                    def _hx_local_1(a11):
                        return HxString.charCodeAt(s1,a11)
                    return _hx_local_1
        elif (_hx_local_0 == 11):
            if (field == "lastIndexOf"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:297
                    s3 = o
                    def _hx_local_2(a15):
                        return HxString.lastIndexOf(s3,a15)
                    return _hx_local_2
                elif isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:315
                    a4 = o
                    def _hx_local_3(x4):
                        return python_internal_ArrayImpl.lastIndexOf(a4,x4)
                    return _hx_local_3
            elif (field == "toLowerCase"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:292
                    s7 = o
                    def _hx_local_4():
                        return HxString.toLowerCase(s7)
                    return _hx_local_4
            elif (field == "toUpperCase"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:293
                    s9 = o
                    def _hx_local_5():
                        return HxString.toUpperCase(s9)
                    return _hx_local_5
        elif (_hx_local_0 == 9):
            if (field == "substring"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:300
                    s6 = o
                    def _hx_local_6(a19):
                        return HxString.substring(s6,a19)
                    return _hx_local_6
        elif (_hx_local_0 == 4):
            if (field == "copy"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:306
                    def _hx_local_7():
                        # /usr/local/lib/haxe/std/python/Boot.hx:306
                        return list(o)
                    return _hx_local_7
            elif (field == "join"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:309
                    def _hx_local_8(sep):
                        # /usr/local/lib/haxe/std/python/Boot.hx:309
                        return sep.join([python_Boot.toString1(x1,'') for x1 in o])
                    return _hx_local_8
            elif (field == "push"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:312
                    x7 = o
                    def _hx_local_9(e):
                        return python_internal_ArrayImpl.push(x7,e)
                    return _hx_local_9
            elif (field == "sort"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:320
                    x11 = o
                    def _hx_local_10(f2):
                        python_internal_ArrayImpl.sort(x11,f2)
                    return _hx_local_10
        elif (_hx_local_0 == 5):
            if (field == "shift"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:318
                    x9 = o
                    def _hx_local_11():
                        return python_internal_ArrayImpl.shift(x9)
                    return _hx_local_11
            elif (field == "slice"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:319
                    x10 = o
                    def _hx_local_12(a16):
                        return python_internal_ArrayImpl.slice(x10,a16)
                    return _hx_local_12
            elif (field == "split"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:298
                    s4 = o
                    def _hx_local_13(d):
                        return HxString.split(s4,d)
                    return _hx_local_13
        elif (_hx_local_0 == 7):
            if (field == "indexOf"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:296
                    s2 = o
                    def _hx_local_14(a13):
                        return HxString.indexOf(s2,a13)
                    return _hx_local_14
                elif isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:314
                    a = o
                    def _hx_local_15(x1):
                        return python_internal_ArrayImpl.indexOf(a,x1)
                    return _hx_local_15
            elif (field == "reverse"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:317
                    a5 = o
                    def _hx_local_16():
                        python_internal_ArrayImpl.reverse(a5)
                    return _hx_local_16
            elif (field == "unshift"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:313
                    x14 = o
                    def _hx_local_17(e2):
                        python_internal_ArrayImpl.unshift(x14,e2)
                    return _hx_local_17
        elif (_hx_local_0 == 3):
            if (field == "map"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:303
                    x5 = o
                    def _hx_local_18(f1):
                        return python_internal_ArrayImpl.map(x5,f1)
                    return _hx_local_18
            elif (field == "pop"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:311
                    x6 = o
                    def _hx_local_19():
                        return python_internal_ArrayImpl.pop(x6)
                    return _hx_local_19
        elif (_hx_local_0 == 8):
            if (field == "iterator"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:307
                    x3 = o
                    def _hx_local_20():
                        return python_internal_ArrayImpl.iterator(x3)
                    return _hx_local_20
            elif (field == "toString"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:301
                    s8 = o
                    def _hx_local_21():
                        return HxString.toString(s8)
                    return _hx_local_21
                elif isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:310
                    x13 = o
                    def _hx_local_22():
                        return python_internal_ArrayImpl.toString(x13)
                    return _hx_local_22
        elif (_hx_local_0 == 6):
            if (field == "charAt"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:294
                    s = o
                    def _hx_local_23(a1):
                        return HxString.charAt(s,a1)
                    return _hx_local_23
            elif (field == "concat"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:305
                    a12 = o
                    def _hx_local_24(a2):
                        return python_internal_ArrayImpl.concat(a12,a2)
                    return _hx_local_24
            elif (field == "filter"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:304
                    x = o
                    def _hx_local_25(f):
                        return python_internal_ArrayImpl.filter(x,f)
                    return _hx_local_25
            elif (field == "insert"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:308
                    a3 = o
                    def _hx_local_26(a14,x2):
                        python_internal_ArrayImpl.insert(a3,a14,x2)
                    return _hx_local_26
            elif (field == "length"):
                if isinstance(o,str):
                    return len(o)
                elif isinstance(o,list):
                    return len(o)
            elif (field == "remove"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:316
                    x8 = o
                    def _hx_local_27(e1):
                        return python_internal_ArrayImpl.remove(x8,e1)
                    return _hx_local_27
            elif (field == "splice"):
                if isinstance(o,list):
                    # /usr/local/lib/haxe/std/python/Boot.hx:321
                    x12 = o
                    def _hx_local_28(a17,a21):
                        return python_internal_ArrayImpl.splice(x12,a17,a21)
                    return _hx_local_28
            elif (field == "substr"):
                if isinstance(o,str):
                    # /usr/local/lib/haxe/std/python/Boot.hx:299
                    s5 = o
                    def _hx_local_29(a18):
                        return HxString.substr(s5,a18)
                    return _hx_local_29
        else:
            pass
        # /usr/local/lib/haxe/std/python/Boot.hx:325
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        # /usr/local/lib/haxe/std/python/Boot.hx:326
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        # /usr/local/lib/haxe/std/python/Boot.hx:331
        f = (c._hx_fields if (hasattr(c,"_hx_fields")) else [])
        # /usr/local/lib/haxe/std/python/Boot.hx:332
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        # /usr/local/lib/haxe/std/python/Boot.hx:335
        sc = python_Boot.getSuperClass(c)
        # /usr/local/lib/haxe/std/python/Boot.hx:337
        if (sc is None):
            return f
        else:
            # /usr/local/lib/haxe/std/python/Boot.hx:341
            scArr = python_Boot.getInstanceFields(sc)
            # /usr/local/lib/haxe/std/python/Boot.hx:342
            scMap = set(scArr)
            # /usr/local/lib/haxe/std/python/Boot.hx:345
            # /usr/local/lib/haxe/std/python/Boot.hx:345
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                # /usr/local/lib/haxe/std/python/Boot.hx:346
                if (not (f1 in scMap)):
                    scArr.append(f1)
            # /usr/local/lib/haxe/std/python/Boot.hx:351
            return scArr

    @staticmethod
    def getSuperClass(c):
        # /usr/local/lib/haxe/std/python/Boot.hx:356
        if (c is None):
            return None
        # /usr/local/lib/haxe/std/python/Boot.hx:359
        try:
            # /usr/local/lib/haxe/std/python/Boot.hx:360
            if hasattr(c,"_hx_super"):
                return c._hx_super
            # /usr/local/lib/haxe/std/python/Boot.hx:363
            return None
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            pass
        # /usr/local/lib/haxe/std/python/Boot.hx:367
        return None

    @staticmethod
    def getClassFields(c):
        # /usr/local/lib/haxe/std/python/Boot.hx:372
        if hasattr(c,"_hx_statics"):
            # /usr/local/lib/haxe/std/python/Boot.hx:373
            x = c._hx_statics
            # /usr/local/lib/haxe/std/python/Boot.hx:374
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        # /usr/local/lib/haxe/std/python/Boot.hx:398
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            # /usr/local/lib/haxe/std/python/Boot.hx:399
            real = HxString.substr(name,python_Boot.prefixLength,None)
            # /usr/local/lib/haxe/std/python/Boot.hx:400
            if (real in python_Boot.keywords):
                return real
        # /usr/local/lib/haxe/std/python/Boot.hx:402
        return name


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:31
        self.checked = False
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:30
        self.has = False
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:29
        self.x = None
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:34
        self.it = it

    def next(self):
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:38
        if (not self.checked):
            self.hasNext()
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:39
        self.checked = False
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:40
        return self.x

    def hasNext(self):
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:44
        if (not self.checked):
            # /usr/local/lib/haxe/std/python/HaxeIterator.hx:45
            try:
                # /usr/local/lib/haxe/std/python/HaxeIterator.hx:46
                self.x = self.it.__next__()
                # /usr/local/lib/haxe/std/python/HaxeIterator.hx:47
                self.has = True
            except Exception as _hx_e:
                _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
                if isinstance(_hx_e1, StopIteration):
                    s = _hx_e1
                    # /usr/local/lib/haxe/std/python/HaxeIterator.hx:49
                    self.has = False
                    # /usr/local/lib/haxe/std/python/HaxeIterator.hx:50
                    self.x = None
                else:
                    raise _hx_e
            # /usr/local/lib/haxe/std/python/HaxeIterator.hx:52
            self.checked = True
        # /usr/local/lib/haxe/std/python/HaxeIterator.hx:54
        return self.has



class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["concat", "iterator", "indexOf", "lastIndexOf", "toString", "pop", "push", "unshift", "remove", "shift", "slice", "sort", "splice", "map", "filter", "insert", "reverse", "_get"]

    @staticmethod
    def concat(a1,a2):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:35
        return (a1 + a2)

    @staticmethod
    def iterator(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:45
        return python_HaxeIterator(x.__iter__())

    @staticmethod
    def indexOf(a,x,fromIndex = None):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:50
        _hx_len = len(a)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:51
        l = (0 if ((fromIndex is None)) else ((_hx_len + fromIndex) if ((fromIndex < 0)) else fromIndex))
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:55
        if (l < 0):
            l = 0
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:56
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:56
        _g1 = l
        while (_g1 < _hx_len):
            i = _g1
            _g1 = (_g1 + 1)
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:57
            if (a[i] == x):
                return i
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:59
        return -1

    @staticmethod
    def lastIndexOf(a,x,fromIndex = None):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:64
        _hx_len = len(a)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:65
        l = (_hx_len if ((fromIndex is None)) else (((_hx_len + fromIndex) + 1) if ((fromIndex < 0)) else (fromIndex + 1)))
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:69
        if (l > _hx_len):
            l = _hx_len
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:70
        while True:
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:70
            l = (l - 1)
            tmp = l
            if (not ((tmp > -1))):
                break
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:71
            if (a[l] == x):
                return l
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:73
        return -1

    @staticmethod
    def toString(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:84
        return (("[" + HxOverrides.stringOrNull(",".join([python_Boot.toString1(x1,'') for x1 in x]))) + "]")

    @staticmethod
    def pop(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:89
        if (len(x) == 0):
            return None
        else:
            return x.pop()

    @staticmethod
    def push(x,e):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:94
        x.append(e)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:95
        return len(x)

    @staticmethod
    def unshift(x,e):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:100
        x.insert(0, e)

    @staticmethod
    def remove(x,e):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:105
        try:
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:106
            x.remove(e)
            # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:107
            return True
        except Exception as _hx_e:
            _hx_e1 = _hx_e.val if isinstance(_hx_e, _HxException) else _hx_e
            e1 = _hx_e1
            return False

    @staticmethod
    def shift(x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:115
        if (len(x) == 0):
            return None
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:116
        return x.pop(0)

    @staticmethod
    def slice(x,pos,end = None):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:121
        return x[pos:end]

    @staticmethod
    def sort(x,f):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:125
        x.sort(key= python_lib_Functools.cmp_to_key(f))

    @staticmethod
    def splice(x,pos,_hx_len):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:130
        if (pos < 0):
            pos = (len(x) + pos)
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:131
        if (pos < 0):
            pos = 0
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:132
        res = x[pos:(pos + _hx_len)]
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:133
        del x[pos:(pos + _hx_len)]
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:134
        return res

    @staticmethod
    def map(x,f):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:139
        return list(map(f,x))

    @staticmethod
    def filter(x,f):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:144
        return list(filter(f,x))

    @staticmethod
    def insert(a,pos,x):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:149
        a.insert(pos, x)

    @staticmethod
    def reverse(a):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:153
        a.reverse()

    @staticmethod
    def _get(x,idx):
        # /usr/local/lib/haxe/std/python/internal/ArrayImpl.hx:158
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None


class _HxException(Exception):
    _hx_class_name = "_HxException"
    __slots__ = ("val",)
    _hx_fields = ["val"]
    _hx_methods = []
    _hx_statics = []
    _hx_super = Exception


    def __init__(self,val):
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:28
        self.val = None
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:32
        super().__init__(str(val))
        # /usr/local/lib/haxe/std/python/internal/HxException.hx:33
        self.val = val



class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull"]

    @staticmethod
    def eq(a,b):
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:46
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:49
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        # /usr/local/lib/haxe/std/python/internal/HxOverrides.hx:53
        if (s is None):
            return "null"
        else:
            return s


class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["split", "charCodeAt", "charAt", "lastIndexOf", "toUpperCase", "toLowerCase", "indexOf", "toString", "substring", "substr"]

    @staticmethod
    def split(s,d):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:31
        if (d == ""):
            return list(s)
        else:
            return s.split(d)

    @staticmethod
    def charCodeAt(s,index):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:37
        if ((((s is None) or ((len(s) == 0))) or ((index < 0))) or ((index >= len(s)))):
            return None
        else:
            return ord(s[index])

    @staticmethod
    def charAt(s,index):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:43
        if ((index < 0) or ((index >= len(s)))):
            return ""
        else:
            return s[index]

    @staticmethod
    def lastIndexOf(s,_hx_str,startIndex = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:48
        if (startIndex is None):
            return s.rfind(_hx_str, 0, len(s))
        else:
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:52
            i = s.rfind(_hx_str, 0, (startIndex + 1))
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:53
            startLeft = (max(0,((startIndex + 1) - len(_hx_str))) if ((i == -1)) else (i + 1))
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:54
            check = s.find(_hx_str, startLeft, len(s))
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:55
            if ((check > i) and ((check <= startIndex))):
                return check
            else:
                return i

    @staticmethod
    def toUpperCase(s):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:65
        return s.upper()

    @staticmethod
    def toLowerCase(s):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:69
        return s.lower()

    @staticmethod
    def indexOf(s,_hx_str,startIndex = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:73
        if (startIndex is None):
            return s.find(_hx_str)
        else:
            return s.find(_hx_str, startIndex)

    @staticmethod
    def toString(s):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:80
        return s

    @staticmethod
    def substring(s,startIndex,endIndex = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:96
        if (startIndex < 0):
            startIndex = 0
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:97
        if (endIndex is None):
            return s[startIndex:]
        else:
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:100
            if (endIndex < 0):
                endIndex = 0
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:101
            if (endIndex < startIndex):
                return s[endIndex:startIndex]
            else:
                return s[startIndex:endIndex]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:112
        if (_hx_len is None):
            return s[startIndex:]
        else:
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:115
            if (_hx_len == 0):
                return ""
            # /usr/local/lib/haxe/std/python/internal/StringImpl.hx:116
            return s[startIndex:(startIndex + _hx_len)]


class python_io_NativeOutput(haxe_io_Output):
    _hx_class_name = "python.io.NativeOutput"
    __slots__ = ("stream",)
    _hx_fields = ["stream"]
    _hx_methods = ["close"]
    _hx_statics = []
    _hx_super = haxe_io_Output


    def __init__(self,stream):
        # /usr/local/lib/haxe/std/python/io/NativeOutput.hx:31
        self.stream = None
        # /usr/local/lib/haxe/std/python/io/NativeOutput.hx:37
        self.set_bigEndian(False)
        # /usr/local/lib/haxe/std/python/io/NativeOutput.hx:38
        self.stream = stream
        # /usr/local/lib/haxe/std/python/io/NativeOutput.hx:39
        if (not stream.writable()):
            raise _HxException("Read only stream")

    def close(self):
        # /usr/local/lib/haxe/std/python/io/NativeOutput.hx:44
        self.stream.close()



class python_io_NativeBytesOutput(python_io_NativeOutput):
    _hx_class_name = "python.io.NativeBytesOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["writeByte"]
    _hx_statics = []
    _hx_super = python_io_NativeOutput


    def __init__(self,stream):
        # /usr/local/lib/haxe/std/python/io/NativeBytesOutput.hx:33
        super().__init__(stream)

    def writeByte(self,c):
        # /usr/local/lib/haxe/std/python/io/NativeBytesOutput.hx:48
        self.stream.write(bytearray([c]))



class python_io_IOutput:
    _hx_class_name = "python.io.IOutput"
    __slots__ = ()
    _hx_methods = ["set_bigEndian", "writeByte", "writeBytes", "close", "writeFullBytes", "writeString"]


class python_io_IFileOutput:
    _hx_class_name = "python.io.IFileOutput"
    __slots__ = ()


class python_io_FileBytesOutput(python_io_NativeBytesOutput):
    _hx_class_name = "python.io.FileBytesOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeBytesOutput


    def __init__(self,stream):
        # /usr/local/lib/haxe/std/python/io/FileBytesOutput.hx:30
        super().__init__(stream)


class python_io_NativeTextOutput(python_io_NativeOutput):
    _hx_class_name = "python.io.NativeTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["writeByte"]
    _hx_statics = []
    _hx_super = python_io_NativeOutput


    def __init__(self,stream):
        # /usr/local/lib/haxe/std/python/io/NativeTextOutput.hx:34
        super().__init__(stream)
        # /usr/local/lib/haxe/std/python/io/NativeTextOutput.hx:35
        if (not stream.writable()):
            raise _HxException("Read only stream")

    def writeByte(self,c):
        # /usr/local/lib/haxe/std/python/io/NativeTextOutput.hx:45
        self.stream.write("".join(map(chr,[c])))



class python_io_FileTextOutput(python_io_NativeTextOutput):
    _hx_class_name = "python.io.FileTextOutput"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = []
    _hx_statics = []
    _hx_super = python_io_NativeTextOutput


    def __init__(self,stream):
        # /usr/local/lib/haxe/std/python/io/FileTextOutput.hx:30
        super().__init__(stream)


class python_io_IoTools:
    _hx_class_name = "python.io.IoTools"
    __slots__ = ()
    _hx_statics = ["createFileOutputFromText", "createFileOutputFromBytes"]

    @staticmethod
    def createFileOutputFromText(t):
        # /usr/local/lib/haxe/std/python/io/IoTools.hx:47
        return sys_io_FileOutput(python_io_FileTextOutput(t))

    @staticmethod
    def createFileOutputFromBytes(t):
        # /usr/local/lib/haxe/std/python/io/IoTools.hx:51
        return sys_io_FileOutput(python_io_FileBytesOutput(t))


class sys_io_File:
    _hx_class_name = "sys.io.File"
    __slots__ = ()
    _hx_statics = ["write"]

    @staticmethod
    def write(path,binary = True):
        # /usr/local/lib/haxe/std/python/_std/sys/io/File.hx:66
        if (binary is None):
            binary = True
        # /usr/local/lib/haxe/std/python/_std/sys/io/File.hx:68
        f = python_lib_Builtins.open(path,("wb" if binary else "w"),-1,None,None,(None if binary else ""))
        # /usr/local/lib/haxe/std/python/_std/sys/io/File.hx:70
        if binary:
            return python_io_IoTools.createFileOutputFromBytes(f)
        else:
            return python_io_IoTools.createFileOutputFromText(f)


class sys_io_FileOutput(haxe_io_Output):
    _hx_class_name = "sys.io.FileOutput"
    __slots__ = ("impl",)
    _hx_fields = ["impl"]
    _hx_methods = ["set_bigEndian", "writeByte", "writeBytes", "close", "writeFullBytes", "writeString"]
    _hx_statics = []
    _hx_super = haxe_io_Output


    def __init__(self,impl):
        # /usr/local/lib/haxe/std/python/_std/sys/io/FileOutput.hx:34
        self.impl = impl

    def set_bigEndian(self,b):
        # /usr/local/lib/haxe/std/python/_std/sys/io/FileOutput.hx:46
        return self.impl.set_bigEndian(b)

    def writeByte(self,c):
        # /usr/local/lib/haxe/std/python/_std/sys/io/FileOutput.hx:50
        self.impl.writeByte(c)

    def writeBytes(self,s,pos,_hx_len):
        # /usr/local/lib/haxe/std/python/_std/sys/io/FileOutput.hx:54
        return self.impl.writeBytes(s,pos,_hx_len)

    def close(self):
        # /usr/local/lib/haxe/std/python/_std/sys/io/FileOutput.hx:62
        self.impl.close()

    def writeFullBytes(self,s,pos,_hx_len):
        # /usr/local/lib/haxe/std/python/_std/sys/io/FileOutput.hx:70
        self.impl.writeFullBytes(s,pos,_hx_len)

    def writeString(self,s):
        # /usr/local/lib/haxe/std/python/_std/sys/io/FileOutput.hx:114
        self.impl.writeString(s)


# /usr/local/lib/haxe/std/python/_std/Math.hx:135
Math.NEGATIVE_INFINITY = float("-inf")
# /usr/local/lib/haxe/std/python/_std/Math.hx:136
Math.POSITIVE_INFINITY = float("inf")
# /usr/local/lib/haxe/std/python/_std/Math.hx:137
Math.NaN = float("nan")
# /usr/local/lib/haxe/std/python/_std/Math.hx:138
Math.PI = python_lib_Math.pi

python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

Main.main()